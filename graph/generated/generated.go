// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/miyauchi-sup/graphql/graph/model"
	gqlparser "github.com/vektah/gqlparser"
	"github.com/vektah/gqlparser/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
	PublicCache func(ctx context.Context, obj interface{}, next graphql.Resolver, cacheAge *int) (res interface{}, err error)
	UserData    func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
}

type ComplexityRoot struct {
	Address struct {
		City      func(childComplexity int) int
		Country   func(childComplexity int) int
		CountryID func(childComplexity int) int
		ID        func(childComplexity int) int
		State     func(childComplexity int) int
		StateID   func(childComplexity int) int
	}

	ContactInfo struct {
		City      func(childComplexity int) int
		Country   func(childComplexity int) int
		CountryID func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		NameFirst func(childComplexity int) int
		NameLast  func(childComplexity int) int
		State     func(childComplexity int) int
		StateID   func(childComplexity int) int
		Zipcode   func(childComplexity int) int
	}

	Entrant struct {
		Event          func(childComplexity int) int
		ID             func(childComplexity int) int
		IsDisqualified func(childComplexity int) int
		Name           func(childComplexity int) int
		Participants   func(childComplexity int) int
		Seeds          func(childComplexity int) int
		Skill          func(childComplexity int) int
		Standing       func(childComplexity int) int
		Stream         func(childComplexity int) int
		Streams        func(childComplexity int) int
	}

	EntrantConnection struct {
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	Event struct {
		CheckInBuffer          func(childComplexity int) int
		CheckInDuration        func(childComplexity int) int
		CheckInEnabled         func(childComplexity int) int
		CreatedAt              func(childComplexity int) int
		DeckSubmissionDeadline func(childComplexity int) int
		EntrantSizeMax         func(childComplexity int) int
		EntrantSizeMin         func(childComplexity int) int
		Entrants               func(childComplexity int, query *model.EventEntrantPageQuery) int
		HasDecks               func(childComplexity int) int
		HasTasks               func(childComplexity int) int
		ID                     func(childComplexity int) int
		Images                 func(childComplexity int, typeArg *string) int
		IsOnline               func(childComplexity int) int
		MatchRulesMarkdown     func(childComplexity int) int
		Name                   func(childComplexity int) int
		NumEntrants            func(childComplexity int) int
		PhaseGroups            func(childComplexity int) int
		Phases                 func(childComplexity int, state *model.ActivityState, phaseID *string) int
		PrizingInfo            func(childComplexity int) int
		Publishing             func(childComplexity int) int
		RulesMarkdown          func(childComplexity int) int
		RulesetID              func(childComplexity int) int
		RulesetSettings        func(childComplexity int) int
		Sets                   func(childComplexity int, page *int, perPage *int, sortType *model.SetSortType, filters *model.SetFilters) int
		Slug                   func(childComplexity int) int
		Standings              func(childComplexity int, query model.StandingPaginationQuery) int
		StartAt                func(childComplexity int) int
		State                  func(childComplexity int) int
		Stations               func(childComplexity int, query *model.StationFilter) int
		TeamManagementDeadline func(childComplexity int) int
		TeamNameAllowed        func(childComplexity int) int
		Tournament             func(childComplexity int) int
		Type                   func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		UseEventSeeds          func(childComplexity int) int
		Videogame              func(childComplexity int) int
		Waves                  func(childComplexity int, phaseID *string) int
	}

	EventConnection struct {
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	EventOwner struct {
		Email    func(childComplexity int) int
		EventID  func(childComplexity int) int
		FullName func(childComplexity int) int
		GamerTag func(childComplexity int) int
	}

	EventOwnerConnection struct {
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	Game struct {
		ID         func(childComplexity int) int
		Images     func(childComplexity int, typeArg *string) int
		OrderNum   func(childComplexity int) int
		Selections func(childComplexity int) int
		Stage      func(childComplexity int) int
		State      func(childComplexity int) int
		WinnerID   func(childComplexity int) int
	}

	GameSelection struct {
		Entrant        func(childComplexity int) int
		ID             func(childComplexity int) int
		OrderNum       func(childComplexity int) int
		Participant    func(childComplexity int) int
		SelectionType  func(childComplexity int) int
		SelectionValue func(childComplexity int) int
	}

	Image struct {
		Height func(childComplexity int) int
		ID     func(childComplexity int) int
		Ratio  func(childComplexity int) int
		Type   func(childComplexity int) int
		URL    func(childComplexity int) int
		Width  func(childComplexity int) int
	}

	League struct {
		AddrState                  func(childComplexity int) int
		City                       func(childComplexity int) int
		CountryCode                func(childComplexity int) int
		CreatedAt                  func(childComplexity int) int
		Currency                   func(childComplexity int) int
		EndAt                      func(childComplexity int) int
		EntrantCount               func(childComplexity int) int
		EventOwners                func(childComplexity int, query *model.EventOwnersQuery) int
		EventRegistrationClosesAt  func(childComplexity int) int
		Events                     func(childComplexity int, query *model.LeagueEventsQuery) int
		FinalEventID               func(childComplexity int) int
		HasOfflineEvents           func(childComplexity int) int
		HasOnlineEvents            func(childComplexity int) int
		Hashtag                    func(childComplexity int) int
		ID                         func(childComplexity int) int
		Images                     func(childComplexity int, typeArg *string) int
		IsOnline                   func(childComplexity int) int
		Lat                        func(childComplexity int) int
		Links                      func(childComplexity int) int
		Lng                        func(childComplexity int) int
		MapsPlaceID                func(childComplexity int) int
		Name                       func(childComplexity int) int
		NumProgressingToFinalEvent func(childComplexity int) int
		NumUniquePlayers           func(childComplexity int) int
		PostalCode                 func(childComplexity int) int
		PrimaryContact             func(childComplexity int) int
		PrimaryContactType         func(childComplexity int) int
		Publishing                 func(childComplexity int) int
		RegistrationClosesAt       func(childComplexity int) int
		Rules                      func(childComplexity int) int
		ShortSlug                  func(childComplexity int) int
		ShowStandings              func(childComplexity int) int
		Slug                       func(childComplexity int) int
		Standings                  func(childComplexity int, query *model.StandingGroupStandingPageFilter) int
		StartAt                    func(childComplexity int) int
		State                      func(childComplexity int) int
		TeamCreationClosesAt       func(childComplexity int) int
		Timezone                   func(childComplexity int) int
		TournamentType             func(childComplexity int) int
		URL                        func(childComplexity int, tab *string, relative *bool) int
		UpdatedAt                  func(childComplexity int) int
		VenueAddress               func(childComplexity int) int
		VenueName                  func(childComplexity int) int
		Videogames                 func(childComplexity int) int
	}

	LeagueConnection struct {
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	Mutation struct {
		DeletePhase              func(childComplexity int, phaseID string) int
		DeleteStation            func(childComplexity int, stationID string) int
		DeleteWave               func(childComplexity int, waveID string) int
		ResolveScheduleConflicts func(childComplexity int, tournamentID string, options *model.ResolveConflictsOptions) int
		SwapSeeds                func(childComplexity int, phaseID string, seed1id string, seed2id string) int
		UpdatePhaseGroups        func(childComplexity int, groupConfigs []*model.PhaseGroupUpdateInput) int
		UpdatePhaseSeeding       func(childComplexity int, phaseID string, seedMapping []*model.UpdatePhaseSeedInfo, options *model.UpdatePhaseSeedingOptions) int
		UpsertPhase              func(childComplexity int, phaseID *string, eventID *string, payload model.PhaseUpsertInput) int
		UpsertStation            func(childComplexity int, stationID *string, tournamentID *string, fields model.StationUpsertInput) int
		UpsertWave               func(childComplexity int, waveID *string, tournamentID *string, fields model.WaveUpsertInput) int
	}

	PageInfo struct {
		Filter     func(childComplexity int) int
		Page       func(childComplexity int) int
		PerPage    func(childComplexity int) int
		SortBy     func(childComplexity int) int
		Total      func(childComplexity int) int
		TotalPages func(childComplexity int) int
	}

	Participant struct {
		CheckedIn         func(childComplexity int) int
		CheckedInAt       func(childComplexity int) int
		ConnectedAccounts func(childComplexity int) int
		ContactInfo       func(childComplexity int) int
		Email             func(childComplexity int) int
		Entrants          func(childComplexity int) int
		Events            func(childComplexity int) int
		GamerTag          func(childComplexity int) int
		ID                func(childComplexity int) int
		Images            func(childComplexity int, typeArg *string) int
		Player            func(childComplexity int) int
		Prefix            func(childComplexity int) int
		User              func(childComplexity int) int
		Verified          func(childComplexity int) int
	}

	ParticipantConnection struct {
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	Phase struct {
		BracketType    func(childComplexity int) int
		Event          func(childComplexity int) int
		GroupCount     func(childComplexity int) int
		ID             func(childComplexity int) int
		IsExhibition   func(childComplexity int) int
		Name           func(childComplexity int) int
		NumSeeds       func(childComplexity int) int
		PaginatedSeeds func(childComplexity int, query model.SeedPaginationQuery, eventID *string) int
		PhaseGroups    func(childComplexity int, query *model.PhaseGroupPageQuery) int
		PhaseOrder     func(childComplexity int) int
		Seeds          func(childComplexity int, query model.SeedPaginationQuery, eventID *string) int
		Sets           func(childComplexity int, page *int, perPage *int, sortType *model.SetSortType, filters *model.SetFilters) int
		State          func(childComplexity int) int
		Waves          func(childComplexity int) int
	}

	PhaseGroup struct {
		BracketType       func(childComplexity int) int
		DisplayIdentifier func(childComplexity int) int
		FirstRoundTime    func(childComplexity int) int
		ID                func(childComplexity int) int
		NumRounds         func(childComplexity int) int
		PaginatedSeeds    func(childComplexity int, query model.SeedPaginationQuery, eventID *string) int
		PaginatedSets     func(childComplexity int, page *int, perPage *int, sortType *model.SetSortType, filters *model.SetFilters) int
		Phase             func(childComplexity int) int
		ProgressionsOut   func(childComplexity int) int
		Rounds            func(childComplexity int) int
		SeedMap           func(childComplexity int) int
		Seeds             func(childComplexity int, query model.SeedPaginationQuery, eventID *string) int
		Sets              func(childComplexity int, page *int, perPage *int, sortType *model.SetSortType, filters *model.SetFilters) int
		Standings         func(childComplexity int, query *model.StandingGroupStandingPageFilter) int
		StartAt           func(childComplexity int) int
		State             func(childComplexity int) int
		TiebreakOrder     func(childComplexity int) int
		Wave              func(childComplexity int) int
	}

	PhaseGroupConnection struct {
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	Player struct {
		GamerTag   func(childComplexity int) int
		ID         func(childComplexity int) int
		Prefix     func(childComplexity int) int
		Rankings   func(childComplexity int, limit *int, videogameID *string) int
		RecentSets func(childComplexity int, opponentID *string) int
		Sets       func(childComplexity int, page *int, perPage *int, filters *model.SetFilters) int
		User       func(childComplexity int) int
	}

	PlayerRank struct {
		ID    func(childComplexity int) int
		Rank  func(childComplexity int) int
		Title func(childComplexity int) int
	}

	ProfileAuthorization struct {
		ExternalUsername func(childComplexity int) int
		ID               func(childComplexity int) int
		Stream           func(childComplexity int) int
		Type             func(childComplexity int) int
		URL              func(childComplexity int) int
	}

	Progression struct {
		ID               func(childComplexity int) int
		OriginOrder      func(childComplexity int) int
		OriginPhase      func(childComplexity int) int
		OriginPhaseGroup func(childComplexity int) int
		OriginPlacement  func(childComplexity int) int
	}

	Query struct {
		CurrentUser func(childComplexity int) int
		Event       func(childComplexity int, id *string, slug *string) int
		League      func(childComplexity int, id *string, slug *string) int
		Participant func(childComplexity int, id string, isAdmin *bool) int
		Phase       func(childComplexity int, id *string) int
		PhaseGroup  func(childComplexity int, id *string) int
		Player      func(childComplexity int, id string) int
		Seed        func(childComplexity int, id *string) int
		Set         func(childComplexity int, id string) int
		Shop        func(childComplexity int, id *string, slug *string) int
		Stream      func(childComplexity int, id string) int
		StreamQueue func(childComplexity int, tournamentID string, includePlayerStreams *bool) int
		Tournament  func(childComplexity int, id *string, slug *string) int
		Tournaments func(childComplexity int, query model.TournamentQuery) int
		User        func(childComplexity int, id *string, slug *string) int
		Videogame   func(childComplexity int, id *string) int
		Videogames  func(childComplexity int, query model.VideogameQuery) int
	}

	RaceBracketConfig struct {
		AutomaticEndTime     func(childComplexity int) int
		AutomaticStartTime   func(childComplexity int) int
		BracketType          func(childComplexity int) int
		GoalTargetComparator func(childComplexity int) int
		GoalTargetValue      func(childComplexity int) int
		ID                   func(childComplexity int) int
		LimitMode            func(childComplexity int) int
		LimitValue           func(childComplexity int) int
		RaceType             func(childComplexity int) int
	}

	RaceMatchConfig struct {
		BracketType            func(childComplexity int) int
		ID                     func(childComplexity int) int
		PlayerReportingEnabled func(childComplexity int) int
		VerificationMethods    func(childComplexity int) int
		VerificationRequired   func(childComplexity int) int
	}

	Round struct {
		BestOf  func(childComplexity int) int
		ID      func(childComplexity int) int
		Number  func(childComplexity int) int
		StartAt func(childComplexity int) int
	}

	Score struct {
		DisplayValue func(childComplexity int) int
		Label        func(childComplexity int) int
		Value        func(childComplexity int) int
	}

	Seed struct {
		CheckedInParticipants func(childComplexity int) int
		Entrant               func(childComplexity int) int
		GroupSeedNum          func(childComplexity int) int
		ID                    func(childComplexity int) int
		IsBye                 func(childComplexity int) int
		Phase                 func(childComplexity int) int
		PhaseGroup            func(childComplexity int) int
		PlaceholderName       func(childComplexity int) int
		Placement             func(childComplexity int) int
		Players               func(childComplexity int) int
		ProgressionSeedID     func(childComplexity int) int
		ProgressionSource     func(childComplexity int) int
		SeedNum               func(childComplexity int) int
		SetRecordWithoutByes  func(childComplexity int, phaseGroupID string) int
		Standings             func(childComplexity int, containerType *string) int
	}

	SeedConnection struct {
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	Set struct {
		CompletedAt    func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		DisplayScore   func(childComplexity int, mainEntrantID *string) int
		Event          func(childComplexity int) int
		FullRoundText  func(childComplexity int) int
		Game           func(childComplexity int, orderNum int) int
		Games          func(childComplexity int) int
		HasPlaceholder func(childComplexity int) int
		ID             func(childComplexity int) int
		Identifier     func(childComplexity int) int
		Images         func(childComplexity int, typeArg *string) int
		LPlacement     func(childComplexity int) int
		PhaseGroup     func(childComplexity int) int
		Round          func(childComplexity int) int
		SetGamesType   func(childComplexity int) int
		Slots          func(childComplexity int, includeByes *bool) int
		StartedAt      func(childComplexity int) int
		State          func(childComplexity int) int
		Station        func(childComplexity int) int
		Stream         func(childComplexity int) int
		TotalGames     func(childComplexity int) int
		VodURL         func(childComplexity int) int
		WPlacement     func(childComplexity int) int
		WinnerID       func(childComplexity int) int
	}

	SetConnection struct {
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	SetSlot struct {
		Entrant         func(childComplexity int) int
		ID              func(childComplexity int) int
		PrereqID        func(childComplexity int) int
		PrereqPlacement func(childComplexity int) int
		PrereqType      func(childComplexity int) int
		Seed            func(childComplexity int) int
		SlotIndex       func(childComplexity int) int
		Standing        func(childComplexity int) int
	}

	Shop struct {
		ID       func(childComplexity int) int
		Levels   func(childComplexity int, query *model.ShopLevelsQuery) int
		Messages func(childComplexity int, query *model.ShopOrderMessagesQuery) int
		Name     func(childComplexity int) int
		Slug     func(childComplexity int) int
		URL      func(childComplexity int) int
	}

	ShopLevel struct {
		CurrAmount  func(childComplexity int) int
		Description func(childComplexity int) int
		GoalAmount  func(childComplexity int) int
		ID          func(childComplexity int) int
		Images      func(childComplexity int, typeArg *string) int
		Name        func(childComplexity int) int
	}

	ShopLevelConnection struct {
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ShopOrderMessage struct {
		Gamertag func(childComplexity int) int
		ID       func(childComplexity int) int
		Message  func(childComplexity int) int
		Name     func(childComplexity int) int
		Player   func(childComplexity int) int
		Total    func(childComplexity int) int
	}

	ShopOrderMessageConnection struct {
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	Stage struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	Standing struct {
		Container func(childComplexity int) int
		Entrant   func(childComplexity int) int
		ID        func(childComplexity int) int
		IsFinal   func(childComplexity int) int
		Metadata  func(childComplexity int) int
		Placement func(childComplexity int) int
		Player    func(childComplexity int) int
		Standing  func(childComplexity int) int
		Stats     func(childComplexity int) int
	}

	StandingConnection struct {
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	StandingStats struct {
		Score func(childComplexity int) int
	}

	Stations struct {
		CanAutoAssign func(childComplexity int) int
		ClusterNumber func(childComplexity int) int
		ClusterPrefix func(childComplexity int) int
		Enabled       func(childComplexity int) int
		ID            func(childComplexity int) int
		Identifier    func(childComplexity int) int
		NumSetups     func(childComplexity int) int
		Number        func(childComplexity int) int
		Prefix        func(childComplexity int) int
		Queue         func(childComplexity int) int
		QueueDepth    func(childComplexity int) int
		State         func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	StationsConnection struct {
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	Stream struct {
		ID       func(childComplexity int) int
		IsOnline func(childComplexity int) int
		Name     func(childComplexity int) int
		Type     func(childComplexity int) int
	}

	StreamQueue struct {
		ID     func(childComplexity int) int
		Sets   func(childComplexity int) int
		Stream func(childComplexity int) int
	}

	Streams struct {
		Enabled        func(childComplexity int) int
		FollowerCount  func(childComplexity int) int
		ID             func(childComplexity int) int
		IsOnline       func(childComplexity int) int
		NumSetups      func(childComplexity int) int
		ParentStreamID func(childComplexity int) int
		StreamGame     func(childComplexity int) int
		StreamID       func(childComplexity int) int
		StreamLogo     func(childComplexity int) int
		StreamName     func(childComplexity int) int
		StreamSource   func(childComplexity int) int
		StreamStatus   func(childComplexity int) int
		StreamType     func(childComplexity int) int
		StreamTypeID   func(childComplexity int) int
	}

	Team struct {
		Entrant func(childComplexity int) int
		Event   func(childComplexity int) int
		ID      func(childComplexity int) int
		Name    func(childComplexity int) int
	}

	TeamConnection struct {
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	Tournament struct {
		AddrState                 func(childComplexity int) int
		Admins                    func(childComplexity int, roles []*string) int
		City                      func(childComplexity int) int
		CountryCode               func(childComplexity int) int
		CreatedAt                 func(childComplexity int) int
		Currency                  func(childComplexity int) int
		EndAt                     func(childComplexity int) int
		EventRegistrationClosesAt func(childComplexity int) int
		Events                    func(childComplexity int, limit *int) int
		HasOfflineEvents          func(childComplexity int) int
		HasOnlineEvents           func(childComplexity int) int
		Hashtag                   func(childComplexity int) int
		ID                        func(childComplexity int) int
		Images                    func(childComplexity int, typeArg *string) int
		IsOnline                  func(childComplexity int) int
		IsRegistrationOpen        func(childComplexity int) int
		Lat                       func(childComplexity int) int
		Links                     func(childComplexity int) int
		Lng                       func(childComplexity int) int
		MapsPlaceID               func(childComplexity int) int
		Name                      func(childComplexity int) int
		NumAttendees              func(childComplexity int) int
		Owner                     func(childComplexity int) int
		Participants              func(childComplexity int, query model.ParticipantPaginationQuery, isAdmin *bool) int
		PostalCode                func(childComplexity int) int
		PrimaryContact            func(childComplexity int) int
		PrimaryContactType        func(childComplexity int) int
		Publishing                func(childComplexity int) int
		RegistrationClosesAt      func(childComplexity int) int
		Rules                     func(childComplexity int) int
		ShortSlug                 func(childComplexity int) int
		Slug                      func(childComplexity int) int
		StartAt                   func(childComplexity int) int
		State                     func(childComplexity int) int
		Stations                  func(childComplexity int, page *int, perPage *int) int
		StreamQueue               func(childComplexity int) int
		Streams                   func(childComplexity int) int
		TeamCreationClosesAt      func(childComplexity int) int
		Teams                     func(childComplexity int, query model.TeamsPaginationQuery) int
		Timezone                  func(childComplexity int) int
		TournamentType            func(childComplexity int) int
		URL                       func(childComplexity int, tab *string, relative *bool) int
		UpdatedAt                 func(childComplexity int) int
		VenueAddress              func(childComplexity int) int
		VenueName                 func(childComplexity int) int
		Waves                     func(childComplexity int) int
	}

	TournamentConnection struct {
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	TournamentLinks struct {
		Discord  func(childComplexity int) int
		Facebook func(childComplexity int) int
	}

	User struct {
		Authorizations func(childComplexity int, types []*model.SocialConnectionType) int
		Bio            func(childComplexity int) int
		Birthday       func(childComplexity int) int
		Events         func(childComplexity int, query *model.UserEventsPaginationQuery) int
		GenderPronoun  func(childComplexity int) int
		ID             func(childComplexity int) int
		Images         func(childComplexity int, typeArg *string) int
		Leagues        func(childComplexity int, query *model.UserLeaguesPaginationQuery) int
		Location       func(childComplexity int) int
		Name           func(childComplexity int) int
		Player         func(childComplexity int) int
		Slug           func(childComplexity int) int
		Tournaments    func(childComplexity int, query *model.UserTournamentsPaginationQuery) int
	}

	Videogame struct {
		DisplayName func(childComplexity int) int
		ID          func(childComplexity int) int
		Images      func(childComplexity int, typeArg *string) int
		Name        func(childComplexity int) int
		Slug        func(childComplexity int) int
	}

	VideogameConnection struct {
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	Wave struct {
		ID         func(childComplexity int) int
		Identifier func(childComplexity int) int
		StartAt    func(childComplexity int) int
	}
}

type MutationResolver interface {
	DeletePhase(ctx context.Context, phaseID string) (*bool, error)
	DeleteStation(ctx context.Context, stationID string) (*bool, error)
	DeleteWave(ctx context.Context, waveID string) (*bool, error)
	ResolveScheduleConflicts(ctx context.Context, tournamentID string, options *model.ResolveConflictsOptions) ([]*model.Seed, error)
	SwapSeeds(ctx context.Context, phaseID string, seed1id string, seed2id string) ([]*model.Seed, error)
	UpdatePhaseGroups(ctx context.Context, groupConfigs []*model.PhaseGroupUpdateInput) ([]*model.PhaseGroup, error)
	UpdatePhaseSeeding(ctx context.Context, phaseID string, seedMapping []*model.UpdatePhaseSeedInfo, options *model.UpdatePhaseSeedingOptions) (*model.Phase, error)
	UpsertPhase(ctx context.Context, phaseID *string, eventID *string, payload model.PhaseUpsertInput) (*model.Phase, error)
	UpsertStation(ctx context.Context, stationID *string, tournamentID *string, fields model.StationUpsertInput) (*model.Stations, error)
	UpsertWave(ctx context.Context, waveID *string, tournamentID *string, fields model.WaveUpsertInput) (*model.Wave, error)
}
type QueryResolver interface {
	CurrentUser(ctx context.Context) (*model.User, error)
	Event(ctx context.Context, id *string, slug *string) (*model.Event, error)
	League(ctx context.Context, id *string, slug *string) (*model.League, error)
	Participant(ctx context.Context, id string, isAdmin *bool) (*model.Participant, error)
	Phase(ctx context.Context, id *string) (*model.Phase, error)
	PhaseGroup(ctx context.Context, id *string) (*model.PhaseGroup, error)
	Player(ctx context.Context, id string) (*model.Player, error)
	Seed(ctx context.Context, id *string) (*model.Seed, error)
	Set(ctx context.Context, id string) (*model.Set, error)
	Shop(ctx context.Context, id *string, slug *string) (*model.Shop, error)
	Stream(ctx context.Context, id string) (*model.Streams, error)
	StreamQueue(ctx context.Context, tournamentID string, includePlayerStreams *bool) ([]*model.StreamQueue, error)
	Tournament(ctx context.Context, id *string, slug *string) (*model.Tournament, error)
	Tournaments(ctx context.Context, query model.TournamentQuery) (*model.TournamentConnection, error)
	User(ctx context.Context, id *string, slug *string) (*model.User, error)
	Videogame(ctx context.Context, id *string) (*model.Videogame, error)
	Videogames(ctx context.Context, query model.VideogameQuery) (*model.VideogameConnection, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Address.city":
		if e.complexity.Address.City == nil {
			break
		}

		return e.complexity.Address.City(childComplexity), true

	case "Address.country":
		if e.complexity.Address.Country == nil {
			break
		}

		return e.complexity.Address.Country(childComplexity), true

	case "Address.countryId":
		if e.complexity.Address.CountryID == nil {
			break
		}

		return e.complexity.Address.CountryID(childComplexity), true

	case "Address.id":
		if e.complexity.Address.ID == nil {
			break
		}

		return e.complexity.Address.ID(childComplexity), true

	case "Address.state":
		if e.complexity.Address.State == nil {
			break
		}

		return e.complexity.Address.State(childComplexity), true

	case "Address.stateId":
		if e.complexity.Address.StateID == nil {
			break
		}

		return e.complexity.Address.StateID(childComplexity), true

	case "ContactInfo.city":
		if e.complexity.ContactInfo.City == nil {
			break
		}

		return e.complexity.ContactInfo.City(childComplexity), true

	case "ContactInfo.country":
		if e.complexity.ContactInfo.Country == nil {
			break
		}

		return e.complexity.ContactInfo.Country(childComplexity), true

	case "ContactInfo.countryId":
		if e.complexity.ContactInfo.CountryID == nil {
			break
		}

		return e.complexity.ContactInfo.CountryID(childComplexity), true

	case "ContactInfo.id":
		if e.complexity.ContactInfo.ID == nil {
			break
		}

		return e.complexity.ContactInfo.ID(childComplexity), true

	case "ContactInfo.name":
		if e.complexity.ContactInfo.Name == nil {
			break
		}

		return e.complexity.ContactInfo.Name(childComplexity), true

	case "ContactInfo.nameFirst":
		if e.complexity.ContactInfo.NameFirst == nil {
			break
		}

		return e.complexity.ContactInfo.NameFirst(childComplexity), true

	case "ContactInfo.nameLast":
		if e.complexity.ContactInfo.NameLast == nil {
			break
		}

		return e.complexity.ContactInfo.NameLast(childComplexity), true

	case "ContactInfo.state":
		if e.complexity.ContactInfo.State == nil {
			break
		}

		return e.complexity.ContactInfo.State(childComplexity), true

	case "ContactInfo.stateId":
		if e.complexity.ContactInfo.StateID == nil {
			break
		}

		return e.complexity.ContactInfo.StateID(childComplexity), true

	case "ContactInfo.zipcode":
		if e.complexity.ContactInfo.Zipcode == nil {
			break
		}

		return e.complexity.ContactInfo.Zipcode(childComplexity), true

	case "Entrant.event":
		if e.complexity.Entrant.Event == nil {
			break
		}

		return e.complexity.Entrant.Event(childComplexity), true

	case "Entrant.id":
		if e.complexity.Entrant.ID == nil {
			break
		}

		return e.complexity.Entrant.ID(childComplexity), true

	case "Entrant.isDisqualified":
		if e.complexity.Entrant.IsDisqualified == nil {
			break
		}

		return e.complexity.Entrant.IsDisqualified(childComplexity), true

	case "Entrant.name":
		if e.complexity.Entrant.Name == nil {
			break
		}

		return e.complexity.Entrant.Name(childComplexity), true

	case "Entrant.participants":
		if e.complexity.Entrant.Participants == nil {
			break
		}

		return e.complexity.Entrant.Participants(childComplexity), true

	case "Entrant.seeds":
		if e.complexity.Entrant.Seeds == nil {
			break
		}

		return e.complexity.Entrant.Seeds(childComplexity), true

	case "Entrant.skill":
		if e.complexity.Entrant.Skill == nil {
			break
		}

		return e.complexity.Entrant.Skill(childComplexity), true

	case "Entrant.standing":
		if e.complexity.Entrant.Standing == nil {
			break
		}

		return e.complexity.Entrant.Standing(childComplexity), true

	case "Entrant.stream":
		if e.complexity.Entrant.Stream == nil {
			break
		}

		return e.complexity.Entrant.Stream(childComplexity), true

	case "Entrant.streams":
		if e.complexity.Entrant.Streams == nil {
			break
		}

		return e.complexity.Entrant.Streams(childComplexity), true

	case "EntrantConnection.nodes":
		if e.complexity.EntrantConnection.Nodes == nil {
			break
		}

		return e.complexity.EntrantConnection.Nodes(childComplexity), true

	case "EntrantConnection.pageInfo":
		if e.complexity.EntrantConnection.PageInfo == nil {
			break
		}

		return e.complexity.EntrantConnection.PageInfo(childComplexity), true

	case "Event.checkInBuffer":
		if e.complexity.Event.CheckInBuffer == nil {
			break
		}

		return e.complexity.Event.CheckInBuffer(childComplexity), true

	case "Event.checkInDuration":
		if e.complexity.Event.CheckInDuration == nil {
			break
		}

		return e.complexity.Event.CheckInDuration(childComplexity), true

	case "Event.checkInEnabled":
		if e.complexity.Event.CheckInEnabled == nil {
			break
		}

		return e.complexity.Event.CheckInEnabled(childComplexity), true

	case "Event.createdAt":
		if e.complexity.Event.CreatedAt == nil {
			break
		}

		return e.complexity.Event.CreatedAt(childComplexity), true

	case "Event.deckSubmissionDeadline":
		if e.complexity.Event.DeckSubmissionDeadline == nil {
			break
		}

		return e.complexity.Event.DeckSubmissionDeadline(childComplexity), true

	case "Event.entrantSizeMax":
		if e.complexity.Event.EntrantSizeMax == nil {
			break
		}

		return e.complexity.Event.EntrantSizeMax(childComplexity), true

	case "Event.entrantSizeMin":
		if e.complexity.Event.EntrantSizeMin == nil {
			break
		}

		return e.complexity.Event.EntrantSizeMin(childComplexity), true

	case "Event.entrants":
		if e.complexity.Event.Entrants == nil {
			break
		}

		args, err := ec.field_Event_entrants_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Event.Entrants(childComplexity, args["query"].(*model.EventEntrantPageQuery)), true

	case "Event.hasDecks":
		if e.complexity.Event.HasDecks == nil {
			break
		}

		return e.complexity.Event.HasDecks(childComplexity), true

	case "Event.hasTasks":
		if e.complexity.Event.HasTasks == nil {
			break
		}

		return e.complexity.Event.HasTasks(childComplexity), true

	case "Event.id":
		if e.complexity.Event.ID == nil {
			break
		}

		return e.complexity.Event.ID(childComplexity), true

	case "Event.images":
		if e.complexity.Event.Images == nil {
			break
		}

		args, err := ec.field_Event_images_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Event.Images(childComplexity, args["type"].(*string)), true

	case "Event.isOnline":
		if e.complexity.Event.IsOnline == nil {
			break
		}

		return e.complexity.Event.IsOnline(childComplexity), true

	case "Event.matchRulesMarkdown":
		if e.complexity.Event.MatchRulesMarkdown == nil {
			break
		}

		return e.complexity.Event.MatchRulesMarkdown(childComplexity), true

	case "Event.name":
		if e.complexity.Event.Name == nil {
			break
		}

		return e.complexity.Event.Name(childComplexity), true

	case "Event.numEntrants":
		if e.complexity.Event.NumEntrants == nil {
			break
		}

		return e.complexity.Event.NumEntrants(childComplexity), true

	case "Event.phaseGroups":
		if e.complexity.Event.PhaseGroups == nil {
			break
		}

		return e.complexity.Event.PhaseGroups(childComplexity), true

	case "Event.phases":
		if e.complexity.Event.Phases == nil {
			break
		}

		args, err := ec.field_Event_phases_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Event.Phases(childComplexity, args["state"].(*model.ActivityState), args["phaseId"].(*string)), true

	case "Event.prizingInfo":
		if e.complexity.Event.PrizingInfo == nil {
			break
		}

		return e.complexity.Event.PrizingInfo(childComplexity), true

	case "Event.publishing":
		if e.complexity.Event.Publishing == nil {
			break
		}

		return e.complexity.Event.Publishing(childComplexity), true

	case "Event.rulesMarkdown":
		if e.complexity.Event.RulesMarkdown == nil {
			break
		}

		return e.complexity.Event.RulesMarkdown(childComplexity), true

	case "Event.rulesetId":
		if e.complexity.Event.RulesetID == nil {
			break
		}

		return e.complexity.Event.RulesetID(childComplexity), true

	case "Event.rulesetSettings":
		if e.complexity.Event.RulesetSettings == nil {
			break
		}

		return e.complexity.Event.RulesetSettings(childComplexity), true

	case "Event.sets":
		if e.complexity.Event.Sets == nil {
			break
		}

		args, err := ec.field_Event_sets_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Event.Sets(childComplexity, args["page"].(*int), args["perPage"].(*int), args["sortType"].(*model.SetSortType), args["filters"].(*model.SetFilters)), true

	case "Event.slug":
		if e.complexity.Event.Slug == nil {
			break
		}

		return e.complexity.Event.Slug(childComplexity), true

	case "Event.standings":
		if e.complexity.Event.Standings == nil {
			break
		}

		args, err := ec.field_Event_standings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Event.Standings(childComplexity, args["query"].(model.StandingPaginationQuery)), true

	case "Event.startAt":
		if e.complexity.Event.StartAt == nil {
			break
		}

		return e.complexity.Event.StartAt(childComplexity), true

	case "Event.state":
		if e.complexity.Event.State == nil {
			break
		}

		return e.complexity.Event.State(childComplexity), true

	case "Event.stations":
		if e.complexity.Event.Stations == nil {
			break
		}

		args, err := ec.field_Event_stations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Event.Stations(childComplexity, args["query"].(*model.StationFilter)), true

	case "Event.teamManagementDeadline":
		if e.complexity.Event.TeamManagementDeadline == nil {
			break
		}

		return e.complexity.Event.TeamManagementDeadline(childComplexity), true

	case "Event.teamNameAllowed":
		if e.complexity.Event.TeamNameAllowed == nil {
			break
		}

		return e.complexity.Event.TeamNameAllowed(childComplexity), true

	case "Event.tournament":
		if e.complexity.Event.Tournament == nil {
			break
		}

		return e.complexity.Event.Tournament(childComplexity), true

	case "Event.type":
		if e.complexity.Event.Type == nil {
			break
		}

		return e.complexity.Event.Type(childComplexity), true

	case "Event.updatedAt":
		if e.complexity.Event.UpdatedAt == nil {
			break
		}

		return e.complexity.Event.UpdatedAt(childComplexity), true

	case "Event.useEventSeeds":
		if e.complexity.Event.UseEventSeeds == nil {
			break
		}

		return e.complexity.Event.UseEventSeeds(childComplexity), true

	case "Event.videogame":
		if e.complexity.Event.Videogame == nil {
			break
		}

		return e.complexity.Event.Videogame(childComplexity), true

	case "Event.waves":
		if e.complexity.Event.Waves == nil {
			break
		}

		args, err := ec.field_Event_waves_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Event.Waves(childComplexity, args["phaseId"].(*string)), true

	case "EventConnection.nodes":
		if e.complexity.EventConnection.Nodes == nil {
			break
		}

		return e.complexity.EventConnection.Nodes(childComplexity), true

	case "EventConnection.pageInfo":
		if e.complexity.EventConnection.PageInfo == nil {
			break
		}

		return e.complexity.EventConnection.PageInfo(childComplexity), true

	case "EventOwner.email":
		if e.complexity.EventOwner.Email == nil {
			break
		}

		return e.complexity.EventOwner.Email(childComplexity), true

	case "EventOwner.eventId":
		if e.complexity.EventOwner.EventID == nil {
			break
		}

		return e.complexity.EventOwner.EventID(childComplexity), true

	case "EventOwner.fullName":
		if e.complexity.EventOwner.FullName == nil {
			break
		}

		return e.complexity.EventOwner.FullName(childComplexity), true

	case "EventOwner.gamerTag":
		if e.complexity.EventOwner.GamerTag == nil {
			break
		}

		return e.complexity.EventOwner.GamerTag(childComplexity), true

	case "EventOwnerConnection.nodes":
		if e.complexity.EventOwnerConnection.Nodes == nil {
			break
		}

		return e.complexity.EventOwnerConnection.Nodes(childComplexity), true

	case "EventOwnerConnection.pageInfo":
		if e.complexity.EventOwnerConnection.PageInfo == nil {
			break
		}

		return e.complexity.EventOwnerConnection.PageInfo(childComplexity), true

	case "Game.id":
		if e.complexity.Game.ID == nil {
			break
		}

		return e.complexity.Game.ID(childComplexity), true

	case "Game.images":
		if e.complexity.Game.Images == nil {
			break
		}

		args, err := ec.field_Game_images_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Game.Images(childComplexity, args["type"].(*string)), true

	case "Game.orderNum":
		if e.complexity.Game.OrderNum == nil {
			break
		}

		return e.complexity.Game.OrderNum(childComplexity), true

	case "Game.selections":
		if e.complexity.Game.Selections == nil {
			break
		}

		return e.complexity.Game.Selections(childComplexity), true

	case "Game.stage":
		if e.complexity.Game.Stage == nil {
			break
		}

		return e.complexity.Game.Stage(childComplexity), true

	case "Game.state":
		if e.complexity.Game.State == nil {
			break
		}

		return e.complexity.Game.State(childComplexity), true

	case "Game.winnerId":
		if e.complexity.Game.WinnerID == nil {
			break
		}

		return e.complexity.Game.WinnerID(childComplexity), true

	case "GameSelection.entrant":
		if e.complexity.GameSelection.Entrant == nil {
			break
		}

		return e.complexity.GameSelection.Entrant(childComplexity), true

	case "GameSelection.id":
		if e.complexity.GameSelection.ID == nil {
			break
		}

		return e.complexity.GameSelection.ID(childComplexity), true

	case "GameSelection.orderNum":
		if e.complexity.GameSelection.OrderNum == nil {
			break
		}

		return e.complexity.GameSelection.OrderNum(childComplexity), true

	case "GameSelection.participant":
		if e.complexity.GameSelection.Participant == nil {
			break
		}

		return e.complexity.GameSelection.Participant(childComplexity), true

	case "GameSelection.selectionType":
		if e.complexity.GameSelection.SelectionType == nil {
			break
		}

		return e.complexity.GameSelection.SelectionType(childComplexity), true

	case "GameSelection.selectionValue":
		if e.complexity.GameSelection.SelectionValue == nil {
			break
		}

		return e.complexity.GameSelection.SelectionValue(childComplexity), true

	case "Image.height":
		if e.complexity.Image.Height == nil {
			break
		}

		return e.complexity.Image.Height(childComplexity), true

	case "Image.id":
		if e.complexity.Image.ID == nil {
			break
		}

		return e.complexity.Image.ID(childComplexity), true

	case "Image.ratio":
		if e.complexity.Image.Ratio == nil {
			break
		}

		return e.complexity.Image.Ratio(childComplexity), true

	case "Image.type":
		if e.complexity.Image.Type == nil {
			break
		}

		return e.complexity.Image.Type(childComplexity), true

	case "Image.url":
		if e.complexity.Image.URL == nil {
			break
		}

		return e.complexity.Image.URL(childComplexity), true

	case "Image.width":
		if e.complexity.Image.Width == nil {
			break
		}

		return e.complexity.Image.Width(childComplexity), true

	case "League.addrState":
		if e.complexity.League.AddrState == nil {
			break
		}

		return e.complexity.League.AddrState(childComplexity), true

	case "League.city":
		if e.complexity.League.City == nil {
			break
		}

		return e.complexity.League.City(childComplexity), true

	case "League.countryCode":
		if e.complexity.League.CountryCode == nil {
			break
		}

		return e.complexity.League.CountryCode(childComplexity), true

	case "League.createdAt":
		if e.complexity.League.CreatedAt == nil {
			break
		}

		return e.complexity.League.CreatedAt(childComplexity), true

	case "League.currency":
		if e.complexity.League.Currency == nil {
			break
		}

		return e.complexity.League.Currency(childComplexity), true

	case "League.endAt":
		if e.complexity.League.EndAt == nil {
			break
		}

		return e.complexity.League.EndAt(childComplexity), true

	case "League.entrantCount":
		if e.complexity.League.EntrantCount == nil {
			break
		}

		return e.complexity.League.EntrantCount(childComplexity), true

	case "League.eventOwners":
		if e.complexity.League.EventOwners == nil {
			break
		}

		args, err := ec.field_League_eventOwners_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.League.EventOwners(childComplexity, args["query"].(*model.EventOwnersQuery)), true

	case "League.eventRegistrationClosesAt":
		if e.complexity.League.EventRegistrationClosesAt == nil {
			break
		}

		return e.complexity.League.EventRegistrationClosesAt(childComplexity), true

	case "League.events":
		if e.complexity.League.Events == nil {
			break
		}

		args, err := ec.field_League_events_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.League.Events(childComplexity, args["query"].(*model.LeagueEventsQuery)), true

	case "League.finalEventId":
		if e.complexity.League.FinalEventID == nil {
			break
		}

		return e.complexity.League.FinalEventID(childComplexity), true

	case "League.hasOfflineEvents":
		if e.complexity.League.HasOfflineEvents == nil {
			break
		}

		return e.complexity.League.HasOfflineEvents(childComplexity), true

	case "League.hasOnlineEvents":
		if e.complexity.League.HasOnlineEvents == nil {
			break
		}

		return e.complexity.League.HasOnlineEvents(childComplexity), true

	case "League.hashtag":
		if e.complexity.League.Hashtag == nil {
			break
		}

		return e.complexity.League.Hashtag(childComplexity), true

	case "League.id":
		if e.complexity.League.ID == nil {
			break
		}

		return e.complexity.League.ID(childComplexity), true

	case "League.images":
		if e.complexity.League.Images == nil {
			break
		}

		args, err := ec.field_League_images_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.League.Images(childComplexity, args["type"].(*string)), true

	case "League.isOnline":
		if e.complexity.League.IsOnline == nil {
			break
		}

		return e.complexity.League.IsOnline(childComplexity), true

	case "League.lat":
		if e.complexity.League.Lat == nil {
			break
		}

		return e.complexity.League.Lat(childComplexity), true

	case "League.links":
		if e.complexity.League.Links == nil {
			break
		}

		return e.complexity.League.Links(childComplexity), true

	case "League.lng":
		if e.complexity.League.Lng == nil {
			break
		}

		return e.complexity.League.Lng(childComplexity), true

	case "League.mapsPlaceId":
		if e.complexity.League.MapsPlaceID == nil {
			break
		}

		return e.complexity.League.MapsPlaceID(childComplexity), true

	case "League.name":
		if e.complexity.League.Name == nil {
			break
		}

		return e.complexity.League.Name(childComplexity), true

	case "League.numProgressingToFinalEvent":
		if e.complexity.League.NumProgressingToFinalEvent == nil {
			break
		}

		return e.complexity.League.NumProgressingToFinalEvent(childComplexity), true

	case "League.numUniquePlayers":
		if e.complexity.League.NumUniquePlayers == nil {
			break
		}

		return e.complexity.League.NumUniquePlayers(childComplexity), true

	case "League.postalCode":
		if e.complexity.League.PostalCode == nil {
			break
		}

		return e.complexity.League.PostalCode(childComplexity), true

	case "League.primaryContact":
		if e.complexity.League.PrimaryContact == nil {
			break
		}

		return e.complexity.League.PrimaryContact(childComplexity), true

	case "League.primaryContactType":
		if e.complexity.League.PrimaryContactType == nil {
			break
		}

		return e.complexity.League.PrimaryContactType(childComplexity), true

	case "League.publishing":
		if e.complexity.League.Publishing == nil {
			break
		}

		return e.complexity.League.Publishing(childComplexity), true

	case "League.registrationClosesAt":
		if e.complexity.League.RegistrationClosesAt == nil {
			break
		}

		return e.complexity.League.RegistrationClosesAt(childComplexity), true

	case "League.rules":
		if e.complexity.League.Rules == nil {
			break
		}

		return e.complexity.League.Rules(childComplexity), true

	case "League.shortSlug":
		if e.complexity.League.ShortSlug == nil {
			break
		}

		return e.complexity.League.ShortSlug(childComplexity), true

	case "League.showStandings":
		if e.complexity.League.ShowStandings == nil {
			break
		}

		return e.complexity.League.ShowStandings(childComplexity), true

	case "League.slug":
		if e.complexity.League.Slug == nil {
			break
		}

		return e.complexity.League.Slug(childComplexity), true

	case "League.standings":
		if e.complexity.League.Standings == nil {
			break
		}

		args, err := ec.field_League_standings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.League.Standings(childComplexity, args["query"].(*model.StandingGroupStandingPageFilter)), true

	case "League.startAt":
		if e.complexity.League.StartAt == nil {
			break
		}

		return e.complexity.League.StartAt(childComplexity), true

	case "League.state":
		if e.complexity.League.State == nil {
			break
		}

		return e.complexity.League.State(childComplexity), true

	case "League.teamCreationClosesAt":
		if e.complexity.League.TeamCreationClosesAt == nil {
			break
		}

		return e.complexity.League.TeamCreationClosesAt(childComplexity), true

	case "League.timezone":
		if e.complexity.League.Timezone == nil {
			break
		}

		return e.complexity.League.Timezone(childComplexity), true

	case "League.tournamentType":
		if e.complexity.League.TournamentType == nil {
			break
		}

		return e.complexity.League.TournamentType(childComplexity), true

	case "League.url":
		if e.complexity.League.URL == nil {
			break
		}

		args, err := ec.field_League_url_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.League.URL(childComplexity, args["tab"].(*string), args["relative"].(*bool)), true

	case "League.updatedAt":
		if e.complexity.League.UpdatedAt == nil {
			break
		}

		return e.complexity.League.UpdatedAt(childComplexity), true

	case "League.venueAddress":
		if e.complexity.League.VenueAddress == nil {
			break
		}

		return e.complexity.League.VenueAddress(childComplexity), true

	case "League.venueName":
		if e.complexity.League.VenueName == nil {
			break
		}

		return e.complexity.League.VenueName(childComplexity), true

	case "League.videogames":
		if e.complexity.League.Videogames == nil {
			break
		}

		return e.complexity.League.Videogames(childComplexity), true

	case "LeagueConnection.nodes":
		if e.complexity.LeagueConnection.Nodes == nil {
			break
		}

		return e.complexity.LeagueConnection.Nodes(childComplexity), true

	case "LeagueConnection.pageInfo":
		if e.complexity.LeagueConnection.PageInfo == nil {
			break
		}

		return e.complexity.LeagueConnection.PageInfo(childComplexity), true

	case "Mutation.deletePhase":
		if e.complexity.Mutation.DeletePhase == nil {
			break
		}

		args, err := ec.field_Mutation_deletePhase_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePhase(childComplexity, args["phaseId"].(string)), true

	case "Mutation.deleteStation":
		if e.complexity.Mutation.DeleteStation == nil {
			break
		}

		args, err := ec.field_Mutation_deleteStation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteStation(childComplexity, args["stationId"].(string)), true

	case "Mutation.deleteWave":
		if e.complexity.Mutation.DeleteWave == nil {
			break
		}

		args, err := ec.field_Mutation_deleteWave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteWave(childComplexity, args["waveId"].(string)), true

	case "Mutation.resolveScheduleConflicts":
		if e.complexity.Mutation.ResolveScheduleConflicts == nil {
			break
		}

		args, err := ec.field_Mutation_resolveScheduleConflicts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ResolveScheduleConflicts(childComplexity, args["tournamentId"].(string), args["options"].(*model.ResolveConflictsOptions)), true

	case "Mutation.swapSeeds":
		if e.complexity.Mutation.SwapSeeds == nil {
			break
		}

		args, err := ec.field_Mutation_swapSeeds_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SwapSeeds(childComplexity, args["phaseId"].(string), args["seed1Id"].(string), args["seed2Id"].(string)), true

	case "Mutation.updatePhaseGroups":
		if e.complexity.Mutation.UpdatePhaseGroups == nil {
			break
		}

		args, err := ec.field_Mutation_updatePhaseGroups_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePhaseGroups(childComplexity, args["groupConfigs"].([]*model.PhaseGroupUpdateInput)), true

	case "Mutation.updatePhaseSeeding":
		if e.complexity.Mutation.UpdatePhaseSeeding == nil {
			break
		}

		args, err := ec.field_Mutation_updatePhaseSeeding_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePhaseSeeding(childComplexity, args["phaseId"].(string), args["seedMapping"].([]*model.UpdatePhaseSeedInfo), args["options"].(*model.UpdatePhaseSeedingOptions)), true

	case "Mutation.upsertPhase":
		if e.complexity.Mutation.UpsertPhase == nil {
			break
		}

		args, err := ec.field_Mutation_upsertPhase_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpsertPhase(childComplexity, args["phaseId"].(*string), args["eventId"].(*string), args["payload"].(model.PhaseUpsertInput)), true

	case "Mutation.upsertStation":
		if e.complexity.Mutation.UpsertStation == nil {
			break
		}

		args, err := ec.field_Mutation_upsertStation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpsertStation(childComplexity, args["stationId"].(*string), args["tournamentId"].(*string), args["fields"].(model.StationUpsertInput)), true

	case "Mutation.upsertWave":
		if e.complexity.Mutation.UpsertWave == nil {
			break
		}

		args, err := ec.field_Mutation_upsertWave_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpsertWave(childComplexity, args["waveId"].(*string), args["tournamentId"].(*string), args["fields"].(model.WaveUpsertInput)), true

	case "PageInfo.filter":
		if e.complexity.PageInfo.Filter == nil {
			break
		}

		return e.complexity.PageInfo.Filter(childComplexity), true

	case "PageInfo.page":
		if e.complexity.PageInfo.Page == nil {
			break
		}

		return e.complexity.PageInfo.Page(childComplexity), true

	case "PageInfo.perPage":
		if e.complexity.PageInfo.PerPage == nil {
			break
		}

		return e.complexity.PageInfo.PerPage(childComplexity), true

	case "PageInfo.sortBy":
		if e.complexity.PageInfo.SortBy == nil {
			break
		}

		return e.complexity.PageInfo.SortBy(childComplexity), true

	case "PageInfo.total":
		if e.complexity.PageInfo.Total == nil {
			break
		}

		return e.complexity.PageInfo.Total(childComplexity), true

	case "PageInfo.totalPages":
		if e.complexity.PageInfo.TotalPages == nil {
			break
		}

		return e.complexity.PageInfo.TotalPages(childComplexity), true

	case "Participant.checkedIn":
		if e.complexity.Participant.CheckedIn == nil {
			break
		}

		return e.complexity.Participant.CheckedIn(childComplexity), true

	case "Participant.checkedInAt":
		if e.complexity.Participant.CheckedInAt == nil {
			break
		}

		return e.complexity.Participant.CheckedInAt(childComplexity), true

	case "Participant.connectedAccounts":
		if e.complexity.Participant.ConnectedAccounts == nil {
			break
		}

		return e.complexity.Participant.ConnectedAccounts(childComplexity), true

	case "Participant.contactInfo":
		if e.complexity.Participant.ContactInfo == nil {
			break
		}

		return e.complexity.Participant.ContactInfo(childComplexity), true

	case "Participant.email":
		if e.complexity.Participant.Email == nil {
			break
		}

		return e.complexity.Participant.Email(childComplexity), true

	case "Participant.entrants":
		if e.complexity.Participant.Entrants == nil {
			break
		}

		return e.complexity.Participant.Entrants(childComplexity), true

	case "Participant.events":
		if e.complexity.Participant.Events == nil {
			break
		}

		return e.complexity.Participant.Events(childComplexity), true

	case "Participant.gamerTag":
		if e.complexity.Participant.GamerTag == nil {
			break
		}

		return e.complexity.Participant.GamerTag(childComplexity), true

	case "Participant.id":
		if e.complexity.Participant.ID == nil {
			break
		}

		return e.complexity.Participant.ID(childComplexity), true

	case "Participant.images":
		if e.complexity.Participant.Images == nil {
			break
		}

		args, err := ec.field_Participant_images_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Participant.Images(childComplexity, args["type"].(*string)), true

	case "Participant.player":
		if e.complexity.Participant.Player == nil {
			break
		}

		return e.complexity.Participant.Player(childComplexity), true

	case "Participant.prefix":
		if e.complexity.Participant.Prefix == nil {
			break
		}

		return e.complexity.Participant.Prefix(childComplexity), true

	case "Participant.user":
		if e.complexity.Participant.User == nil {
			break
		}

		return e.complexity.Participant.User(childComplexity), true

	case "Participant.verified":
		if e.complexity.Participant.Verified == nil {
			break
		}

		return e.complexity.Participant.Verified(childComplexity), true

	case "ParticipantConnection.nodes":
		if e.complexity.ParticipantConnection.Nodes == nil {
			break
		}

		return e.complexity.ParticipantConnection.Nodes(childComplexity), true

	case "ParticipantConnection.pageInfo":
		if e.complexity.ParticipantConnection.PageInfo == nil {
			break
		}

		return e.complexity.ParticipantConnection.PageInfo(childComplexity), true

	case "Phase.bracketType":
		if e.complexity.Phase.BracketType == nil {
			break
		}

		return e.complexity.Phase.BracketType(childComplexity), true

	case "Phase.event":
		if e.complexity.Phase.Event == nil {
			break
		}

		return e.complexity.Phase.Event(childComplexity), true

	case "Phase.groupCount":
		if e.complexity.Phase.GroupCount == nil {
			break
		}

		return e.complexity.Phase.GroupCount(childComplexity), true

	case "Phase.id":
		if e.complexity.Phase.ID == nil {
			break
		}

		return e.complexity.Phase.ID(childComplexity), true

	case "Phase.isExhibition":
		if e.complexity.Phase.IsExhibition == nil {
			break
		}

		return e.complexity.Phase.IsExhibition(childComplexity), true

	case "Phase.name":
		if e.complexity.Phase.Name == nil {
			break
		}

		return e.complexity.Phase.Name(childComplexity), true

	case "Phase.numSeeds":
		if e.complexity.Phase.NumSeeds == nil {
			break
		}

		return e.complexity.Phase.NumSeeds(childComplexity), true

	case "Phase.paginatedSeeds":
		if e.complexity.Phase.PaginatedSeeds == nil {
			break
		}

		args, err := ec.field_Phase_paginatedSeeds_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Phase.PaginatedSeeds(childComplexity, args["query"].(model.SeedPaginationQuery), args["eventId"].(*string)), true

	case "Phase.phaseGroups":
		if e.complexity.Phase.PhaseGroups == nil {
			break
		}

		args, err := ec.field_Phase_phaseGroups_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Phase.PhaseGroups(childComplexity, args["query"].(*model.PhaseGroupPageQuery)), true

	case "Phase.phaseOrder":
		if e.complexity.Phase.PhaseOrder == nil {
			break
		}

		return e.complexity.Phase.PhaseOrder(childComplexity), true

	case "Phase.seeds":
		if e.complexity.Phase.Seeds == nil {
			break
		}

		args, err := ec.field_Phase_seeds_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Phase.Seeds(childComplexity, args["query"].(model.SeedPaginationQuery), args["eventId"].(*string)), true

	case "Phase.sets":
		if e.complexity.Phase.Sets == nil {
			break
		}

		args, err := ec.field_Phase_sets_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Phase.Sets(childComplexity, args["page"].(*int), args["perPage"].(*int), args["sortType"].(*model.SetSortType), args["filters"].(*model.SetFilters)), true

	case "Phase.state":
		if e.complexity.Phase.State == nil {
			break
		}

		return e.complexity.Phase.State(childComplexity), true

	case "Phase.waves":
		if e.complexity.Phase.Waves == nil {
			break
		}

		return e.complexity.Phase.Waves(childComplexity), true

	case "PhaseGroup.bracketType":
		if e.complexity.PhaseGroup.BracketType == nil {
			break
		}

		return e.complexity.PhaseGroup.BracketType(childComplexity), true

	case "PhaseGroup.displayIdentifier":
		if e.complexity.PhaseGroup.DisplayIdentifier == nil {
			break
		}

		return e.complexity.PhaseGroup.DisplayIdentifier(childComplexity), true

	case "PhaseGroup.firstRoundTime":
		if e.complexity.PhaseGroup.FirstRoundTime == nil {
			break
		}

		return e.complexity.PhaseGroup.FirstRoundTime(childComplexity), true

	case "PhaseGroup.id":
		if e.complexity.PhaseGroup.ID == nil {
			break
		}

		return e.complexity.PhaseGroup.ID(childComplexity), true

	case "PhaseGroup.numRounds":
		if e.complexity.PhaseGroup.NumRounds == nil {
			break
		}

		return e.complexity.PhaseGroup.NumRounds(childComplexity), true

	case "PhaseGroup.paginatedSeeds":
		if e.complexity.PhaseGroup.PaginatedSeeds == nil {
			break
		}

		args, err := ec.field_PhaseGroup_paginatedSeeds_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.PhaseGroup.PaginatedSeeds(childComplexity, args["query"].(model.SeedPaginationQuery), args["eventId"].(*string)), true

	case "PhaseGroup.paginatedSets":
		if e.complexity.PhaseGroup.PaginatedSets == nil {
			break
		}

		args, err := ec.field_PhaseGroup_paginatedSets_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.PhaseGroup.PaginatedSets(childComplexity, args["page"].(*int), args["perPage"].(*int), args["sortType"].(*model.SetSortType), args["filters"].(*model.SetFilters)), true

	case "PhaseGroup.phase":
		if e.complexity.PhaseGroup.Phase == nil {
			break
		}

		return e.complexity.PhaseGroup.Phase(childComplexity), true

	case "PhaseGroup.progressionsOut":
		if e.complexity.PhaseGroup.ProgressionsOut == nil {
			break
		}

		return e.complexity.PhaseGroup.ProgressionsOut(childComplexity), true

	case "PhaseGroup.rounds":
		if e.complexity.PhaseGroup.Rounds == nil {
			break
		}

		return e.complexity.PhaseGroup.Rounds(childComplexity), true

	case "PhaseGroup.seedMap":
		if e.complexity.PhaseGroup.SeedMap == nil {
			break
		}

		return e.complexity.PhaseGroup.SeedMap(childComplexity), true

	case "PhaseGroup.seeds":
		if e.complexity.PhaseGroup.Seeds == nil {
			break
		}

		args, err := ec.field_PhaseGroup_seeds_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.PhaseGroup.Seeds(childComplexity, args["query"].(model.SeedPaginationQuery), args["eventId"].(*string)), true

	case "PhaseGroup.sets":
		if e.complexity.PhaseGroup.Sets == nil {
			break
		}

		args, err := ec.field_PhaseGroup_sets_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.PhaseGroup.Sets(childComplexity, args["page"].(*int), args["perPage"].(*int), args["sortType"].(*model.SetSortType), args["filters"].(*model.SetFilters)), true

	case "PhaseGroup.standings":
		if e.complexity.PhaseGroup.Standings == nil {
			break
		}

		args, err := ec.field_PhaseGroup_standings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.PhaseGroup.Standings(childComplexity, args["query"].(*model.StandingGroupStandingPageFilter)), true

	case "PhaseGroup.startAt":
		if e.complexity.PhaseGroup.StartAt == nil {
			break
		}

		return e.complexity.PhaseGroup.StartAt(childComplexity), true

	case "PhaseGroup.state":
		if e.complexity.PhaseGroup.State == nil {
			break
		}

		return e.complexity.PhaseGroup.State(childComplexity), true

	case "PhaseGroup.tiebreakOrder":
		if e.complexity.PhaseGroup.TiebreakOrder == nil {
			break
		}

		return e.complexity.PhaseGroup.TiebreakOrder(childComplexity), true

	case "PhaseGroup.wave":
		if e.complexity.PhaseGroup.Wave == nil {
			break
		}

		return e.complexity.PhaseGroup.Wave(childComplexity), true

	case "PhaseGroupConnection.nodes":
		if e.complexity.PhaseGroupConnection.Nodes == nil {
			break
		}

		return e.complexity.PhaseGroupConnection.Nodes(childComplexity), true

	case "PhaseGroupConnection.pageInfo":
		if e.complexity.PhaseGroupConnection.PageInfo == nil {
			break
		}

		return e.complexity.PhaseGroupConnection.PageInfo(childComplexity), true

	case "Player.gamerTag":
		if e.complexity.Player.GamerTag == nil {
			break
		}

		return e.complexity.Player.GamerTag(childComplexity), true

	case "Player.id":
		if e.complexity.Player.ID == nil {
			break
		}

		return e.complexity.Player.ID(childComplexity), true

	case "Player.prefix":
		if e.complexity.Player.Prefix == nil {
			break
		}

		return e.complexity.Player.Prefix(childComplexity), true

	case "Player.rankings":
		if e.complexity.Player.Rankings == nil {
			break
		}

		args, err := ec.field_Player_rankings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Player.Rankings(childComplexity, args["limit"].(*int), args["videogameId"].(*string)), true

	case "Player.recentSets":
		if e.complexity.Player.RecentSets == nil {
			break
		}

		args, err := ec.field_Player_recentSets_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Player.RecentSets(childComplexity, args["opponentId"].(*string)), true

	case "Player.sets":
		if e.complexity.Player.Sets == nil {
			break
		}

		args, err := ec.field_Player_sets_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Player.Sets(childComplexity, args["page"].(*int), args["perPage"].(*int), args["filters"].(*model.SetFilters)), true

	case "Player.user":
		if e.complexity.Player.User == nil {
			break
		}

		return e.complexity.Player.User(childComplexity), true

	case "PlayerRank.id":
		if e.complexity.PlayerRank.ID == nil {
			break
		}

		return e.complexity.PlayerRank.ID(childComplexity), true

	case "PlayerRank.rank":
		if e.complexity.PlayerRank.Rank == nil {
			break
		}

		return e.complexity.PlayerRank.Rank(childComplexity), true

	case "PlayerRank.title":
		if e.complexity.PlayerRank.Title == nil {
			break
		}

		return e.complexity.PlayerRank.Title(childComplexity), true

	case "ProfileAuthorization.externalUsername":
		if e.complexity.ProfileAuthorization.ExternalUsername == nil {
			break
		}

		return e.complexity.ProfileAuthorization.ExternalUsername(childComplexity), true

	case "ProfileAuthorization.id":
		if e.complexity.ProfileAuthorization.ID == nil {
			break
		}

		return e.complexity.ProfileAuthorization.ID(childComplexity), true

	case "ProfileAuthorization.stream":
		if e.complexity.ProfileAuthorization.Stream == nil {
			break
		}

		return e.complexity.ProfileAuthorization.Stream(childComplexity), true

	case "ProfileAuthorization.type":
		if e.complexity.ProfileAuthorization.Type == nil {
			break
		}

		return e.complexity.ProfileAuthorization.Type(childComplexity), true

	case "ProfileAuthorization.url":
		if e.complexity.ProfileAuthorization.URL == nil {
			break
		}

		return e.complexity.ProfileAuthorization.URL(childComplexity), true

	case "Progression.id":
		if e.complexity.Progression.ID == nil {
			break
		}

		return e.complexity.Progression.ID(childComplexity), true

	case "Progression.originOrder":
		if e.complexity.Progression.OriginOrder == nil {
			break
		}

		return e.complexity.Progression.OriginOrder(childComplexity), true

	case "Progression.originPhase":
		if e.complexity.Progression.OriginPhase == nil {
			break
		}

		return e.complexity.Progression.OriginPhase(childComplexity), true

	case "Progression.originPhaseGroup":
		if e.complexity.Progression.OriginPhaseGroup == nil {
			break
		}

		return e.complexity.Progression.OriginPhaseGroup(childComplexity), true

	case "Progression.originPlacement":
		if e.complexity.Progression.OriginPlacement == nil {
			break
		}

		return e.complexity.Progression.OriginPlacement(childComplexity), true

	case "Query.currentUser":
		if e.complexity.Query.CurrentUser == nil {
			break
		}

		return e.complexity.Query.CurrentUser(childComplexity), true

	case "Query.event":
		if e.complexity.Query.Event == nil {
			break
		}

		args, err := ec.field_Query_event_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Event(childComplexity, args["id"].(*string), args["slug"].(*string)), true

	case "Query.league":
		if e.complexity.Query.League == nil {
			break
		}

		args, err := ec.field_Query_league_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.League(childComplexity, args["id"].(*string), args["slug"].(*string)), true

	case "Query.participant":
		if e.complexity.Query.Participant == nil {
			break
		}

		args, err := ec.field_Query_participant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Participant(childComplexity, args["id"].(string), args["isAdmin"].(*bool)), true

	case "Query.phase":
		if e.complexity.Query.Phase == nil {
			break
		}

		args, err := ec.field_Query_phase_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Phase(childComplexity, args["id"].(*string)), true

	case "Query.phaseGroup":
		if e.complexity.Query.PhaseGroup == nil {
			break
		}

		args, err := ec.field_Query_phaseGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PhaseGroup(childComplexity, args["id"].(*string)), true

	case "Query.player":
		if e.complexity.Query.Player == nil {
			break
		}

		args, err := ec.field_Query_player_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Player(childComplexity, args["id"].(string)), true

	case "Query.seed":
		if e.complexity.Query.Seed == nil {
			break
		}

		args, err := ec.field_Query_seed_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Seed(childComplexity, args["id"].(*string)), true

	case "Query.set":
		if e.complexity.Query.Set == nil {
			break
		}

		args, err := ec.field_Query_set_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Set(childComplexity, args["id"].(string)), true

	case "Query.shop":
		if e.complexity.Query.Shop == nil {
			break
		}

		args, err := ec.field_Query_shop_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Shop(childComplexity, args["id"].(*string), args["slug"].(*string)), true

	case "Query.stream":
		if e.complexity.Query.Stream == nil {
			break
		}

		args, err := ec.field_Query_stream_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Stream(childComplexity, args["id"].(string)), true

	case "Query.streamQueue":
		if e.complexity.Query.StreamQueue == nil {
			break
		}

		args, err := ec.field_Query_streamQueue_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.StreamQueue(childComplexity, args["tournamentId"].(string), args["includePlayerStreams"].(*bool)), true

	case "Query.tournament":
		if e.complexity.Query.Tournament == nil {
			break
		}

		args, err := ec.field_Query_tournament_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Tournament(childComplexity, args["id"].(*string), args["slug"].(*string)), true

	case "Query.tournaments":
		if e.complexity.Query.Tournaments == nil {
			break
		}

		args, err := ec.field_Query_tournaments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Tournaments(childComplexity, args["query"].(model.TournamentQuery)), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["id"].(*string), args["slug"].(*string)), true

	case "Query.videogame":
		if e.complexity.Query.Videogame == nil {
			break
		}

		args, err := ec.field_Query_videogame_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Videogame(childComplexity, args["id"].(*string)), true

	case "Query.videogames":
		if e.complexity.Query.Videogames == nil {
			break
		}

		args, err := ec.field_Query_videogames_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Videogames(childComplexity, args["query"].(model.VideogameQuery)), true

	case "RaceBracketConfig.automaticEndTime":
		if e.complexity.RaceBracketConfig.AutomaticEndTime == nil {
			break
		}

		return e.complexity.RaceBracketConfig.AutomaticEndTime(childComplexity), true

	case "RaceBracketConfig.automaticStartTime":
		if e.complexity.RaceBracketConfig.AutomaticStartTime == nil {
			break
		}

		return e.complexity.RaceBracketConfig.AutomaticStartTime(childComplexity), true

	case "RaceBracketConfig.bracketType":
		if e.complexity.RaceBracketConfig.BracketType == nil {
			break
		}

		return e.complexity.RaceBracketConfig.BracketType(childComplexity), true

	case "RaceBracketConfig.goalTargetComparator":
		if e.complexity.RaceBracketConfig.GoalTargetComparator == nil {
			break
		}

		return e.complexity.RaceBracketConfig.GoalTargetComparator(childComplexity), true

	case "RaceBracketConfig.goalTargetValue":
		if e.complexity.RaceBracketConfig.GoalTargetValue == nil {
			break
		}

		return e.complexity.RaceBracketConfig.GoalTargetValue(childComplexity), true

	case "RaceBracketConfig.id":
		if e.complexity.RaceBracketConfig.ID == nil {
			break
		}

		return e.complexity.RaceBracketConfig.ID(childComplexity), true

	case "RaceBracketConfig.limitMode":
		if e.complexity.RaceBracketConfig.LimitMode == nil {
			break
		}

		return e.complexity.RaceBracketConfig.LimitMode(childComplexity), true

	case "RaceBracketConfig.limitValue":
		if e.complexity.RaceBracketConfig.LimitValue == nil {
			break
		}

		return e.complexity.RaceBracketConfig.LimitValue(childComplexity), true

	case "RaceBracketConfig.raceType":
		if e.complexity.RaceBracketConfig.RaceType == nil {
			break
		}

		return e.complexity.RaceBracketConfig.RaceType(childComplexity), true

	case "RaceMatchConfig.bracketType":
		if e.complexity.RaceMatchConfig.BracketType == nil {
			break
		}

		return e.complexity.RaceMatchConfig.BracketType(childComplexity), true

	case "RaceMatchConfig.id":
		if e.complexity.RaceMatchConfig.ID == nil {
			break
		}

		return e.complexity.RaceMatchConfig.ID(childComplexity), true

	case "RaceMatchConfig.playerReportingEnabled":
		if e.complexity.RaceMatchConfig.PlayerReportingEnabled == nil {
			break
		}

		return e.complexity.RaceMatchConfig.PlayerReportingEnabled(childComplexity), true

	case "RaceMatchConfig.verificationMethods":
		if e.complexity.RaceMatchConfig.VerificationMethods == nil {
			break
		}

		return e.complexity.RaceMatchConfig.VerificationMethods(childComplexity), true

	case "RaceMatchConfig.verificationRequired":
		if e.complexity.RaceMatchConfig.VerificationRequired == nil {
			break
		}

		return e.complexity.RaceMatchConfig.VerificationRequired(childComplexity), true

	case "Round.bestOf":
		if e.complexity.Round.BestOf == nil {
			break
		}

		return e.complexity.Round.BestOf(childComplexity), true

	case "Round.id":
		if e.complexity.Round.ID == nil {
			break
		}

		return e.complexity.Round.ID(childComplexity), true

	case "Round.number":
		if e.complexity.Round.Number == nil {
			break
		}

		return e.complexity.Round.Number(childComplexity), true

	case "Round.startAt":
		if e.complexity.Round.StartAt == nil {
			break
		}

		return e.complexity.Round.StartAt(childComplexity), true

	case "Score.displayValue":
		if e.complexity.Score.DisplayValue == nil {
			break
		}

		return e.complexity.Score.DisplayValue(childComplexity), true

	case "Score.label":
		if e.complexity.Score.Label == nil {
			break
		}

		return e.complexity.Score.Label(childComplexity), true

	case "Score.value":
		if e.complexity.Score.Value == nil {
			break
		}

		return e.complexity.Score.Value(childComplexity), true

	case "Seed.checkedInParticipants":
		if e.complexity.Seed.CheckedInParticipants == nil {
			break
		}

		return e.complexity.Seed.CheckedInParticipants(childComplexity), true

	case "Seed.entrant":
		if e.complexity.Seed.Entrant == nil {
			break
		}

		return e.complexity.Seed.Entrant(childComplexity), true

	case "Seed.groupSeedNum":
		if e.complexity.Seed.GroupSeedNum == nil {
			break
		}

		return e.complexity.Seed.GroupSeedNum(childComplexity), true

	case "Seed.id":
		if e.complexity.Seed.ID == nil {
			break
		}

		return e.complexity.Seed.ID(childComplexity), true

	case "Seed.isBye":
		if e.complexity.Seed.IsBye == nil {
			break
		}

		return e.complexity.Seed.IsBye(childComplexity), true

	case "Seed.phase":
		if e.complexity.Seed.Phase == nil {
			break
		}

		return e.complexity.Seed.Phase(childComplexity), true

	case "Seed.phaseGroup":
		if e.complexity.Seed.PhaseGroup == nil {
			break
		}

		return e.complexity.Seed.PhaseGroup(childComplexity), true

	case "Seed.placeholderName":
		if e.complexity.Seed.PlaceholderName == nil {
			break
		}

		return e.complexity.Seed.PlaceholderName(childComplexity), true

	case "Seed.placement":
		if e.complexity.Seed.Placement == nil {
			break
		}

		return e.complexity.Seed.Placement(childComplexity), true

	case "Seed.players":
		if e.complexity.Seed.Players == nil {
			break
		}

		return e.complexity.Seed.Players(childComplexity), true

	case "Seed.progressionSeedId":
		if e.complexity.Seed.ProgressionSeedID == nil {
			break
		}

		return e.complexity.Seed.ProgressionSeedID(childComplexity), true

	case "Seed.progressionSource":
		if e.complexity.Seed.ProgressionSource == nil {
			break
		}

		return e.complexity.Seed.ProgressionSource(childComplexity), true

	case "Seed.seedNum":
		if e.complexity.Seed.SeedNum == nil {
			break
		}

		return e.complexity.Seed.SeedNum(childComplexity), true

	case "Seed.setRecordWithoutByes":
		if e.complexity.Seed.SetRecordWithoutByes == nil {
			break
		}

		args, err := ec.field_Seed_setRecordWithoutByes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Seed.SetRecordWithoutByes(childComplexity, args["phaseGroupId"].(string)), true

	case "Seed.standings":
		if e.complexity.Seed.Standings == nil {
			break
		}

		args, err := ec.field_Seed_standings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Seed.Standings(childComplexity, args["containerType"].(*string)), true

	case "SeedConnection.nodes":
		if e.complexity.SeedConnection.Nodes == nil {
			break
		}

		return e.complexity.SeedConnection.Nodes(childComplexity), true

	case "SeedConnection.pageInfo":
		if e.complexity.SeedConnection.PageInfo == nil {
			break
		}

		return e.complexity.SeedConnection.PageInfo(childComplexity), true

	case "Set.completedAt":
		if e.complexity.Set.CompletedAt == nil {
			break
		}

		return e.complexity.Set.CompletedAt(childComplexity), true

	case "Set.createdAt":
		if e.complexity.Set.CreatedAt == nil {
			break
		}

		return e.complexity.Set.CreatedAt(childComplexity), true

	case "Set.displayScore":
		if e.complexity.Set.DisplayScore == nil {
			break
		}

		args, err := ec.field_Set_displayScore_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Set.DisplayScore(childComplexity, args["mainEntrantId"].(*string)), true

	case "Set.event":
		if e.complexity.Set.Event == nil {
			break
		}

		return e.complexity.Set.Event(childComplexity), true

	case "Set.fullRoundText":
		if e.complexity.Set.FullRoundText == nil {
			break
		}

		return e.complexity.Set.FullRoundText(childComplexity), true

	case "Set.game":
		if e.complexity.Set.Game == nil {
			break
		}

		args, err := ec.field_Set_game_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Set.Game(childComplexity, args["orderNum"].(int)), true

	case "Set.games":
		if e.complexity.Set.Games == nil {
			break
		}

		return e.complexity.Set.Games(childComplexity), true

	case "Set.hasPlaceholder":
		if e.complexity.Set.HasPlaceholder == nil {
			break
		}

		return e.complexity.Set.HasPlaceholder(childComplexity), true

	case "Set.id":
		if e.complexity.Set.ID == nil {
			break
		}

		return e.complexity.Set.ID(childComplexity), true

	case "Set.identifier":
		if e.complexity.Set.Identifier == nil {
			break
		}

		return e.complexity.Set.Identifier(childComplexity), true

	case "Set.images":
		if e.complexity.Set.Images == nil {
			break
		}

		args, err := ec.field_Set_images_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Set.Images(childComplexity, args["type"].(*string)), true

	case "Set.lPlacement":
		if e.complexity.Set.LPlacement == nil {
			break
		}

		return e.complexity.Set.LPlacement(childComplexity), true

	case "Set.phaseGroup":
		if e.complexity.Set.PhaseGroup == nil {
			break
		}

		return e.complexity.Set.PhaseGroup(childComplexity), true

	case "Set.round":
		if e.complexity.Set.Round == nil {
			break
		}

		return e.complexity.Set.Round(childComplexity), true

	case "Set.setGamesType":
		if e.complexity.Set.SetGamesType == nil {
			break
		}

		return e.complexity.Set.SetGamesType(childComplexity), true

	case "Set.slots":
		if e.complexity.Set.Slots == nil {
			break
		}

		args, err := ec.field_Set_slots_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Set.Slots(childComplexity, args["includeByes"].(*bool)), true

	case "Set.startedAt":
		if e.complexity.Set.StartedAt == nil {
			break
		}

		return e.complexity.Set.StartedAt(childComplexity), true

	case "Set.state":
		if e.complexity.Set.State == nil {
			break
		}

		return e.complexity.Set.State(childComplexity), true

	case "Set.station":
		if e.complexity.Set.Station == nil {
			break
		}

		return e.complexity.Set.Station(childComplexity), true

	case "Set.stream":
		if e.complexity.Set.Stream == nil {
			break
		}

		return e.complexity.Set.Stream(childComplexity), true

	case "Set.totalGames":
		if e.complexity.Set.TotalGames == nil {
			break
		}

		return e.complexity.Set.TotalGames(childComplexity), true

	case "Set.vodUrl":
		if e.complexity.Set.VodURL == nil {
			break
		}

		return e.complexity.Set.VodURL(childComplexity), true

	case "Set.wPlacement":
		if e.complexity.Set.WPlacement == nil {
			break
		}

		return e.complexity.Set.WPlacement(childComplexity), true

	case "Set.winnerId":
		if e.complexity.Set.WinnerID == nil {
			break
		}

		return e.complexity.Set.WinnerID(childComplexity), true

	case "SetConnection.nodes":
		if e.complexity.SetConnection.Nodes == nil {
			break
		}

		return e.complexity.SetConnection.Nodes(childComplexity), true

	case "SetConnection.pageInfo":
		if e.complexity.SetConnection.PageInfo == nil {
			break
		}

		return e.complexity.SetConnection.PageInfo(childComplexity), true

	case "SetSlot.entrant":
		if e.complexity.SetSlot.Entrant == nil {
			break
		}

		return e.complexity.SetSlot.Entrant(childComplexity), true

	case "SetSlot.id":
		if e.complexity.SetSlot.ID == nil {
			break
		}

		return e.complexity.SetSlot.ID(childComplexity), true

	case "SetSlot.prereqId":
		if e.complexity.SetSlot.PrereqID == nil {
			break
		}

		return e.complexity.SetSlot.PrereqID(childComplexity), true

	case "SetSlot.prereqPlacement":
		if e.complexity.SetSlot.PrereqPlacement == nil {
			break
		}

		return e.complexity.SetSlot.PrereqPlacement(childComplexity), true

	case "SetSlot.prereqType":
		if e.complexity.SetSlot.PrereqType == nil {
			break
		}

		return e.complexity.SetSlot.PrereqType(childComplexity), true

	case "SetSlot.seed":
		if e.complexity.SetSlot.Seed == nil {
			break
		}

		return e.complexity.SetSlot.Seed(childComplexity), true

	case "SetSlot.slotIndex":
		if e.complexity.SetSlot.SlotIndex == nil {
			break
		}

		return e.complexity.SetSlot.SlotIndex(childComplexity), true

	case "SetSlot.standing":
		if e.complexity.SetSlot.Standing == nil {
			break
		}

		return e.complexity.SetSlot.Standing(childComplexity), true

	case "Shop.id":
		if e.complexity.Shop.ID == nil {
			break
		}

		return e.complexity.Shop.ID(childComplexity), true

	case "Shop.levels":
		if e.complexity.Shop.Levels == nil {
			break
		}

		args, err := ec.field_Shop_levels_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Shop.Levels(childComplexity, args["query"].(*model.ShopLevelsQuery)), true

	case "Shop.messages":
		if e.complexity.Shop.Messages == nil {
			break
		}

		args, err := ec.field_Shop_messages_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Shop.Messages(childComplexity, args["query"].(*model.ShopOrderMessagesQuery)), true

	case "Shop.name":
		if e.complexity.Shop.Name == nil {
			break
		}

		return e.complexity.Shop.Name(childComplexity), true

	case "Shop.slug":
		if e.complexity.Shop.Slug == nil {
			break
		}

		return e.complexity.Shop.Slug(childComplexity), true

	case "Shop.url":
		if e.complexity.Shop.URL == nil {
			break
		}

		return e.complexity.Shop.URL(childComplexity), true

	case "ShopLevel.currAmount":
		if e.complexity.ShopLevel.CurrAmount == nil {
			break
		}

		return e.complexity.ShopLevel.CurrAmount(childComplexity), true

	case "ShopLevel.description":
		if e.complexity.ShopLevel.Description == nil {
			break
		}

		return e.complexity.ShopLevel.Description(childComplexity), true

	case "ShopLevel.goalAmount":
		if e.complexity.ShopLevel.GoalAmount == nil {
			break
		}

		return e.complexity.ShopLevel.GoalAmount(childComplexity), true

	case "ShopLevel.id":
		if e.complexity.ShopLevel.ID == nil {
			break
		}

		return e.complexity.ShopLevel.ID(childComplexity), true

	case "ShopLevel.images":
		if e.complexity.ShopLevel.Images == nil {
			break
		}

		args, err := ec.field_ShopLevel_images_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ShopLevel.Images(childComplexity, args["type"].(*string)), true

	case "ShopLevel.name":
		if e.complexity.ShopLevel.Name == nil {
			break
		}

		return e.complexity.ShopLevel.Name(childComplexity), true

	case "ShopLevelConnection.nodes":
		if e.complexity.ShopLevelConnection.Nodes == nil {
			break
		}

		return e.complexity.ShopLevelConnection.Nodes(childComplexity), true

	case "ShopLevelConnection.pageInfo":
		if e.complexity.ShopLevelConnection.PageInfo == nil {
			break
		}

		return e.complexity.ShopLevelConnection.PageInfo(childComplexity), true

	case "ShopOrderMessage.gamertag":
		if e.complexity.ShopOrderMessage.Gamertag == nil {
			break
		}

		return e.complexity.ShopOrderMessage.Gamertag(childComplexity), true

	case "ShopOrderMessage.id":
		if e.complexity.ShopOrderMessage.ID == nil {
			break
		}

		return e.complexity.ShopOrderMessage.ID(childComplexity), true

	case "ShopOrderMessage.message":
		if e.complexity.ShopOrderMessage.Message == nil {
			break
		}

		return e.complexity.ShopOrderMessage.Message(childComplexity), true

	case "ShopOrderMessage.name":
		if e.complexity.ShopOrderMessage.Name == nil {
			break
		}

		return e.complexity.ShopOrderMessage.Name(childComplexity), true

	case "ShopOrderMessage.player":
		if e.complexity.ShopOrderMessage.Player == nil {
			break
		}

		return e.complexity.ShopOrderMessage.Player(childComplexity), true

	case "ShopOrderMessage.total":
		if e.complexity.ShopOrderMessage.Total == nil {
			break
		}

		return e.complexity.ShopOrderMessage.Total(childComplexity), true

	case "ShopOrderMessageConnection.nodes":
		if e.complexity.ShopOrderMessageConnection.Nodes == nil {
			break
		}

		return e.complexity.ShopOrderMessageConnection.Nodes(childComplexity), true

	case "ShopOrderMessageConnection.pageInfo":
		if e.complexity.ShopOrderMessageConnection.PageInfo == nil {
			break
		}

		return e.complexity.ShopOrderMessageConnection.PageInfo(childComplexity), true

	case "Stage.id":
		if e.complexity.Stage.ID == nil {
			break
		}

		return e.complexity.Stage.ID(childComplexity), true

	case "Stage.name":
		if e.complexity.Stage.Name == nil {
			break
		}

		return e.complexity.Stage.Name(childComplexity), true

	case "Standing.container":
		if e.complexity.Standing.Container == nil {
			break
		}

		return e.complexity.Standing.Container(childComplexity), true

	case "Standing.entrant":
		if e.complexity.Standing.Entrant == nil {
			break
		}

		return e.complexity.Standing.Entrant(childComplexity), true

	case "Standing.id":
		if e.complexity.Standing.ID == nil {
			break
		}

		return e.complexity.Standing.ID(childComplexity), true

	case "Standing.isFinal":
		if e.complexity.Standing.IsFinal == nil {
			break
		}

		return e.complexity.Standing.IsFinal(childComplexity), true

	case "Standing.metadata":
		if e.complexity.Standing.Metadata == nil {
			break
		}

		return e.complexity.Standing.Metadata(childComplexity), true

	case "Standing.placement":
		if e.complexity.Standing.Placement == nil {
			break
		}

		return e.complexity.Standing.Placement(childComplexity), true

	case "Standing.player":
		if e.complexity.Standing.Player == nil {
			break
		}

		return e.complexity.Standing.Player(childComplexity), true

	case "Standing.standing":
		if e.complexity.Standing.Standing == nil {
			break
		}

		return e.complexity.Standing.Standing(childComplexity), true

	case "Standing.stats":
		if e.complexity.Standing.Stats == nil {
			break
		}

		return e.complexity.Standing.Stats(childComplexity), true

	case "StandingConnection.nodes":
		if e.complexity.StandingConnection.Nodes == nil {
			break
		}

		return e.complexity.StandingConnection.Nodes(childComplexity), true

	case "StandingConnection.pageInfo":
		if e.complexity.StandingConnection.PageInfo == nil {
			break
		}

		return e.complexity.StandingConnection.PageInfo(childComplexity), true

	case "StandingStats.score":
		if e.complexity.StandingStats.Score == nil {
			break
		}

		return e.complexity.StandingStats.Score(childComplexity), true

	case "Stations.canAutoAssign":
		if e.complexity.Stations.CanAutoAssign == nil {
			break
		}

		return e.complexity.Stations.CanAutoAssign(childComplexity), true

	case "Stations.clusterNumber":
		if e.complexity.Stations.ClusterNumber == nil {
			break
		}

		return e.complexity.Stations.ClusterNumber(childComplexity), true

	case "Stations.clusterPrefix":
		if e.complexity.Stations.ClusterPrefix == nil {
			break
		}

		return e.complexity.Stations.ClusterPrefix(childComplexity), true

	case "Stations.enabled":
		if e.complexity.Stations.Enabled == nil {
			break
		}

		return e.complexity.Stations.Enabled(childComplexity), true

	case "Stations.id":
		if e.complexity.Stations.ID == nil {
			break
		}

		return e.complexity.Stations.ID(childComplexity), true

	case "Stations.identifier":
		if e.complexity.Stations.Identifier == nil {
			break
		}

		return e.complexity.Stations.Identifier(childComplexity), true

	case "Stations.numSetups":
		if e.complexity.Stations.NumSetups == nil {
			break
		}

		return e.complexity.Stations.NumSetups(childComplexity), true

	case "Stations.number":
		if e.complexity.Stations.Number == nil {
			break
		}

		return e.complexity.Stations.Number(childComplexity), true

	case "Stations.prefix":
		if e.complexity.Stations.Prefix == nil {
			break
		}

		return e.complexity.Stations.Prefix(childComplexity), true

	case "Stations.queue":
		if e.complexity.Stations.Queue == nil {
			break
		}

		return e.complexity.Stations.Queue(childComplexity), true

	case "Stations.queueDepth":
		if e.complexity.Stations.QueueDepth == nil {
			break
		}

		return e.complexity.Stations.QueueDepth(childComplexity), true

	case "Stations.state":
		if e.complexity.Stations.State == nil {
			break
		}

		return e.complexity.Stations.State(childComplexity), true

	case "Stations.updatedAt":
		if e.complexity.Stations.UpdatedAt == nil {
			break
		}

		return e.complexity.Stations.UpdatedAt(childComplexity), true

	case "StationsConnection.nodes":
		if e.complexity.StationsConnection.Nodes == nil {
			break
		}

		return e.complexity.StationsConnection.Nodes(childComplexity), true

	case "StationsConnection.pageInfo":
		if e.complexity.StationsConnection.PageInfo == nil {
			break
		}

		return e.complexity.StationsConnection.PageInfo(childComplexity), true

	case "Stream.id":
		if e.complexity.Stream.ID == nil {
			break
		}

		return e.complexity.Stream.ID(childComplexity), true

	case "Stream.isOnline":
		if e.complexity.Stream.IsOnline == nil {
			break
		}

		return e.complexity.Stream.IsOnline(childComplexity), true

	case "Stream.name":
		if e.complexity.Stream.Name == nil {
			break
		}

		return e.complexity.Stream.Name(childComplexity), true

	case "Stream.type":
		if e.complexity.Stream.Type == nil {
			break
		}

		return e.complexity.Stream.Type(childComplexity), true

	case "StreamQueue.id":
		if e.complexity.StreamQueue.ID == nil {
			break
		}

		return e.complexity.StreamQueue.ID(childComplexity), true

	case "StreamQueue.sets":
		if e.complexity.StreamQueue.Sets == nil {
			break
		}

		return e.complexity.StreamQueue.Sets(childComplexity), true

	case "StreamQueue.stream":
		if e.complexity.StreamQueue.Stream == nil {
			break
		}

		return e.complexity.StreamQueue.Stream(childComplexity), true

	case "Streams.enabled":
		if e.complexity.Streams.Enabled == nil {
			break
		}

		return e.complexity.Streams.Enabled(childComplexity), true

	case "Streams.followerCount":
		if e.complexity.Streams.FollowerCount == nil {
			break
		}

		return e.complexity.Streams.FollowerCount(childComplexity), true

	case "Streams.id":
		if e.complexity.Streams.ID == nil {
			break
		}

		return e.complexity.Streams.ID(childComplexity), true

	case "Streams.isOnline":
		if e.complexity.Streams.IsOnline == nil {
			break
		}

		return e.complexity.Streams.IsOnline(childComplexity), true

	case "Streams.numSetups":
		if e.complexity.Streams.NumSetups == nil {
			break
		}

		return e.complexity.Streams.NumSetups(childComplexity), true

	case "Streams.parentStreamId":
		if e.complexity.Streams.ParentStreamID == nil {
			break
		}

		return e.complexity.Streams.ParentStreamID(childComplexity), true

	case "Streams.streamGame":
		if e.complexity.Streams.StreamGame == nil {
			break
		}

		return e.complexity.Streams.StreamGame(childComplexity), true

	case "Streams.streamId":
		if e.complexity.Streams.StreamID == nil {
			break
		}

		return e.complexity.Streams.StreamID(childComplexity), true

	case "Streams.streamLogo":
		if e.complexity.Streams.StreamLogo == nil {
			break
		}

		return e.complexity.Streams.StreamLogo(childComplexity), true

	case "Streams.streamName":
		if e.complexity.Streams.StreamName == nil {
			break
		}

		return e.complexity.Streams.StreamName(childComplexity), true

	case "Streams.streamSource":
		if e.complexity.Streams.StreamSource == nil {
			break
		}

		return e.complexity.Streams.StreamSource(childComplexity), true

	case "Streams.streamStatus":
		if e.complexity.Streams.StreamStatus == nil {
			break
		}

		return e.complexity.Streams.StreamStatus(childComplexity), true

	case "Streams.streamType":
		if e.complexity.Streams.StreamType == nil {
			break
		}

		return e.complexity.Streams.StreamType(childComplexity), true

	case "Streams.streamTypeId":
		if e.complexity.Streams.StreamTypeID == nil {
			break
		}

		return e.complexity.Streams.StreamTypeID(childComplexity), true

	case "Team.entrant":
		if e.complexity.Team.Entrant == nil {
			break
		}

		return e.complexity.Team.Entrant(childComplexity), true

	case "Team.event":
		if e.complexity.Team.Event == nil {
			break
		}

		return e.complexity.Team.Event(childComplexity), true

	case "Team.id":
		if e.complexity.Team.ID == nil {
			break
		}

		return e.complexity.Team.ID(childComplexity), true

	case "Team.name":
		if e.complexity.Team.Name == nil {
			break
		}

		return e.complexity.Team.Name(childComplexity), true

	case "TeamConnection.nodes":
		if e.complexity.TeamConnection.Nodes == nil {
			break
		}

		return e.complexity.TeamConnection.Nodes(childComplexity), true

	case "TeamConnection.pageInfo":
		if e.complexity.TeamConnection.PageInfo == nil {
			break
		}

		return e.complexity.TeamConnection.PageInfo(childComplexity), true

	case "Tournament.addrState":
		if e.complexity.Tournament.AddrState == nil {
			break
		}

		return e.complexity.Tournament.AddrState(childComplexity), true

	case "Tournament.admins":
		if e.complexity.Tournament.Admins == nil {
			break
		}

		args, err := ec.field_Tournament_admins_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Tournament.Admins(childComplexity, args["roles"].([]*string)), true

	case "Tournament.city":
		if e.complexity.Tournament.City == nil {
			break
		}

		return e.complexity.Tournament.City(childComplexity), true

	case "Tournament.countryCode":
		if e.complexity.Tournament.CountryCode == nil {
			break
		}

		return e.complexity.Tournament.CountryCode(childComplexity), true

	case "Tournament.createdAt":
		if e.complexity.Tournament.CreatedAt == nil {
			break
		}

		return e.complexity.Tournament.CreatedAt(childComplexity), true

	case "Tournament.currency":
		if e.complexity.Tournament.Currency == nil {
			break
		}

		return e.complexity.Tournament.Currency(childComplexity), true

	case "Tournament.endAt":
		if e.complexity.Tournament.EndAt == nil {
			break
		}

		return e.complexity.Tournament.EndAt(childComplexity), true

	case "Tournament.eventRegistrationClosesAt":
		if e.complexity.Tournament.EventRegistrationClosesAt == nil {
			break
		}

		return e.complexity.Tournament.EventRegistrationClosesAt(childComplexity), true

	case "Tournament.events":
		if e.complexity.Tournament.Events == nil {
			break
		}

		args, err := ec.field_Tournament_events_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Tournament.Events(childComplexity, args["limit"].(*int)), true

	case "Tournament.hasOfflineEvents":
		if e.complexity.Tournament.HasOfflineEvents == nil {
			break
		}

		return e.complexity.Tournament.HasOfflineEvents(childComplexity), true

	case "Tournament.hasOnlineEvents":
		if e.complexity.Tournament.HasOnlineEvents == nil {
			break
		}

		return e.complexity.Tournament.HasOnlineEvents(childComplexity), true

	case "Tournament.hashtag":
		if e.complexity.Tournament.Hashtag == nil {
			break
		}

		return e.complexity.Tournament.Hashtag(childComplexity), true

	case "Tournament.id":
		if e.complexity.Tournament.ID == nil {
			break
		}

		return e.complexity.Tournament.ID(childComplexity), true

	case "Tournament.images":
		if e.complexity.Tournament.Images == nil {
			break
		}

		args, err := ec.field_Tournament_images_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Tournament.Images(childComplexity, args["type"].(*string)), true

	case "Tournament.isOnline":
		if e.complexity.Tournament.IsOnline == nil {
			break
		}

		return e.complexity.Tournament.IsOnline(childComplexity), true

	case "Tournament.isRegistrationOpen":
		if e.complexity.Tournament.IsRegistrationOpen == nil {
			break
		}

		return e.complexity.Tournament.IsRegistrationOpen(childComplexity), true

	case "Tournament.lat":
		if e.complexity.Tournament.Lat == nil {
			break
		}

		return e.complexity.Tournament.Lat(childComplexity), true

	case "Tournament.links":
		if e.complexity.Tournament.Links == nil {
			break
		}

		return e.complexity.Tournament.Links(childComplexity), true

	case "Tournament.lng":
		if e.complexity.Tournament.Lng == nil {
			break
		}

		return e.complexity.Tournament.Lng(childComplexity), true

	case "Tournament.mapsPlaceId":
		if e.complexity.Tournament.MapsPlaceID == nil {
			break
		}

		return e.complexity.Tournament.MapsPlaceID(childComplexity), true

	case "Tournament.name":
		if e.complexity.Tournament.Name == nil {
			break
		}

		return e.complexity.Tournament.Name(childComplexity), true

	case "Tournament.numAttendees":
		if e.complexity.Tournament.NumAttendees == nil {
			break
		}

		return e.complexity.Tournament.NumAttendees(childComplexity), true

	case "Tournament.owner":
		if e.complexity.Tournament.Owner == nil {
			break
		}

		return e.complexity.Tournament.Owner(childComplexity), true

	case "Tournament.participants":
		if e.complexity.Tournament.Participants == nil {
			break
		}

		args, err := ec.field_Tournament_participants_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Tournament.Participants(childComplexity, args["query"].(model.ParticipantPaginationQuery), args["isAdmin"].(*bool)), true

	case "Tournament.postalCode":
		if e.complexity.Tournament.PostalCode == nil {
			break
		}

		return e.complexity.Tournament.PostalCode(childComplexity), true

	case "Tournament.primaryContact":
		if e.complexity.Tournament.PrimaryContact == nil {
			break
		}

		return e.complexity.Tournament.PrimaryContact(childComplexity), true

	case "Tournament.primaryContactType":
		if e.complexity.Tournament.PrimaryContactType == nil {
			break
		}

		return e.complexity.Tournament.PrimaryContactType(childComplexity), true

	case "Tournament.publishing":
		if e.complexity.Tournament.Publishing == nil {
			break
		}

		return e.complexity.Tournament.Publishing(childComplexity), true

	case "Tournament.registrationClosesAt":
		if e.complexity.Tournament.RegistrationClosesAt == nil {
			break
		}

		return e.complexity.Tournament.RegistrationClosesAt(childComplexity), true

	case "Tournament.rules":
		if e.complexity.Tournament.Rules == nil {
			break
		}

		return e.complexity.Tournament.Rules(childComplexity), true

	case "Tournament.shortSlug":
		if e.complexity.Tournament.ShortSlug == nil {
			break
		}

		return e.complexity.Tournament.ShortSlug(childComplexity), true

	case "Tournament.slug":
		if e.complexity.Tournament.Slug == nil {
			break
		}

		return e.complexity.Tournament.Slug(childComplexity), true

	case "Tournament.startAt":
		if e.complexity.Tournament.StartAt == nil {
			break
		}

		return e.complexity.Tournament.StartAt(childComplexity), true

	case "Tournament.state":
		if e.complexity.Tournament.State == nil {
			break
		}

		return e.complexity.Tournament.State(childComplexity), true

	case "Tournament.stations":
		if e.complexity.Tournament.Stations == nil {
			break
		}

		args, err := ec.field_Tournament_stations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Tournament.Stations(childComplexity, args["page"].(*int), args["perPage"].(*int)), true

	case "Tournament.streamQueue":
		if e.complexity.Tournament.StreamQueue == nil {
			break
		}

		return e.complexity.Tournament.StreamQueue(childComplexity), true

	case "Tournament.streams":
		if e.complexity.Tournament.Streams == nil {
			break
		}

		return e.complexity.Tournament.Streams(childComplexity), true

	case "Tournament.teamCreationClosesAt":
		if e.complexity.Tournament.TeamCreationClosesAt == nil {
			break
		}

		return e.complexity.Tournament.TeamCreationClosesAt(childComplexity), true

	case "Tournament.teams":
		if e.complexity.Tournament.Teams == nil {
			break
		}

		args, err := ec.field_Tournament_teams_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Tournament.Teams(childComplexity, args["query"].(model.TeamsPaginationQuery)), true

	case "Tournament.timezone":
		if e.complexity.Tournament.Timezone == nil {
			break
		}

		return e.complexity.Tournament.Timezone(childComplexity), true

	case "Tournament.tournamentType":
		if e.complexity.Tournament.TournamentType == nil {
			break
		}

		return e.complexity.Tournament.TournamentType(childComplexity), true

	case "Tournament.url":
		if e.complexity.Tournament.URL == nil {
			break
		}

		args, err := ec.field_Tournament_url_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Tournament.URL(childComplexity, args["tab"].(*string), args["relative"].(*bool)), true

	case "Tournament.updatedAt":
		if e.complexity.Tournament.UpdatedAt == nil {
			break
		}

		return e.complexity.Tournament.UpdatedAt(childComplexity), true

	case "Tournament.venueAddress":
		if e.complexity.Tournament.VenueAddress == nil {
			break
		}

		return e.complexity.Tournament.VenueAddress(childComplexity), true

	case "Tournament.venueName":
		if e.complexity.Tournament.VenueName == nil {
			break
		}

		return e.complexity.Tournament.VenueName(childComplexity), true

	case "Tournament.waves":
		if e.complexity.Tournament.Waves == nil {
			break
		}

		return e.complexity.Tournament.Waves(childComplexity), true

	case "TournamentConnection.nodes":
		if e.complexity.TournamentConnection.Nodes == nil {
			break
		}

		return e.complexity.TournamentConnection.Nodes(childComplexity), true

	case "TournamentConnection.pageInfo":
		if e.complexity.TournamentConnection.PageInfo == nil {
			break
		}

		return e.complexity.TournamentConnection.PageInfo(childComplexity), true

	case "TournamentLinks.discord":
		if e.complexity.TournamentLinks.Discord == nil {
			break
		}

		return e.complexity.TournamentLinks.Discord(childComplexity), true

	case "TournamentLinks.facebook":
		if e.complexity.TournamentLinks.Facebook == nil {
			break
		}

		return e.complexity.TournamentLinks.Facebook(childComplexity), true

	case "User.authorizations":
		if e.complexity.User.Authorizations == nil {
			break
		}

		args, err := ec.field_User_authorizations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Authorizations(childComplexity, args["types"].([]*model.SocialConnectionType)), true

	case "User.bio":
		if e.complexity.User.Bio == nil {
			break
		}

		return e.complexity.User.Bio(childComplexity), true

	case "User.birthday":
		if e.complexity.User.Birthday == nil {
			break
		}

		return e.complexity.User.Birthday(childComplexity), true

	case "User.events":
		if e.complexity.User.Events == nil {
			break
		}

		args, err := ec.field_User_events_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Events(childComplexity, args["query"].(*model.UserEventsPaginationQuery)), true

	case "User.genderPronoun":
		if e.complexity.User.GenderPronoun == nil {
			break
		}

		return e.complexity.User.GenderPronoun(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.images":
		if e.complexity.User.Images == nil {
			break
		}

		args, err := ec.field_User_images_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Images(childComplexity, args["type"].(*string)), true

	case "User.leagues":
		if e.complexity.User.Leagues == nil {
			break
		}

		args, err := ec.field_User_leagues_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Leagues(childComplexity, args["query"].(*model.UserLeaguesPaginationQuery)), true

	case "User.location":
		if e.complexity.User.Location == nil {
			break
		}

		return e.complexity.User.Location(childComplexity), true

	case "User.name":
		if e.complexity.User.Name == nil {
			break
		}

		return e.complexity.User.Name(childComplexity), true

	case "User.player":
		if e.complexity.User.Player == nil {
			break
		}

		return e.complexity.User.Player(childComplexity), true

	case "User.slug":
		if e.complexity.User.Slug == nil {
			break
		}

		return e.complexity.User.Slug(childComplexity), true

	case "User.tournaments":
		if e.complexity.User.Tournaments == nil {
			break
		}

		args, err := ec.field_User_tournaments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Tournaments(childComplexity, args["query"].(*model.UserTournamentsPaginationQuery)), true

	case "Videogame.displayName":
		if e.complexity.Videogame.DisplayName == nil {
			break
		}

		return e.complexity.Videogame.DisplayName(childComplexity), true

	case "Videogame.id":
		if e.complexity.Videogame.ID == nil {
			break
		}

		return e.complexity.Videogame.ID(childComplexity), true

	case "Videogame.images":
		if e.complexity.Videogame.Images == nil {
			break
		}

		args, err := ec.field_Videogame_images_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Videogame.Images(childComplexity, args["type"].(*string)), true

	case "Videogame.name":
		if e.complexity.Videogame.Name == nil {
			break
		}

		return e.complexity.Videogame.Name(childComplexity), true

	case "Videogame.slug":
		if e.complexity.Videogame.Slug == nil {
			break
		}

		return e.complexity.Videogame.Slug(childComplexity), true

	case "VideogameConnection.nodes":
		if e.complexity.VideogameConnection.Nodes == nil {
			break
		}

		return e.complexity.VideogameConnection.Nodes(childComplexity), true

	case "VideogameConnection.pageInfo":
		if e.complexity.VideogameConnection.PageInfo == nil {
			break
		}

		return e.complexity.VideogameConnection.PageInfo(childComplexity), true

	case "Wave.id":
		if e.complexity.Wave.ID == nil {
			break
		}

		return e.complexity.Wave.ID(childComplexity), true

	case "Wave.identifier":
		if e.complexity.Wave.Identifier == nil {
			break
		}

		return e.complexity.Wave.Identifier(childComplexity), true

	case "Wave.startAt":
		if e.complexity.Wave.StartAt == nil {
			break
		}

		return e.complexity.Wave.StartAt(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/schema.graphqls", Input: `  """
Specify a query to be read from gql-public. Will use the configured cacheAge on
the query resolve configuration, or the override value passed through the
directive as publicCache(cacheAge: INT) argument.
"""
    directive @publicCache(
    """Optional override for the query-level cacheAge value."""
  cacheAge: Int
              ) on FIELD

              """
Specify a field to only be included in the response if the user is logged in.
"""
              directive @userData on FIELD

              """Represents the state of an activity"""
              enum ActivityState {
              """Activity is created"""
              CREATED

              """Activity is active or in progress"""
              ACTIVE

              """Activity is done"""
              COMPLETED

              """Activity is ready to be started"""
              READY

              """Activity is invalid"""
              INVALID

              """Activity, like a set, has been called to start"""
              CALLED

              """Activity is queued to run"""
              QUEUED
  }

    """A user's address"""
    type Address {
  id: ID
  city: String
  country: String
  countryId: Int
  state: String
  stateId: Int
  }

    """Represents the name of the third-party service (e.g Twitter) for OAuth"""
    enum AuthorizationType {
    TWITTER
    TWITCH
    STEAM
    DISCORD
    MIXER
  }

    """Bracket-specific configuration"""
    interface BracketConfig {
  id: ID
  bracketType: BracketType
  }

    """The type of Bracket format that a Phase is configured with."""
    enum BracketType {
    SINGLE_ELIMINATION
    DOUBLE_ELIMINATION
    ROUND_ROBIN
    SWISS
    EXHIBITION
    CUSTOM_SCHEDULE
    MATCHMAKING
    ELIMINATION_ROUNDS
    RACE
  }

    """Comparison operator"""
    enum Comparator {
    GREATER_THAN
    GREATER_THAN_OR_EQUAL
    EQUAL
    LESS_THAN_OR_EQUAL
    LESS_THAN
  }

    """Name, address, etc"""
    type ContactInfo {
  id: ID

        """Participant City Name"""
  city: String

          """Participant Country Name"""
  country: String

             """Participant Country (region) id"""
  countryId: Int
  name: String

          """First Name"""
  nameFirst: String

               """Last Name"""
  nameLast: String

              """Participant State Name"""
  state: String

           """Participant State (region) id"""
  stateId: Int

             """Zip or Postal Code"""
  zipcode: String
  }

    """An entrant in an event"""
    type Entrant {
  id: ID
  event: Event
  isDisqualified: Boolean

                    """
  The entrant name as it appears in bracket: gamerTag of the participant or team name
  """
  name: String
  participants: [Participant]
  seeds: [Seed]
  skill: Int

           """
  Standing for this entrant given an event. All entrants queried must be in the same event (for now).
  """
  standing: Standing
  stream: Streams @deprecated(reason: "DEPRECATED. Use streams instead, which supports multiple stream types and teams.")
  streams: [Streams]
  }

    type EntrantConnection {
  pageInfo: PageInfo
  nodes: [Entrant]
  }

    """An event in a tournament"""
    type Event {
  id: ID

        """How long before the event start will the check-in end (in seconds)"""
  checkInBuffer: Int

                   """How long the event check-in will last (in seconds)"""
  checkInDuration: Int

                     """Whether check-in is enabled for this event"""
  checkInEnabled: Boolean

                    """When the event was created (unix timestamp)"""
  createdAt: Timestamp

               """Last date attendees are able to create teams for team events"""
  deckSubmissionDeadline: Timestamp

                            """Maximum number of participants each Entrant can have"""
  entrantSizeMax: Int

                    """Minimum number of participants each Entrant can have"""
  entrantSizeMin: Int

                    """The entrants that belong to an event, paginated by filter criteria"""
  entrants(query: EventEntrantPageQuery): EntrantConnection

                                            """Whether the event has decks"""
  hasDecks: Boolean

              """Are player tasks enabled for this event"""
  hasTasks: Boolean
  images(type: String): [Image]

                          """Whether the event is an online event or not"""
  isOnline: Boolean

              """Markdown field for match rules/instructions"""
  matchRulesMarkdown: String

                        """Title of event set by organizer"""
  name: String

          """Gets the number of entrants in this event"""
  numEntrants: Int

                 """The phase groups that belong to an event."""
  phaseGroups: [PhaseGroup]

                 """The phases that belong to an event."""
                 phases(
                 """Filter phases by state. If not specified will default to all phases"""
  state: ActivityState

           """Optionally only return results for this phase"""
  phaseId: ID
  ): [Phase]

       """TO settings for prizing"""
  prizingInfo: JSON
  publishing: JSON

                """Markdown field for event rules/instructions"""
  rulesMarkdown: String

                   """Id of the event ruleset"""
  rulesetId: Int

               """Settings pulled from the event ruleset, if one exists"""
  rulesetSettings: JSON @deprecated(reason: "Use ruleset")

                                              """Paginated sets for this Event"""
                                              sets(
  page: Int
  perPage: Int

             """How to sort these sets"""
  sortType: SetSortType

              """Supported filter options to filter down set results."""
  filters: SetFilters
  ): SetConnection
  slug: String

          """Paginated list of standings"""
  standings(query: StandingPaginationQuery!): StandingConnection

                                                """When does this event start?"""
  startAt: Timestamp

             """The state of the Event."""
  state: ActivityState

           """Paginated stations on this event"""
  stations(query: StationFilter): StationsConnection

                                    """Last date attendees are able to create teams for team events"""
  teamManagementDeadline: Timestamp

                            """
  If this is a teams event, returns whether or not teams can set custom names
  """
  teamNameAllowed: Boolean
  tournament: Tournament

                """
  The type of the event, whether an entrant will have one participant or multiple
  """
  type: Int

          """When the event was last modified (unix timestamp)"""
  updatedAt: Timestamp

               """Whether the event uses the new EventSeeds for seeding"""
  useEventSeeds: Boolean
  videogame: Videogame

               """The waves being used by the event"""
               waves(
               """Waves filtered by phaseId, returns all if not set."""
  phaseId: ID
  ): [Wave]
  }

    type EventConnection {
  pageInfo: PageInfo
  nodes: [Event]
  }

    input EventEntrantPageQuery {
  page: Int
  perPage: Int
  sortBy: String
  filter: EventEntrantPageQueryFilter
  }

    input EventEntrantPageQueryFilter {
  name: String
  }

    """Name and Gamertag of the owner of an event in a league"""
    type EventOwner {
  eventId: ID
  email: String
  gamerTag: String
  fullName: String
  }

    type EventOwnerConnection {
  pageInfo: PageInfo
  nodes: [EventOwner]
  }

    input EventOwnersQuery {
  page: Int = 1
  perPage: Int = 25
  sortBy: String
  }

    """A game represents a single game within a set."""
    type Game {
  id: ID
  images(type: String): [Image]
  orderNum: Int

              """Selections for this game such as character, etc."""
  selections: [GameSelection]

                """The stage that this game was played on (if applicable)"""
  stage: Stage
  state: Int
  winnerId: Int
  }

    """A selection for this game. i.e. character/stage selection, etc"""
    type GameSelection {
  id: ID

        """The entrant who this selection is for"""
  entrant: Entrant
  orderNum: Int

              """
  The participant who this selection is for. This is only populated if there are
  selections for multiple participants of a single entrant
  """
  participant: Participant
  selectionType: GameSelectionType
  selectionValue: Int
  }

    """The type of selection i.e. is it for a character or something else"""
    enum GameSelectionType {
    """Character selection"""
    CHARACTER
  }

    """An image"""
    type Image {
  id: ID
  height: Float
  ratio: Float
  type: String
  url: String
  width: Float
  }

    """
The ` + "`" + `JSON` + "`" + ` scalar type represents JSON values as specified by
		[ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
    scalar JSON

    """A league"""
    type League {
  id: ID
  addrState: String
  city: String
  countryCode: String

                 """When the tournament was created (unix timestamp)"""
  createdAt: Timestamp
  currency: String

              """When the tournament ends"""
  endAt: Timestamp
  entrantCount: Int
  eventOwners(query: EventOwnersQuery): EventOwnerConnection

                                          """When does event registration close"""
  eventRegistrationClosesAt: Timestamp

                               """Paginated list of events in a league"""
  events(query: LeagueEventsQuery): EventConnection

                                      """Hacked "progression" into this final event"""
  finalEventId: Int

                  """True if tournament has at least one offline event"""
  hasOfflineEvents: Boolean
  hasOnlineEvents: Boolean
  hashtag: String
  images(type: String): [Image]

                          """True if tournament has at least one online event"""
  isOnline: Boolean
  lat: Float
  links: TournamentLinks
  lng: Float
  mapsPlaceId: String

                 """The tournament name"""
  name: String

          """Top X number of people in the standings who progress to final event"""
  numProgressingToFinalEvent: Int
  numUniquePlayers: Int
  postalCode: String
  primaryContact: String
  primaryContactType: String

                        """Publishing settings for this tournament"""
  publishing: JSON

                """When does registration for the tournament end"""
  registrationClosesAt: Timestamp
  rules: String

           """The short slug used to form the url"""
  shortSlug: String

               """Whether standings for this league should be visible"""
  showStandings: Boolean
  slug: String

          """Paginated list of standings"""
  standings(query: StandingGroupStandingPageFilter): StandingConnection

                                                       """When the tournament Starts"""
  startAt: Timestamp

             """
  State of the tournament, can be ActivityState::CREATED, ActivityState::ACTIVE, or ActivityState::COMPLETED
  """
  state: Int

           """When is the team creation deadline"""
  teamCreationClosesAt: Timestamp

                          """The timezone of the tournament"""
  timezone: String

              """The type of tournament from TournamentType"""
  tournamentType: Int

                    """When the tournament was last modified (unix timestamp)"""
  updatedAt: Timestamp

               """Build Tournament URL"""
               url(
               """Tournament tab to add to URL"""
  tab: String

         """
    Generate a relative URL. Defaults to true. Setting to false will generate an absolute URL
    """
  relative: Boolean = true
  ): String
  venueAddress: String
  venueName: String
  videogames: [Videogame]
  }

    type LeagueConnection {
  pageInfo: PageInfo
  nodes: [League]
  }

    input LeagueEventsFilter {
  tierIds: [ID]
  userId: ID
  upcoming: Boolean
  }

    input LeagueEventsQuery {
  page: Int = 1
  perPage: Int = 25
  sortBy: String
  filter: LeagueEventsFilter
  }

    input LocationFilterType {
  countryCode: String
  state: String
  city: String
  }

    """Match-level configuration"""
    interface MatchConfig {
  id: ID
  bracketType: BracketType
  }

    """
Different options available for verifying player-reported match results
"""
    enum MatchConfigVerificationMethod {
    TWITCH
    STREAM_ME
    ANY
    MIXER
    YOUTUBE
  }

    type Mutation {
    """Delete a phase by id"""
  deletePhase(phaseId: ID!): Boolean

                               """Delete a station by id"""
  deleteStation(stationId: ID!): Boolean

                                   """Delete a wave by id"""
  deleteWave(waveId: ID!): Boolean

                             """
  Automatically attempt to resolve all schedule conflicts. Returns a list of changed seeds
  """
  resolveScheduleConflicts(tournamentId: ID!, options: ResolveConflictsOptions): [Seed]

                                           """Swap two seed ids in a phase"""
  swapSeeds(phaseId: ID!, seed1Id: ID!, seed2Id: ID!): [Seed]

                       """Update set of phase groups in a phase"""
  updatePhaseGroups(groupConfigs: [PhaseGroupUpdateInput]!): [PhaseGroup]

                                    """Update the seeding for a phase"""
  updatePhaseSeeding(phaseId: ID!, seedMapping: [UpdatePhaseSeedInfo]!, options: UpdatePhaseSeedingOptions): Phase

                                                  """Create or update a Phase"""
  upsertPhase(phaseId: ID, eventId: ID, payload: PhaseUpsertInput!): Phase

                         """Add or update a station by id"""
  upsertStation(stationId: ID, tournamentId: ID, fields: StationUpsertInput!): Stations

                             """Add or update a wave by id"""
  upsertWave(waveId: ID, tournamentId: ID, fields: WaveUpsertInput!): Wave
  }

    type PageInfo {
  total: Int
  totalPages: Int
  page: Int
  perPage: Int
  sortBy: String
  filter: JSON
  }

    input PaginationSearchType {
  fieldsToSearch: [String]
  searchString: String
  }

    """A participant of a tournament; either a spectator or competitor"""
    type Participant {
  id: ID

        """If this participant was checked-in by admin"""
  checkedIn: Boolean

               """The time this participant was checked-in by admin"""
  checkedInAt: Timestamp

                 """Info for connected accounts to external services."""
  connectedAccounts: JSON

                       """
  Contact Info selected during registration. Falls back to User.location and/or
  User.name if necessary. These fields are for admin use only and do not respect
  user privacy settings. DO NOT display this information publicly.
  """
  contactInfo: ContactInfo

                 """
  Email of the user, only available to admins within 18 months of tournament
  """
  email: String
  entrants: [Entrant]

              """The events this participant registered for."""
  events: [Event]

            """The tag that was used in registration e.g. Mang0"""
  gamerTag: String
  images(type: String): [Image]
  player: Player

            """The prefix that was used in registration e.g. C9"""
  prefix: String

            """The user this participant is associated to."""
  user: User

          """If this participant is verified as actually being in the tournament"""
  verified: Boolean
  }

    type ParticipantConnection {
  pageInfo: PageInfo
  nodes: [Participant]
  }

    input ParticipantPageFilter {
  id: ID
  ids: [ID]
  eventIds: [ID]
  search: ParticipantSearch
  gamerTag: String
  unpaid: Boolean
  incompleteTeam: Boolean
  missingDeck: Boolean
  checkedIn: Boolean
  notCheckedIn: Boolean
  }

    input ParticipantPaginationQuery {
  page: Int = 1
  perPage: Int = 25
  sortBy: String
  filter: ParticipantPageFilter
  }

    input ParticipantSearch {
    """e.g. gamerTag, prefix"""
  fieldsToSearch: [String]
  searchString: String
  }

    """A phase in an event"""
    type Phase {
  id: ID

        """The bracket type of this phase."""
  bracketType: BracketType

                 """The Event that this phase belongs to"""
  event: Event

           """Number of phase groups in this phase"""
  groupCount: Int

                """Is the phase an exhibition or not."""
  isExhibition: Boolean

                  """Name of phase e.g. Round 1 Pools"""
  name: String

          """The number of seeds this phase contains."""
  numSeeds: Int
  paginatedSeeds(query: SeedPaginationQuery!, eventId: ID): SeedConnection @deprecated(reason: "Please use 'seeds' instead")

                          """Phase groups under this phase, paginated"""
  phaseGroups(query: PhaseGroupPageQuery): PhaseGroupConnection

                                             """The relative order of this phase within an event"""
  phaseOrder: Int

                """Paginated seeds for this phase"""
  seeds(query: SeedPaginationQuery!, eventId: ID): SeedConnection

                 """Paginated sets for this Phase"""
                 sets(
  page: Int
  perPage: Int

             """How to sort these sets"""
  sortType: SetSortType

              """Supported filter options to filter down set results."""
  filters: SetFilters
  ): SetConnection

       """State of the phase"""
  state: ActivityState
  waves: [Wave]
  }

    """A group within a phase"""
    type PhaseGroup {
  id: ID

        """The bracket type of this group's phase."""
  bracketType: BracketType

                 """Unique identifier for this group within the context of its phase"""
  displayIdentifier: String

                       """
  For the given phase group, this is the start time of the first round that occurs in the group.
  """
  firstRoundTime: Timestamp
  numRounds: Int
  paginatedSeeds(query: SeedPaginationQuery!, eventId: ID): SeedConnection @deprecated(reason: "Please use 'seeds', which is now paginated")

                          """Paginated sets on this phaseGroup"""
                          paginatedSets(
  page: Int
  perPage: Int

             """How to sort these sets"""
  sortType: SetSortType

              """Supported filter options to filter down set results."""
  filters: SetFilters
  ): SetConnection @deprecated(reason: "Please use 'sets', which is now paginated")

                                         """The phase associated with this phase group"""
  phase: Phase

           """The progressions out of this phase group"""
  progressionsOut: [Progression]
  rounds: [Round]
  seedMap: JSON

             """Paginated seeds for this phase group"""
  seeds(query: SeedPaginationQuery!, eventId: ID): SeedConnection

                 """Paginated sets on this phaseGroup"""
                 sets(
  page: Int
  perPage: Int

             """How to sort these sets"""
  sortType: SetSortType

              """Supported filter options to filter down set results."""
  filters: SetFilters
  ): SetConnection

       """Paginated list of standings"""
  standings(query: StandingGroupStandingPageFilter): StandingConnection

                                                       """
  Unix time the group is scheduled to start. This info could also be on the wave instead.
  """
  startAt: Timestamp
  state: Int
  tiebreakOrder: JSON
  wave: Wave
  }

    type PhaseGroupConnection {
  pageInfo: PageInfo
  nodes: [PhaseGroup]
  }

    input PhaseGroupPageQuery {
  page: Int
  perPage: Int
  sortBy: String
  entrantIds: [ID]
  filter: PhaseGroupPageQueryFilter
  }

    input PhaseGroupPageQueryFilter {
  id: [ID]
  waveId: ID
  }

    input PhaseGroupUpdateInput {
  phaseGroupId: ID!
  stationId: ID
  waveId: ID
  }

    input PhaseUpsertInput {
    """
    The name of the Phase. For example, "Top 8" or "Pools"
    """
  name: String

    """
    The number of pools to configure for the Phase. Only applies to brackets that support pools
    """
  groupCount: Int
  bracketType: BracketType
  }

    """A player"""
    type Player {
  id: ID
  gamerTag: String
  prefix: String

            """Most recent active & published rankings"""
  rankings(limit: Int, videogameId: ID): [PlayerRank]

                    """Recent sets for this player."""
                    recentSets(
                    """Use this to get H2H history between two players"""
  opponentId: ID
  ): [Set] @deprecated(reason: "Use the sets field instead.")

                                 """Set history for this player."""
                                 sets(
  page: Int
  perPage: Int

             """Supported filter options to filter down set results."""
  filters: SetFilters
  ): SetConnection
  user: User
  }

    """A player's ranks"""
    type PlayerRank {
  id: ID

        """The player's placement on the ranking"""
  rank: Int
  title: String
  }

    """An OAuth ProfileAuthorization object"""
    type ProfileAuthorization {
  id: ID

        """
  The username given by the external service (including discriminator if discord)
  """
  externalUsername: String
  stream: Stream

            """
  The name of the external service providing this auth i.e. "twitch"
            """
  type: AuthorizationType
  url: String
  }

    """
    A connection between a placement in an origin phase group to a destination seed.
    """
    type Progression {
  id: ID
  originOrder: Int
  originPhase: Phase
  originPhaseGroup: PhaseGroup
  originPlacement: Int
  }

    type Query {
    """Returns the authenticated user"""
  currentUser: User

                 """Returns an event given its id or slug"""
  event(id: ID, slug: String): Event

              """Returns a league given its id or slug"""
  league(id: ID, slug: String): League

               """Returns a participant given its id"""
  participant(id: ID!, isAdmin: Boolean): Participant

                    """Returns a phase given its id"""
  phase(id: ID): Phase

                   """Returns a phase group given its id"""
  phaseGroup(id: ID): PhaseGroup

                        """Returns a player given an id"""
  player(id: ID!): Player

                     """Returns a phase seed given its id"""
  seed(id: ID): Seed

                  """Returns a set given its id"""
  set(id: ID!): Set

                  """A shop entity"""
  shop(id: ID, slug: String): Shop

             """Returns an stream given its id"""
  stream(id: ID!): Streams

                     """Returns all the stream queues for a given tournament"""
  streamQueue(tournamentId: ID!, includePlayerStreams: Boolean): [StreamQueue]

                              """Returns a tournament given its id or slug"""
  tournament(id: ID, slug: String): Tournament

                   """Paginated, filterable list of tournaments"""
  tournaments(query: TournamentQuery!): TournamentConnection

                                          """Returns a user given a user slug of the form user/abc123, or id"""
  user(id: ID, slug: String): User

             """Returns a videogame given its id"""
  videogame(id: ID): Videogame

                       """Returns paginated list of videogames matching the search criteria."""
  videogames(query: VideogameQuery!): VideogameConnection
  }

    """Race specific bracket configuration"""
    type RaceBracketConfig implements BracketConfig {
  automaticEndTime: Timestamp
  id: ID
  automaticStartTime: Timestamp
  bracketType: BracketType
  goalTargetComparator: Comparator
  goalTargetValue: String
  limitMode: RaceLimitMode
  limitValue: Int
  raceType: RaceType
  }

    """Enforces limits on the amount of allowable Race submissions"""
    enum RaceLimitMode {
    BEST_ALL
    FIRST_ALL
    PLAYTIME
  }

    """Race specific match configuration"""
    type RaceMatchConfig implements MatchConfig {
  id: ID
  bracketType: BracketType

                 """Can players report results?"""
  playerReportingEnabled: Boolean

                            """Accepted methods of verification that players can use"""
  verificationMethods: [MatchConfigVerificationMethod]

                         """Are players required to submit verification of their reported results?"""
  verificationRequired: Boolean
  }

    """Race type"""
    enum RaceType {
    GOALS
    TIMED
  }

    input ResolveConflictsLockedSeedConfig {
  eventId: ID!
  numSeeds: Int!
  }

    input ResolveConflictsOptions {
  lockedSeeds: [ResolveConflictsLockedSeedConfig]
  }

    """A round within a phase group"""
    type Round {
  id: ID

        """
  If applicable, bestOf is the number of games
  									one must win a majority out of to win a set in this round
  """
  bestOf: Int

            """Indicates this round's order in the phase group"""
  number: Int

            """The time that this round is scheduled to start at"""
  startAt: Timestamp
  }

    """
The score that led to this standing being awarded. The meaning of this field can
vary by standing type and is not used for some standing types.
"""
    type Score {
    """
    The name of this score. e.g. "Kills" or "Stocks"
    """
  label: String

    """The raw score value"""
  value: Float

           """
  Like value, but formatted for race format events. Formatted according to the race config for the front end to use.
  """
  displayValue: String
  }

    """A seed for an entrant"""
    type Seed {
  id: ID

        """Map of Participant ID to checked in boolean"""
  checkedInParticipants: JSON
  entrant: Entrant
  groupSeedNum: Int
  isBye: Boolean
  phase: Phase
  phaseGroup: PhaseGroup
  placeholderName: String
  placement: Int

               """The player(s) associated with this seed's entrant"""
  players: [Player]
  progressionSeedId: Int

                       """Source progression information"""
  progressionSource: Progression
  seedNum: Int

             """
  Entrant's win/loss record for this standing. Scores do not include byes.
  """
  setRecordWithoutByes(phaseGroupId: ID!): JSON
                                             standings(
                                             """
    The container of the standing groups to get standings for. If null, will return all standings.
    """
  containerType: String
  ): [Standing]
  }

    type SeedConnection {
  pageInfo: PageInfo
  nodes: [Seed]
  }

    input SeedPageFilter {
  id: ID
  entrantName: String
  checkInState: Int
  phaseGroupId: [ID]
  phaseId: [ID]
  eventId: ID
  search: SeedSearch
  }

    input SeedPaginationQuery {
  page: Int = 1
  perPage: Int = 25
  sortBy: String
  filter: SeedPageFilter
  }

    input SeedSearch {
  fieldsToSearch: [String]
  searchString: String
  }

    """A set"""
    type Set {
  id: ID

        """The time this set was marked as completed"""
  completedAt: Timestamp

                 """The time this set was created"""
  createdAt: Timestamp
  displayScore(mainEntrantId: ID): String

                                     """Event that this set belongs to."""
  event: Event

           """Full round text of this set."""
  fullRoundText: String
  game(orderNum: Int!): Game
  games: [Game]

           """Whether this set contains a placeholder entrant"""
  hasPlaceholder: Boolean

                    """
  The letters that describe a unique identifier within the pool. Eg. F, AT
  """
  identifier: String
  images(type: String): [Image]
  lPlacement: Int

                """Phase group that this Set belongs to."""
  phaseGroup: PhaseGroup

                """The round number of the set. Negative numbers are losers bracket"""
  round: Int

           """
  Indicates whether the set is in best of or total games mode. This instructs
  which field is used to figure out how many games are in this set.
  """
  setGamesType: Int

                  """
  A possible spot in a set. Use this to get all entrants in a set. Use this for all bracket types (FFA, elimination, etc)
  """
  slots(includeByes: Boolean = false): [SetSlot]
  startedAt: Timestamp
  state: Int

           """Tournament event station for a set"""
  station: Stations

             """Tournament event stream for a set"""
  stream: Streams

            """
  If setGamesType is in total games mode, this defined the number of games in the set.
  """
  totalGames: Int

                """Url of a VOD for this set"""
  vodUrl: String
  wPlacement: Int
  winnerId: Int
  }

    type SetConnection {
  pageInfo: PageInfo
  nodes: [Set]
  }

    """Filter Sets by geographical constraints."""
    input SetFilterLocation {
    """Only return Sets in this state. Only applicable to US states"""
  state: String

           """
  Only return Sets in this country. Expects a valid two-letter country code
  """
  country: String
  distanceFrom: SetFilterLocationDistanceFrom
  }

    """
Only return Sets that are a certain distance away from a specified point
"""
    input SetFilterLocationDistanceFrom {
    """Point at which to perform distance calculation"""
  point: SetFilterLocationDistanceFromPoint

           """Distance from the point to include results in"""
  radius: String
  }

    input SetFilterLocationDistanceFromPoint {
  lat: Float
  lon: Float
  }

    input SetFilters {
    """Only return Sets for these Entrants"""
  entrantIds: [ID]

                """
  Only return Sets for this Entrant size. For example, to fetch 1v1 Sets only, filter by an entrantSize of 1
  """
  entrantSize: [Int]

                 """Only return Sets that have an attached VOD"""
  hasVod: Boolean

            """
  Do not return empty Sets. For example, set this to true to filter out sets that are waiting for progressions.
  """
  hideEmpty: Boolean

               """Return sets that contain a bye"""
  showByes: Boolean

              """
  Only return Sets that are in an Online event. If omitted, Sets for both online and offline Events are returned
  """
  isEventOnline: Boolean

                   """Only return Sets in certain geographical areas."""
  location: SetFilterLocation

              """Only return Sets for these Participants"""
  participantIds: [ID]

                    """Only return Sets in these PhaseGroups"""
  phaseGroupIds: [ID]

                   """Only return Sets in these Phases"""
  phaseIds: [ID]

              """Only return Sets for these Players"""
  playerIds: [ID]

               """Only return Sets for these Rounds"""
  roundNumber: Int

                 """Only returns Sets that are in these states"""
  state: [Int]

           """Only return Sets that are assigned to these Station IDs"""
  stationIds: [ID]

                """Only return Sets that are assigned to these Station numbers"""
  stationNumbers: [Int]
  }

    """
A slot in a set where a seed currently or will eventually exist in order to participate in the set.
"""
    type SetSlot {
  id: ID
  entrant: Entrant

             """Pairs with prereqType, is the ID of the prereq."""
  prereqId: String

              """
  Given a set prereq type, defines the placement required in the origin set to end up in this slot.
  """
  prereqPlacement: Int

                     """Describes where the entity in this slot comes from."""
  prereqType: String
  seed: Seed

          """The index of the slot. Unique per set."""
  slotIndex: Int

               """
  The standing within this set for the seed currently assigned to this slot.
  """
  standing: Standing
  }

    """Different sort type configurations used when displaying multiple sets"""
    enum SetSortType {
    """Sets will not be sorted."""
    NONE

    """
  Sets are sorted in the suggested order that they be called to be played. The order of completed sets is reversed.
  """
    CALL_ORDER

    """
  Sets are sorted by relevancy dependent on the state and progress of the event.
  """
    MAGIC

    """Sets are sorted in the order that they were started."""
    RECENT

    """Deprecated. This is equivalent to CALL_ORDER"""
    STANDARD
  }

    """A shop"""
    type Shop {
  id: ID
  levels(query: ShopLevelsQuery): ShopLevelConnection
  messages(query: ShopOrderMessagesQuery): ShopOrderMessageConnection
  name: String
  slug: String
  url: String
  }

    """A shop level"""
    type ShopLevel {
  id: ID
  currAmount: Float
  description: String
  goalAmount: Float
  images(type: String): [Image]
  name: String
  }

    type ShopLevelConnection {
  pageInfo: PageInfo
  nodes: [ShopLevel]
  }

    input ShopLevelsQuery {
  page: Int = 1
  perPage: Int = 25
  sortBy: String
  }

    """The message and player info for a shop order"""
    type ShopOrderMessage {
  id: ID

        """The player's gamertag. Returns null if anonymous message type"""
  gamertag: String

              """The order message"""
  message: String

             """The player's name. Returns null unless name & tag display is selected"""
  name: String

          """The player who left the comment"""
  player: Player

            """The total order amount"""
  total: Float
  }

    type ShopOrderMessageConnection {
  pageInfo: PageInfo
  nodes: [ShopOrderMessage]
  }

    input ShopOrderMessagesQuery {
  page: Int = 1
  perPage: Int = 25
  sortBy: String
  }

    """
Represents the name of the third-party social service (e.g Twitter) for OAuth
"""
    enum SocialConnectionType {
    TWITTER
    TWITCH
    DISCORD
    MIXER
  }

    """Video Stage"""
    type Stage {
  id: ID

        """Stage name"""
  name: String
  }

    """A standing indicates the placement of something within a container."""
    type Standing {
    """
    The containing entity that contextualizes this standing. Event standings, for
    example, represent an entrant's standing in the entire event vs. Set standings
    which is an entrant's standing in only a single set within an event.
    """
  container: StandingContainer
  id: ID

    """
    If the entity this standing is assigned to can be resolved into an entrant, this will provide the entrant.
    """
  entrant: Entrant
  isFinal: Boolean

    """
    Metadata that goes along with this standing. Can take on different forms based on standing group type and settings.
    """
  metadata: JSON
  placement: Int

    """The player(s) tied to this standing's entity"""
  player: Player
  standing: Int @deprecated(reason: "The \"placement\" field is identical and will eventually replace \"standing\"")
  stats: StandingStats
  }

    type StandingConnection {
  pageInfo: PageInfo
  nodes: [Standing]
  }

    """The containing entity that this standing is for"""
    union StandingContainer = Tournament | Event | PhaseGroup | Set

    input StandingGroupStandingPageFilter {
  page: Int
  perPage: Int
  sortBy: String
  }

    input StandingPageFilter {
  id: ID
  ids: [ID]
  search: PaginationSearchType
  }

    input StandingPaginationQuery {
  page: Int = 1
  perPage: Int = 25
  sortBy: String
  filter: StandingPageFilter
  }

    """
Any stats related to this standing. This type is experimental and very likely to change in the future.
"""
    type StandingStats {
  score: Score
  }

    input StationFilter {
  page: Int
  perPage: Int
  }

    """Stations, such as a stream setup, at an event"""
    type Stations {
  id: ID
  canAutoAssign: Boolean
  clusterNumber: String
  clusterPrefix: Int
  enabled: Boolean
  identifier: Int
  numSetups: Int
  number: Int
  prefix: String
  queue: JSON
  queueDepth: Int
  state: Int
  updatedAt: Timestamp
  }

    type StationsConnection {
  pageInfo: PageInfo
  nodes: [Stations]
  }

    input StationUpsertInput {
  number: Int!
  clusterId: ID
  }

    """A Stream object"""
    type Stream {
  id: ID

        """Whether the stream is currently live. May be slightly delayed."""
  isOnline: Boolean

              """The name of the stream"""
  name: String

          """
  The name of the external service providing this auth i.e. "twitch"
          """
  type: StreamType
  }

    """A Stream queue object"""
    type StreamQueue {
  id: String

        """The sets on the stream"""
  sets: [Set]

          """The stream on the queue"""
  stream: Streams
  }

    """Tournament Stream"""
    type Streams {
  id: ID
  enabled: Boolean
  followerCount: Int
  isOnline: Boolean
  numSetups: Int
  parentStreamId: Int
  streamGame: String
  streamId: String
  streamLogo: String
  streamName: String
  streamSource: StreamSource
  streamStatus: String
  streamType: Int
  streamTypeId: Int
  }

    """Represents the source of a stream"""
    enum StreamSource {
    """Stream is on twitch.tv channel"""
    TWITCH

    """Stream is on smashcast.tv channel"""
    HITBOX

    """Stream is on a stream.me channel"""
    STREAMME

    """Stream is on a mixer.com channel"""
    MIXER
  }

    """Represents the type of stream service"""
    enum StreamType {
    TWITCH
    MIXER
  }

    """A team, usually within the context of an event"""
    type Team {
  id: ID
  entrant: Entrant
  event: Event
  name: String
  }

    type TeamConnection {
  pageInfo: PageInfo
  nodes: [Team]
  }

    input TeamsPageFilter {
  id: ID
  eventId: ID
  tournamentId: ID
  eventIds: [ID]
  incompleteTeam: Boolean
  search: JSON
  }

    input TeamsPaginationQuery {
  page: Int = 1
  perPage: Int = 25
  sortBy: String
  filter: TeamsPageFilter
  }

    """
Represents a Unix Timestamp. Supports up to 53 bit int values,
		as that is JavaScript's internal memory allocation for integer values.
"""
    scalar Timestamp

    input TopGameFilter {
    """
    Array of which # top game you want to filter on.e.g. [2, 3] will filter on the 2nd and 3rd top games
    """
  gameNums: [Int]
  }

    """A tournament"""
    type Tournament {
  id: ID
  addrState: String

               """Admin-only view of admins for this tournament"""
               admins(
               """Which roles to show"""
  roles: [String]
  ): [User]
  city: String
  countryCode: String

                 """When the tournament was created (unix timestamp)"""
  createdAt: Timestamp
  currency: String

              """When the tournament ends"""
  endAt: Timestamp

           """When does event registration close"""
  eventRegistrationClosesAt: Timestamp
  events(limit: Int): [Event]

                        """True if tournament has at least one offline event"""
  hasOfflineEvents: Boolean
  hasOnlineEvents: Boolean
  hashtag: String
  images(type: String): [Image]

                          """True if tournament has at least one online event"""
  isOnline: Boolean

              """Is tournament registration open"""
  isRegistrationOpen: Boolean
  lat: Float
  links: TournamentLinks
  lng: Float
  mapsPlaceId: String

                 """The tournament name"""
  name: String

          """Number of attendees including spectators, if public"""
  numAttendees: Int

                  """The user who created the tournament"""
  owner: User

           """Paginated, queryable list of participants"""
  participants(query: ParticipantPaginationQuery!, isAdmin: Boolean): ParticipantConnection
  postalCode: String
  primaryContact: String
  primaryContactType: String

                        """Publishing settings for this tournament"""
  publishing: JSON

                """When does registration for the tournament end"""
  registrationClosesAt: Timestamp
  rules: String

           """The short slug used to form the url"""
  shortSlug: String

               """The slug used to form the url"""
  slug: String

          """When the tournament Starts"""
  startAt: Timestamp

             """
  State of the tournament, can be ActivityState::CREATED, ActivityState::ACTIVE, or ActivityState::COMPLETED
  """
  state: Int
  stations(page: Int, perPage: Int): StationsConnection
  streamQueue: [StreamQueue]
  streams: [Streams]

             """When is the team creation deadline"""
  teamCreationClosesAt: Timestamp

                          """Paginated, queryable list of teams"""
  teams(query: TeamsPaginationQuery!): TeamConnection

                                         """The timezone of the tournament"""
  timezone: String

              """The type of tournament from TournamentType"""
  tournamentType: Int

                    """When the tournament was last modified (unix timestamp)"""
  updatedAt: Timestamp

               """Build Tournament URL"""
               url(
               """Tournament tab to add to URL"""
  tab: String

         """
    Generate a relative URL. Defaults to true. Setting to false will generate an absolute URL
    """
  relative: Boolean = true
  ): String
  venueAddress: String
  venueName: String

               """List of all waves in this tournament"""
  waves: [Wave]
  }

    type TournamentConnection {
  pageInfo: PageInfo
  nodes: [Tournament]
  }

    type TournamentLinks {
  facebook: String
  discord: String
  }

    input TournamentLocationFilter {
    """Latitude, Longitude"""
  distanceFrom: String

                  """e.g. 50mi"""
  distance: String
  }

    input TournamentPageFilter {
  id: ID
  ids: [ID]

         """ID of the user that owns this tournament."""
  ownerId: ID
  countryCode: String
  addrState: String
  location: TournamentLocationFilter
  afterDate: Timestamp
  beforeDate: Timestamp
  computedUpdatedAt: Timestamp
  name: String
  venueName: String
  isFeatured: Boolean
  isLeague: Boolean
  hasBannerImages: Boolean
  activeShops: Boolean
  regOpen: Boolean
  past: Boolean
  published: Boolean
  staffPicks: Boolean
  hasOnlineEvents: Boolean
  topGames: TopGameFilter
  upcoming: Boolean
  videogameIds: [ID]
  }

    enum TournamentPaginationSort {
    startAt
    endAt
    eventRegistrationClosesAt
    computedUpdatedAt
    }

    input TournamentQuery {
  page: Int = 1
  perPage: Int = 25
  sortBy: String
  filter: TournamentPageFilter
  sort: TournamentPaginationSort
  }

    input UpdatePhaseSeedInfo {
  seedId: ID!
  seedNum: ID!
  phaseGroupId: ID
  }

    input UpdatePhaseSeedingOptions {
    """
    Validate that seedMapping exactly accounts for all entrants in the phase
    """
  strictMode: Boolean
  }

    """A user"""
    type User {
  id: ID

        """Authorizations to external services (i.e. Twitch, Twitter)"""
  authorizations(types: [SocialConnectionType]): [ProfileAuthorization]
  bio: String

         """Public facing user birthday that respects user publishing settings"""
  birthday: String

              """Events this user has competed in"""
  events(query: UserEventsPaginationQuery): EventConnection
  genderPronoun: String
  images(type: String): [Image]

                          """Leagues this user has competed in"""
  leagues(query: UserLeaguesPaginationQuery): LeagueConnection

                                                """Public location info for this user"""
  location: Address

              """Public facing user name that respects user publishing settings"""
  name: String

          """player for user"""
  player: Player
  slug: String

          """Tournaments this user is organizing or competing in"""
  tournaments(query: UserTournamentsPaginationQuery): TournamentConnection
  }

    input UserEventsPaginationFilter {
  videogameId: [ID]
  eventType: Int
  minEntrantCount: Int
  maxEntrantCount: Int
  location: LocationFilterType
  search: PaginationSearchType
  }

    input UserEventsPaginationQuery {
  page: Int = 1
  perPage: Int = 25
  sortBy: String
  filter: UserEventsPaginationFilter
  }

    input UserLeaguesPaginationFilter {
  videogameId: [ID]
  upcoming: Boolean
  past: Boolean
  search: PaginationSearchType
  }

    input UserLeaguesPaginationQuery {
  page: Int = 1
  perPage: Int = 25
  sortBy: String
  filter: UserLeaguesPaginationFilter
  }

    input UserTournamentsPaginationFilter {
  past: Boolean
  upcoming: Boolean
  search: PaginationSearchType
  videogameId: [ID]
  tournamentView: String
  }

    input UserTournamentsPaginationQuery {
  page: Int = 1
  perPage: Int = 25
  sortBy: String
  filter: UserTournamentsPaginationFilter
  }

    """A videogame"""
    type Videogame {
  id: ID
  displayName: String
  images(type: String): [Image]
  name: String
  slug: String
  }

    type VideogameConnection {
  pageInfo: PageInfo
  nodes: [Videogame]
  }

    input VideogamePageFilter {
  id: [ID]
  name: String
  forUser: ID
  }

    input VideogameQuery {
  page: Int = 1
  perPage: Int = 25
  sortBy: String
  filter: VideogamePageFilter
  }

    """A wave in a tournament"""
    type Wave {
  id: ID

        """The Wave Identifier"""
  identifier: String

                """Unix time the wave is scheduled to start."""
  startAt: Timestamp
  }

    input WaveUpsertInput {
  identifier: String!
  startAt: Timestamp!
  endAt: Timestamp!
  }

`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_publicCache_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["cacheAge"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cacheAge"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cacheAge"] = arg0
	return args, nil
}

func (ec *executionContext) field_Event_entrants_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventEntrantPageQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOEventEntrantPageQuery2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEventEntrantPageQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Event_images_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg0
	return args, nil
}

func (ec *executionContext) field_Event_phases_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ActivityState
	if tmp, ok := rawArgs["state"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
		arg0, err = ec.unmarshalOActivityState2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐActivityState(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["state"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["phaseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phaseId"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phaseId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Event_sets_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["perPage"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["perPage"] = arg1
	var arg2 *model.SetSortType
	if tmp, ok := rawArgs["sortType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortType"))
		arg2, err = ec.unmarshalOSetSortType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetSortType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sortType"] = arg2
	var arg3 *model.SetFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg3, err = ec.unmarshalOSetFilters2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg3
	return args, nil
}

func (ec *executionContext) field_Event_standings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.StandingPaginationQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalNStandingPaginationQuery2githubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStandingPaginationQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Event_stations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.StationFilter
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOStationFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStationFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Event_waves_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["phaseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phaseId"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phaseId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Game_images_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg0
	return args, nil
}

func (ec *executionContext) field_League_eventOwners_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EventOwnersQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOEventOwnersQuery2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEventOwnersQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_League_events_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LeagueEventsQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOLeagueEventsQuery2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐLeagueEventsQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_League_images_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg0
	return args, nil
}

func (ec *executionContext) field_League_standings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.StandingGroupStandingPageFilter
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOStandingGroupStandingPageFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStandingGroupStandingPageFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_League_url_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["tab"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tab"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tab"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["relative"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("relative"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["relative"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePhase_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["phaseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phaseId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phaseId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteStation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["stationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stationId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["stationId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteWave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["waveId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("waveId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["waveId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_resolveScheduleConflicts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["tournamentId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tournamentId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tournamentId"] = arg0
	var arg1 *model.ResolveConflictsOptions
	if tmp, ok := rawArgs["options"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("options"))
		arg1, err = ec.unmarshalOResolveConflictsOptions2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐResolveConflictsOptions(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["options"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_swapSeeds_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["phaseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phaseId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phaseId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["seed1Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seed1Id"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["seed1Id"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["seed2Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seed2Id"))
		arg2, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["seed2Id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePhaseGroups_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.PhaseGroupUpdateInput
	if tmp, ok := rawArgs["groupConfigs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupConfigs"))
		arg0, err = ec.unmarshalNPhaseGroupUpdateInput2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhaseGroupUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["groupConfigs"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePhaseSeeding_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["phaseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phaseId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phaseId"] = arg0
	var arg1 []*model.UpdatePhaseSeedInfo
	if tmp, ok := rawArgs["seedMapping"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seedMapping"))
		arg1, err = ec.unmarshalNUpdatePhaseSeedInfo2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUpdatePhaseSeedInfo(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["seedMapping"] = arg1
	var arg2 *model.UpdatePhaseSeedingOptions
	if tmp, ok := rawArgs["options"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("options"))
		arg2, err = ec.unmarshalOUpdatePhaseSeedingOptions2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUpdatePhaseSeedingOptions(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["options"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_upsertPhase_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["phaseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phaseId"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phaseId"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["eventId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventId"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["eventId"] = arg1
	var arg2 model.PhaseUpsertInput
	if tmp, ok := rawArgs["payload"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payload"))
		arg2, err = ec.unmarshalNPhaseUpsertInput2githubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhaseUpsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["payload"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_upsertStation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["stationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stationId"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["stationId"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["tournamentId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tournamentId"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tournamentId"] = arg1
	var arg2 model.StationUpsertInput
	if tmp, ok := rawArgs["fields"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fields"))
		arg2, err = ec.unmarshalNStationUpsertInput2githubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStationUpsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fields"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_upsertWave_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["waveId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("waveId"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["waveId"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["tournamentId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tournamentId"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tournamentId"] = arg1
	var arg2 model.WaveUpsertInput
	if tmp, ok := rawArgs["fields"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fields"))
		arg2, err = ec.unmarshalNWaveUpsertInput2githubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐWaveUpsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fields"] = arg2
	return args, nil
}

func (ec *executionContext) field_Participant_images_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg0
	return args, nil
}

func (ec *executionContext) field_PhaseGroup_paginatedSeeds_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SeedPaginationQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalNSeedPaginationQuery2githubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSeedPaginationQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["eventId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventId"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["eventId"] = arg1
	return args, nil
}

func (ec *executionContext) field_PhaseGroup_paginatedSets_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["perPage"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["perPage"] = arg1
	var arg2 *model.SetSortType
	if tmp, ok := rawArgs["sortType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortType"))
		arg2, err = ec.unmarshalOSetSortType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetSortType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sortType"] = arg2
	var arg3 *model.SetFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg3, err = ec.unmarshalOSetFilters2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg3
	return args, nil
}

func (ec *executionContext) field_PhaseGroup_seeds_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SeedPaginationQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalNSeedPaginationQuery2githubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSeedPaginationQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["eventId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventId"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["eventId"] = arg1
	return args, nil
}

func (ec *executionContext) field_PhaseGroup_sets_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["perPage"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["perPage"] = arg1
	var arg2 *model.SetSortType
	if tmp, ok := rawArgs["sortType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortType"))
		arg2, err = ec.unmarshalOSetSortType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetSortType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sortType"] = arg2
	var arg3 *model.SetFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg3, err = ec.unmarshalOSetFilters2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg3
	return args, nil
}

func (ec *executionContext) field_PhaseGroup_standings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.StandingGroupStandingPageFilter
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOStandingGroupStandingPageFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStandingGroupStandingPageFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Phase_paginatedSeeds_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SeedPaginationQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalNSeedPaginationQuery2githubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSeedPaginationQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["eventId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventId"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["eventId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Phase_phaseGroups_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PhaseGroupPageQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOPhaseGroupPageQuery2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhaseGroupPageQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Phase_seeds_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SeedPaginationQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalNSeedPaginationQuery2githubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSeedPaginationQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["eventId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventId"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["eventId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Phase_sets_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["perPage"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["perPage"] = arg1
	var arg2 *model.SetSortType
	if tmp, ok := rawArgs["sortType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortType"))
		arg2, err = ec.unmarshalOSetSortType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetSortType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sortType"] = arg2
	var arg3 *model.SetFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg3, err = ec.unmarshalOSetFilters2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg3
	return args, nil
}

func (ec *executionContext) field_Player_rankings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["videogameId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("videogameId"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["videogameId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Player_recentSets_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["opponentId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opponentId"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opponentId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Player_sets_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["perPage"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["perPage"] = arg1
	var arg2 *model.SetFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg2, err = ec.unmarshalOSetFilters2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_event_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["slug"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slug"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["slug"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_league_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["slug"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slug"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["slug"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_participant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["isAdmin"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isAdmin"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["isAdmin"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_phaseGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_phase_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_player_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_seed_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_set_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_shop_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["slug"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slug"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["slug"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_streamQueue_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["tournamentId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tournamentId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tournamentId"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["includePlayerStreams"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includePlayerStreams"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includePlayerStreams"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_stream_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_tournament_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["slug"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slug"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["slug"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_tournaments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.TournamentQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalNTournamentQuery2githubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTournamentQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["slug"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slug"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["slug"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_videogame_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_videogames_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VideogameQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalNVideogameQuery2githubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐVideogameQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Seed_setRecordWithoutByes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["phaseGroupId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phaseGroupId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phaseGroupId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Seed_standings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["containerType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("containerType"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["containerType"] = arg0
	return args, nil
}

func (ec *executionContext) field_Set_displayScore_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["mainEntrantId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mainEntrantId"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mainEntrantId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Set_game_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["orderNum"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderNum"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderNum"] = arg0
	return args, nil
}

func (ec *executionContext) field_Set_images_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg0
	return args, nil
}

func (ec *executionContext) field_Set_slots_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *bool
	if tmp, ok := rawArgs["includeByes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeByes"))
		arg0, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeByes"] = arg0
	return args, nil
}

func (ec *executionContext) field_ShopLevel_images_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg0
	return args, nil
}

func (ec *executionContext) field_Shop_levels_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ShopLevelsQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOShopLevelsQuery2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐShopLevelsQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Shop_messages_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ShopOrderMessagesQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOShopOrderMessagesQuery2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐShopOrderMessagesQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Tournament_admins_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*string
	if tmp, ok := rawArgs["roles"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roles"))
		arg0, err = ec.unmarshalOString2ᚕᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roles"] = arg0
	return args, nil
}

func (ec *executionContext) field_Tournament_events_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	return args, nil
}

func (ec *executionContext) field_Tournament_images_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg0
	return args, nil
}

func (ec *executionContext) field_Tournament_participants_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ParticipantPaginationQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalNParticipantPaginationQuery2githubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐParticipantPaginationQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["isAdmin"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isAdmin"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["isAdmin"] = arg1
	return args, nil
}

func (ec *executionContext) field_Tournament_stations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["perPage"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["perPage"] = arg1
	return args, nil
}

func (ec *executionContext) field_Tournament_teams_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.TeamsPaginationQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalNTeamsPaginationQuery2githubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTeamsPaginationQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Tournament_url_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["tab"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tab"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tab"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["relative"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("relative"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["relative"] = arg1
	return args, nil
}

func (ec *executionContext) field_User_authorizations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.SocialConnectionType
	if tmp, ok := rawArgs["types"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("types"))
		arg0, err = ec.unmarshalOSocialConnectionType2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSocialConnectionType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["types"] = arg0
	return args, nil
}

func (ec *executionContext) field_User_events_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserEventsPaginationQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOUserEventsPaginationQuery2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUserEventsPaginationQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_User_images_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg0
	return args, nil
}

func (ec *executionContext) field_User_leagues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserLeaguesPaginationQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOUserLeaguesPaginationQuery2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUserLeaguesPaginationQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_User_tournaments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserTournamentsPaginationQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOUserTournamentsPaginationQuery2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUserTournamentsPaginationQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Videogame_images_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

func (ec *executionContext) _fieldMiddleware(ctx context.Context, obj interface{}, next graphql.Resolver) interface{} {
	fc := graphql.GetFieldContext(ctx)
	for _, d := range fc.Field.Directives {
		switch d.Name {
		case "publicCache":
			rawArgs := d.ArgumentMap(ec.Variables)
			args, err := ec.dir_publicCache_args(ctx, rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return nil
			}
			n := next
			next = func(ctx context.Context) (interface{}, error) {
				if ec.directives.PublicCache == nil {
					return nil, errors.New("directive publicCache is not implemented")
				}
				return ec.directives.PublicCache(ctx, obj, n, args["cacheAge"].(*int))
			}
		case "userData":
			n := next
			next = func(ctx context.Context) (interface{}, error) {
				if ec.directives.UserData == nil {
					return nil, errors.New("directive userData is not implemented")
				}
				return ec.directives.UserData(ctx, obj, n)
			}
		}
	}
	res, err := ec.ResolverMiddleware(ctx, next)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return res
}

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Address_id(ctx context.Context, field graphql.CollectedField, obj *model.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_city(ctx context.Context, field graphql.CollectedField, obj *model.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_country(ctx context.Context, field graphql.CollectedField, obj *model.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_countryId(ctx context.Context, field graphql.CollectedField, obj *model.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_state(ctx context.Context, field graphql.CollectedField, obj *model.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_stateId(ctx context.Context, field graphql.CollectedField, obj *model.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StateID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ContactInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.ContactInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContactInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContactInfo_city(ctx context.Context, field graphql.CollectedField, obj *model.ContactInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContactInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContactInfo_country(ctx context.Context, field graphql.CollectedField, obj *model.ContactInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContactInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContactInfo_countryId(ctx context.Context, field graphql.CollectedField, obj *model.ContactInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContactInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ContactInfo_name(ctx context.Context, field graphql.CollectedField, obj *model.ContactInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContactInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContactInfo_nameFirst(ctx context.Context, field graphql.CollectedField, obj *model.ContactInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContactInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameFirst, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContactInfo_nameLast(ctx context.Context, field graphql.CollectedField, obj *model.ContactInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContactInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameLast, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContactInfo_state(ctx context.Context, field graphql.CollectedField, obj *model.ContactInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContactInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ContactInfo_stateId(ctx context.Context, field graphql.CollectedField, obj *model.ContactInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContactInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StateID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ContactInfo_zipcode(ctx context.Context, field graphql.CollectedField, obj *model.ContactInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ContactInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zipcode, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Entrant_id(ctx context.Context, field graphql.CollectedField, obj *model.Entrant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Entrant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Entrant_event(ctx context.Context, field graphql.CollectedField, obj *model.Entrant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Entrant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Event, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEvent(ctx, field.Selections, res)
}

func (ec *executionContext) _Entrant_isDisqualified(ctx context.Context, field graphql.CollectedField, obj *model.Entrant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Entrant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDisqualified, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Entrant_name(ctx context.Context, field graphql.CollectedField, obj *model.Entrant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Entrant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Entrant_participants(ctx context.Context, field graphql.CollectedField, obj *model.Entrant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Entrant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Participants, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Participant)
	fc.Result = res
	return ec.marshalOParticipant2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐParticipant(ctx, field.Selections, res)
}

func (ec *executionContext) _Entrant_seeds(ctx context.Context, field graphql.CollectedField, obj *model.Entrant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Entrant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seeds, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Seed)
	fc.Result = res
	return ec.marshalOSeed2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSeed(ctx, field.Selections, res)
}

func (ec *executionContext) _Entrant_skill(ctx context.Context, field graphql.CollectedField, obj *model.Entrant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Entrant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Skill, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Entrant_standing(ctx context.Context, field graphql.CollectedField, obj *model.Entrant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Entrant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Standing, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Standing)
	fc.Result = res
	return ec.marshalOStanding2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStanding(ctx, field.Selections, res)
}

func (ec *executionContext) _Entrant_stream(ctx context.Context, field graphql.CollectedField, obj *model.Entrant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Entrant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stream, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Streams)
	fc.Result = res
	return ec.marshalOStreams2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStreams(ctx, field.Selections, res)
}

func (ec *executionContext) _Entrant_streams(ctx context.Context, field graphql.CollectedField, obj *model.Entrant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Entrant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Streams, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Streams)
	fc.Result = res
	return ec.marshalOStreams2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStreams(ctx, field.Selections, res)
}

func (ec *executionContext) _EntrantConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.EntrantConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EntrantConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _EntrantConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.EntrantConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EntrantConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Entrant)
	fc.Result = res
	return ec.marshalOEntrant2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEntrant(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_id(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_checkInBuffer(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckInBuffer, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_checkInDuration(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckInDuration, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_checkInEnabled(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckInEnabled, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_deckSubmissionDeadline(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeckSubmissionDeadline, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_entrantSizeMax(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrantSizeMax, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_entrantSizeMin(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrantSizeMin, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_entrants(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Event_entrants_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Entrants, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EntrantConnection)
	fc.Result = res
	return ec.marshalOEntrantConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEntrantConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_hasDecks(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasDecks, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_hasTasks(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasTasks, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_images(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Event_images_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Images, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Image)
	fc.Result = res
	return ec.marshalOImage2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_isOnline(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOnline, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_matchRulesMarkdown(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MatchRulesMarkdown, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_name(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_numEntrants(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumEntrants, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_phaseGroups(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhaseGroups, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PhaseGroup)
	fc.Result = res
	return ec.marshalOPhaseGroup2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhaseGroup(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_phases(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Event_phases_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phases, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Phase)
	fc.Result = res
	return ec.marshalOPhase2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhase(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_prizingInfo(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrizingInfo, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOJSON2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_publishing(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Publishing, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOJSON2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_rulesMarkdown(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RulesMarkdown, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_rulesetId(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RulesetID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_rulesetSettings(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RulesetSettings, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOJSON2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_sets(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Event_sets_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sets, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SetConnection)
	fc.Result = res
	return ec.marshalOSetConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_slug(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slug, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_standings(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Event_standings_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Standings, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StandingConnection)
	fc.Result = res
	return ec.marshalOStandingConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStandingConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_startAt(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_state(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActivityState)
	fc.Result = res
	return ec.marshalOActivityState2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐActivityState(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_stations(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Event_stations_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stations, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StationsConnection)
	fc.Result = res
	return ec.marshalOStationsConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStationsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_teamManagementDeadline(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamManagementDeadline, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_teamNameAllowed(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamNameAllowed, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_tournament(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tournament, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Tournament)
	fc.Result = res
	return ec.marshalOTournament2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTournament(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_type(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_useEventSeeds(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseEventSeeds, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_videogame(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Videogame, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Videogame)
	fc.Result = res
	return ec.marshalOVideogame2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐVideogame(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_waves(ctx context.Context, field graphql.CollectedField, obj *model.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Event_waves_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Waves, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Wave)
	fc.Result = res
	return ec.marshalOWave2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐWave(ctx, field.Selections, res)
}

func (ec *executionContext) _EventConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.EventConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _EventConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.EventConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEvent(ctx, field.Selections, res)
}

func (ec *executionContext) _EventOwner_eventId(ctx context.Context, field graphql.CollectedField, obj *model.EventOwner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventOwner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EventOwner_email(ctx context.Context, field graphql.CollectedField, obj *model.EventOwner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventOwner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EventOwner_gamerTag(ctx context.Context, field graphql.CollectedField, obj *model.EventOwner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventOwner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GamerTag, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EventOwner_fullName(ctx context.Context, field graphql.CollectedField, obj *model.EventOwner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventOwner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullName, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EventOwnerConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.EventOwnerConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventOwnerConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _EventOwnerConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.EventOwnerConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventOwnerConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.EventOwner)
	fc.Result = res
	return ec.marshalOEventOwner2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEventOwner(ctx, field.Selections, res)
}

func (ec *executionContext) _Game_id(ctx context.Context, field graphql.CollectedField, obj *model.Game) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Game_images(ctx context.Context, field graphql.CollectedField, obj *model.Game) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Game_images_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Images, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Image)
	fc.Result = res
	return ec.marshalOImage2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Game_orderNum(ctx context.Context, field graphql.CollectedField, obj *model.Game) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNum, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Game_selections(ctx context.Context, field graphql.CollectedField, obj *model.Game) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Selections, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GameSelection)
	fc.Result = res
	return ec.marshalOGameSelection2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐGameSelection(ctx, field.Selections, res)
}

func (ec *executionContext) _Game_stage(ctx context.Context, field graphql.CollectedField, obj *model.Game) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stage, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Stage)
	fc.Result = res
	return ec.marshalOStage2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStage(ctx, field.Selections, res)
}

func (ec *executionContext) _Game_state(ctx context.Context, field graphql.CollectedField, obj *model.Game) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Game_winnerId(ctx context.Context, field graphql.CollectedField, obj *model.Game) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WinnerID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _GameSelection_id(ctx context.Context, field graphql.CollectedField, obj *model.GameSelection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GameSelection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GameSelection_entrant(ctx context.Context, field graphql.CollectedField, obj *model.GameSelection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GameSelection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Entrant, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Entrant)
	fc.Result = res
	return ec.marshalOEntrant2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEntrant(ctx, field.Selections, res)
}

func (ec *executionContext) _GameSelection_orderNum(ctx context.Context, field graphql.CollectedField, obj *model.GameSelection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GameSelection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNum, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _GameSelection_participant(ctx context.Context, field graphql.CollectedField, obj *model.GameSelection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GameSelection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Participant, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Participant)
	fc.Result = res
	return ec.marshalOParticipant2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐParticipant(ctx, field.Selections, res)
}

func (ec *executionContext) _GameSelection_selectionType(ctx context.Context, field graphql.CollectedField, obj *model.GameSelection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GameSelection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelectionType, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GameSelectionType)
	fc.Result = res
	return ec.marshalOGameSelectionType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐGameSelectionType(ctx, field.Selections, res)
}

func (ec *executionContext) _GameSelection_selectionValue(ctx context.Context, field graphql.CollectedField, obj *model.GameSelection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GameSelection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelectionValue, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_id(ctx context.Context, field graphql.CollectedField, obj *model.Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_height(ctx context.Context, field graphql.CollectedField, obj *model.Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_ratio(ctx context.Context, field graphql.CollectedField, obj *model.Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ratio, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_type(ctx context.Context, field graphql.CollectedField, obj *model.Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_url(ctx context.Context, field graphql.CollectedField, obj *model.Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_width(ctx context.Context, field graphql.CollectedField, obj *model.Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _League_id(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _League_addrState(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrState, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _League_city(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _League_countryCode(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryCode, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _League_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _League_currency(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _League_endAt(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _League_entrantCount(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrantCount, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _League_eventOwners(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_League_eventOwners_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventOwners, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EventOwnerConnection)
	fc.Result = res
	return ec.marshalOEventOwnerConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEventOwnerConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _League_eventRegistrationClosesAt(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventRegistrationClosesAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _League_events(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_League_events_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Events, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EventConnection)
	fc.Result = res
	return ec.marshalOEventConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEventConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _League_finalEventId(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FinalEventID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _League_hasOfflineEvents(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasOfflineEvents, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _League_hasOnlineEvents(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasOnlineEvents, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _League_hashtag(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hashtag, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _League_images(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_League_images_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Images, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Image)
	fc.Result = res
	return ec.marshalOImage2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _League_isOnline(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOnline, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _League_lat(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lat, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _League_links(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Links, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TournamentLinks)
	fc.Result = res
	return ec.marshalOTournamentLinks2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTournamentLinks(ctx, field.Selections, res)
}

func (ec *executionContext) _League_lng(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lng, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _League_mapsPlaceId(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MapsPlaceID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _League_name(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _League_numProgressingToFinalEvent(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumProgressingToFinalEvent, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _League_numUniquePlayers(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumUniquePlayers, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _League_postalCode(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostalCode, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _League_primaryContact(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrimaryContact, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _League_primaryContactType(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrimaryContactType, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _League_publishing(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Publishing, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOJSON2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _League_registrationClosesAt(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationClosesAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _League_rules(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rules, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _League_shortSlug(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortSlug, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _League_showStandings(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShowStandings, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _League_slug(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slug, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _League_standings(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_League_standings_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Standings, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StandingConnection)
	fc.Result = res
	return ec.marshalOStandingConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStandingConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _League_startAt(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _League_state(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _League_teamCreationClosesAt(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamCreationClosesAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _League_timezone(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timezone, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _League_tournamentType(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TournamentType, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _League_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _League_url(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_League_url_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _League_venueAddress(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VenueAddress, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _League_venueName(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VenueName, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _League_videogames(ctx context.Context, field graphql.CollectedField, obj *model.League) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "League",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Videogames, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Videogame)
	fc.Result = res
	return ec.marshalOVideogame2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐVideogame(ctx, field.Selections, res)
}

func (ec *executionContext) _LeagueConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.LeagueConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LeagueConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _LeagueConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.LeagueConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LeagueConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.League)
	fc.Result = res
	return ec.marshalOLeague2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐLeague(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePhase(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePhase_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePhase(rctx, args["phaseId"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteStation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteStation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteStation(rctx, args["stationId"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteWave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteWave_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteWave(rctx, args["waveId"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_resolveScheduleConflicts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_resolveScheduleConflicts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ResolveScheduleConflicts(rctx, args["tournamentId"].(string), args["options"].(*model.ResolveConflictsOptions))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Seed)
	fc.Result = res
	return ec.marshalOSeed2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSeed(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_swapSeeds(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_swapSeeds_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SwapSeeds(rctx, args["phaseId"].(string), args["seed1Id"].(string), args["seed2Id"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Seed)
	fc.Result = res
	return ec.marshalOSeed2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSeed(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePhaseGroups(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePhaseGroups_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePhaseGroups(rctx, args["groupConfigs"].([]*model.PhaseGroupUpdateInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PhaseGroup)
	fc.Result = res
	return ec.marshalOPhaseGroup2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhaseGroup(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePhaseSeeding(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePhaseSeeding_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePhaseSeeding(rctx, args["phaseId"].(string), args["seedMapping"].([]*model.UpdatePhaseSeedInfo), args["options"].(*model.UpdatePhaseSeedingOptions))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Phase)
	fc.Result = res
	return ec.marshalOPhase2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhase(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_upsertPhase(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_upsertPhase_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpsertPhase(rctx, args["phaseId"].(*string), args["eventId"].(*string), args["payload"].(model.PhaseUpsertInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Phase)
	fc.Result = res
	return ec.marshalOPhase2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhase(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_upsertStation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_upsertStation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpsertStation(rctx, args["stationId"].(*string), args["tournamentId"].(*string), args["fields"].(model.StationUpsertInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Stations)
	fc.Result = res
	return ec.marshalOStations2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStations(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_upsertWave(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_upsertWave_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpsertWave(rctx, args["waveId"].(*string), args["tournamentId"].(*string), args["fields"].(model.WaveUpsertInput))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Wave)
	fc.Result = res
	return ec.marshalOWave2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐWave(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_total(ctx context.Context, field graphql.CollectedField, obj *model.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_totalPages(ctx context.Context, field graphql.CollectedField, obj *model.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPages, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_page(ctx context.Context, field graphql.CollectedField, obj *model.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_perPage(ctx context.Context, field graphql.CollectedField, obj *model.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PerPage, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_sortBy(ctx context.Context, field graphql.CollectedField, obj *model.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortBy, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_filter(ctx context.Context, field graphql.CollectedField, obj *model.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Filter, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOJSON2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Participant_id(ctx context.Context, field graphql.CollectedField, obj *model.Participant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Participant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Participant_checkedIn(ctx context.Context, field graphql.CollectedField, obj *model.Participant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Participant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckedIn, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Participant_checkedInAt(ctx context.Context, field graphql.CollectedField, obj *model.Participant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Participant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckedInAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Participant_connectedAccounts(ctx context.Context, field graphql.CollectedField, obj *model.Participant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Participant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConnectedAccounts, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOJSON2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Participant_contactInfo(ctx context.Context, field graphql.CollectedField, obj *model.Participant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Participant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactInfo, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContactInfo)
	fc.Result = res
	return ec.marshalOContactInfo2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐContactInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Participant_email(ctx context.Context, field graphql.CollectedField, obj *model.Participant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Participant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Participant_entrants(ctx context.Context, field graphql.CollectedField, obj *model.Participant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Participant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Entrants, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Entrant)
	fc.Result = res
	return ec.marshalOEntrant2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEntrant(ctx, field.Selections, res)
}

func (ec *executionContext) _Participant_events(ctx context.Context, field graphql.CollectedField, obj *model.Participant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Participant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Events, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEvent(ctx, field.Selections, res)
}

func (ec *executionContext) _Participant_gamerTag(ctx context.Context, field graphql.CollectedField, obj *model.Participant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Participant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GamerTag, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Participant_images(ctx context.Context, field graphql.CollectedField, obj *model.Participant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Participant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Participant_images_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Images, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Image)
	fc.Result = res
	return ec.marshalOImage2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Participant_player(ctx context.Context, field graphql.CollectedField, obj *model.Participant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Participant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Player, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Player)
	fc.Result = res
	return ec.marshalOPlayer2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPlayer(ctx, field.Selections, res)
}

func (ec *executionContext) _Participant_prefix(ctx context.Context, field graphql.CollectedField, obj *model.Participant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Participant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Prefix, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Participant_user(ctx context.Context, field graphql.CollectedField, obj *model.Participant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Participant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Participant_verified(ctx context.Context, field graphql.CollectedField, obj *model.Participant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Participant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Verified, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ParticipantConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.ParticipantConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParticipantConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ParticipantConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.ParticipantConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ParticipantConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Participant)
	fc.Result = res
	return ec.marshalOParticipant2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐParticipant(ctx, field.Selections, res)
}

func (ec *executionContext) _Phase_id(ctx context.Context, field graphql.CollectedField, obj *model.Phase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Phase",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Phase_bracketType(ctx context.Context, field graphql.CollectedField, obj *model.Phase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Phase",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BracketType, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BracketType)
	fc.Result = res
	return ec.marshalOBracketType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐBracketType(ctx, field.Selections, res)
}

func (ec *executionContext) _Phase_event(ctx context.Context, field graphql.CollectedField, obj *model.Phase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Phase",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Event, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEvent(ctx, field.Selections, res)
}

func (ec *executionContext) _Phase_groupCount(ctx context.Context, field graphql.CollectedField, obj *model.Phase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Phase",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupCount, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Phase_isExhibition(ctx context.Context, field graphql.CollectedField, obj *model.Phase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Phase",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsExhibition, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Phase_name(ctx context.Context, field graphql.CollectedField, obj *model.Phase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Phase",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Phase_numSeeds(ctx context.Context, field graphql.CollectedField, obj *model.Phase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Phase",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumSeeds, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Phase_paginatedSeeds(ctx context.Context, field graphql.CollectedField, obj *model.Phase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Phase",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Phase_paginatedSeeds_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaginatedSeeds, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SeedConnection)
	fc.Result = res
	return ec.marshalOSeedConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSeedConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Phase_phaseGroups(ctx context.Context, field graphql.CollectedField, obj *model.Phase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Phase",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Phase_phaseGroups_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhaseGroups, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PhaseGroupConnection)
	fc.Result = res
	return ec.marshalOPhaseGroupConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhaseGroupConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Phase_phaseOrder(ctx context.Context, field graphql.CollectedField, obj *model.Phase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Phase",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhaseOrder, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Phase_seeds(ctx context.Context, field graphql.CollectedField, obj *model.Phase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Phase",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Phase_seeds_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seeds, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SeedConnection)
	fc.Result = res
	return ec.marshalOSeedConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSeedConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Phase_sets(ctx context.Context, field graphql.CollectedField, obj *model.Phase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Phase",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Phase_sets_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sets, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SetConnection)
	fc.Result = res
	return ec.marshalOSetConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Phase_state(ctx context.Context, field graphql.CollectedField, obj *model.Phase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Phase",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActivityState)
	fc.Result = res
	return ec.marshalOActivityState2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐActivityState(ctx, field.Selections, res)
}

func (ec *executionContext) _Phase_waves(ctx context.Context, field graphql.CollectedField, obj *model.Phase) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Phase",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Waves, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Wave)
	fc.Result = res
	return ec.marshalOWave2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐWave(ctx, field.Selections, res)
}

func (ec *executionContext) _PhaseGroup_id(ctx context.Context, field graphql.CollectedField, obj *model.PhaseGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhaseGroup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PhaseGroup_bracketType(ctx context.Context, field graphql.CollectedField, obj *model.PhaseGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhaseGroup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BracketType, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BracketType)
	fc.Result = res
	return ec.marshalOBracketType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐBracketType(ctx, field.Selections, res)
}

func (ec *executionContext) _PhaseGroup_displayIdentifier(ctx context.Context, field graphql.CollectedField, obj *model.PhaseGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhaseGroup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayIdentifier, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PhaseGroup_firstRoundTime(ctx context.Context, field graphql.CollectedField, obj *model.PhaseGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhaseGroup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstRoundTime, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PhaseGroup_numRounds(ctx context.Context, field graphql.CollectedField, obj *model.PhaseGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhaseGroup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumRounds, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PhaseGroup_paginatedSeeds(ctx context.Context, field graphql.CollectedField, obj *model.PhaseGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhaseGroup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_PhaseGroup_paginatedSeeds_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaginatedSeeds, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SeedConnection)
	fc.Result = res
	return ec.marshalOSeedConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSeedConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _PhaseGroup_paginatedSets(ctx context.Context, field graphql.CollectedField, obj *model.PhaseGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhaseGroup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_PhaseGroup_paginatedSets_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaginatedSets, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SetConnection)
	fc.Result = res
	return ec.marshalOSetConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _PhaseGroup_phase(ctx context.Context, field graphql.CollectedField, obj *model.PhaseGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhaseGroup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phase, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Phase)
	fc.Result = res
	return ec.marshalOPhase2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhase(ctx, field.Selections, res)
}

func (ec *executionContext) _PhaseGroup_progressionsOut(ctx context.Context, field graphql.CollectedField, obj *model.PhaseGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhaseGroup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProgressionsOut, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Progression)
	fc.Result = res
	return ec.marshalOProgression2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐProgression(ctx, field.Selections, res)
}

func (ec *executionContext) _PhaseGroup_rounds(ctx context.Context, field graphql.CollectedField, obj *model.PhaseGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhaseGroup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rounds, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Round)
	fc.Result = res
	return ec.marshalORound2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐRound(ctx, field.Selections, res)
}

func (ec *executionContext) _PhaseGroup_seedMap(ctx context.Context, field graphql.CollectedField, obj *model.PhaseGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhaseGroup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SeedMap, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOJSON2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PhaseGroup_seeds(ctx context.Context, field graphql.CollectedField, obj *model.PhaseGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhaseGroup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_PhaseGroup_seeds_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seeds, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SeedConnection)
	fc.Result = res
	return ec.marshalOSeedConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSeedConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _PhaseGroup_sets(ctx context.Context, field graphql.CollectedField, obj *model.PhaseGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhaseGroup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_PhaseGroup_sets_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sets, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SetConnection)
	fc.Result = res
	return ec.marshalOSetConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _PhaseGroup_standings(ctx context.Context, field graphql.CollectedField, obj *model.PhaseGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhaseGroup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_PhaseGroup_standings_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Standings, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StandingConnection)
	fc.Result = res
	return ec.marshalOStandingConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStandingConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _PhaseGroup_startAt(ctx context.Context, field graphql.CollectedField, obj *model.PhaseGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhaseGroup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PhaseGroup_state(ctx context.Context, field graphql.CollectedField, obj *model.PhaseGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhaseGroup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PhaseGroup_tiebreakOrder(ctx context.Context, field graphql.CollectedField, obj *model.PhaseGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhaseGroup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TiebreakOrder, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOJSON2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PhaseGroup_wave(ctx context.Context, field graphql.CollectedField, obj *model.PhaseGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhaseGroup",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wave, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Wave)
	fc.Result = res
	return ec.marshalOWave2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐWave(ctx, field.Selections, res)
}

func (ec *executionContext) _PhaseGroupConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.PhaseGroupConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhaseGroupConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _PhaseGroupConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.PhaseGroupConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhaseGroupConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PhaseGroup)
	fc.Result = res
	return ec.marshalOPhaseGroup2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhaseGroup(ctx, field.Selections, res)
}

func (ec *executionContext) _Player_id(ctx context.Context, field graphql.CollectedField, obj *model.Player) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Player_gamerTag(ctx context.Context, field graphql.CollectedField, obj *model.Player) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GamerTag, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Player_prefix(ctx context.Context, field graphql.CollectedField, obj *model.Player) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Prefix, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Player_rankings(ctx context.Context, field graphql.CollectedField, obj *model.Player) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Player_rankings_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rankings, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PlayerRank)
	fc.Result = res
	return ec.marshalOPlayerRank2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPlayerRank(ctx, field.Selections, res)
}

func (ec *executionContext) _Player_recentSets(ctx context.Context, field graphql.CollectedField, obj *model.Player) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Player_recentSets_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecentSets, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Set)
	fc.Result = res
	return ec.marshalOSet2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSet(ctx, field.Selections, res)
}

func (ec *executionContext) _Player_sets(ctx context.Context, field graphql.CollectedField, obj *model.Player) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Player_sets_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sets, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SetConnection)
	fc.Result = res
	return ec.marshalOSetConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Player_user(ctx context.Context, field graphql.CollectedField, obj *model.Player) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _PlayerRank_id(ctx context.Context, field graphql.CollectedField, obj *model.PlayerRank) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PlayerRank",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PlayerRank_rank(ctx context.Context, field graphql.CollectedField, obj *model.PlayerRank) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PlayerRank",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rank, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PlayerRank_title(ctx context.Context, field graphql.CollectedField, obj *model.PlayerRank) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PlayerRank",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProfileAuthorization_id(ctx context.Context, field graphql.CollectedField, obj *model.ProfileAuthorization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProfileAuthorization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProfileAuthorization_externalUsername(ctx context.Context, field graphql.CollectedField, obj *model.ProfileAuthorization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProfileAuthorization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalUsername, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProfileAuthorization_stream(ctx context.Context, field graphql.CollectedField, obj *model.ProfileAuthorization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProfileAuthorization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stream, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Stream)
	fc.Result = res
	return ec.marshalOStream2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStream(ctx, field.Selections, res)
}

func (ec *executionContext) _ProfileAuthorization_type(ctx context.Context, field graphql.CollectedField, obj *model.ProfileAuthorization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProfileAuthorization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AuthorizationType)
	fc.Result = res
	return ec.marshalOAuthorizationType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐAuthorizationType(ctx, field.Selections, res)
}

func (ec *executionContext) _ProfileAuthorization_url(ctx context.Context, field graphql.CollectedField, obj *model.ProfileAuthorization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProfileAuthorization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Progression_id(ctx context.Context, field graphql.CollectedField, obj *model.Progression) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Progression",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Progression_originOrder(ctx context.Context, field graphql.CollectedField, obj *model.Progression) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Progression",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginOrder, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Progression_originPhase(ctx context.Context, field graphql.CollectedField, obj *model.Progression) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Progression",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginPhase, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Phase)
	fc.Result = res
	return ec.marshalOPhase2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhase(ctx, field.Selections, res)
}

func (ec *executionContext) _Progression_originPhaseGroup(ctx context.Context, field graphql.CollectedField, obj *model.Progression) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Progression",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginPhaseGroup, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PhaseGroup)
	fc.Result = res
	return ec.marshalOPhaseGroup2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhaseGroup(ctx, field.Selections, res)
}

func (ec *executionContext) _Progression_originPlacement(ctx context.Context, field graphql.CollectedField, obj *model.Progression) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Progression",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginPlacement, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_currentUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CurrentUser(rctx)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_event(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_event_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Event(rctx, args["id"].(*string), args["slug"].(*string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEvent(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_league(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_league_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().League(rctx, args["id"].(*string), args["slug"].(*string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.League)
	fc.Result = res
	return ec.marshalOLeague2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐLeague(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_participant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_participant_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Participant(rctx, args["id"].(string), args["isAdmin"].(*bool))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Participant)
	fc.Result = res
	return ec.marshalOParticipant2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐParticipant(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_phase(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_phase_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Phase(rctx, args["id"].(*string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Phase)
	fc.Result = res
	return ec.marshalOPhase2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhase(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_phaseGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_phaseGroup_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PhaseGroup(rctx, args["id"].(*string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PhaseGroup)
	fc.Result = res
	return ec.marshalOPhaseGroup2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhaseGroup(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_player(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_player_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Player(rctx, args["id"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Player)
	fc.Result = res
	return ec.marshalOPlayer2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPlayer(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_seed(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_seed_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Seed(rctx, args["id"].(*string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Seed)
	fc.Result = res
	return ec.marshalOSeed2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSeed(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_set(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_set_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Set(rctx, args["id"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Set)
	fc.Result = res
	return ec.marshalOSet2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSet(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_shop(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_shop_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Shop(rctx, args["id"].(*string), args["slug"].(*string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Shop)
	fc.Result = res
	return ec.marshalOShop2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐShop(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_stream(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_stream_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Stream(rctx, args["id"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Streams)
	fc.Result = res
	return ec.marshalOStreams2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStreams(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_streamQueue(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_streamQueue_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().StreamQueue(rctx, args["tournamentId"].(string), args["includePlayerStreams"].(*bool))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.StreamQueue)
	fc.Result = res
	return ec.marshalOStreamQueue2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStreamQueue(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_tournament(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_tournament_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Tournament(rctx, args["id"].(*string), args["slug"].(*string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Tournament)
	fc.Result = res
	return ec.marshalOTournament2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTournament(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_tournaments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_tournaments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Tournaments(rctx, args["query"].(model.TournamentQuery))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TournamentConnection)
	fc.Result = res
	return ec.marshalOTournamentConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTournamentConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_user_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().User(rctx, args["id"].(*string), args["slug"].(*string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_videogame(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_videogame_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Videogame(rctx, args["id"].(*string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Videogame)
	fc.Result = res
	return ec.marshalOVideogame2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐVideogame(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_videogames(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_videogames_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Videogames(rctx, args["query"].(model.VideogameQuery))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VideogameConnection)
	fc.Result = res
	return ec.marshalOVideogameConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐVideogameConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _RaceBracketConfig_automaticEndTime(ctx context.Context, field graphql.CollectedField, obj *model.RaceBracketConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RaceBracketConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AutomaticEndTime, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RaceBracketConfig_id(ctx context.Context, field graphql.CollectedField, obj *model.RaceBracketConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RaceBracketConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RaceBracketConfig_automaticStartTime(ctx context.Context, field graphql.CollectedField, obj *model.RaceBracketConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RaceBracketConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AutomaticStartTime, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RaceBracketConfig_bracketType(ctx context.Context, field graphql.CollectedField, obj *model.RaceBracketConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RaceBracketConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BracketType, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BracketType)
	fc.Result = res
	return ec.marshalOBracketType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐBracketType(ctx, field.Selections, res)
}

func (ec *executionContext) _RaceBracketConfig_goalTargetComparator(ctx context.Context, field graphql.CollectedField, obj *model.RaceBracketConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RaceBracketConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GoalTargetComparator, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Comparator)
	fc.Result = res
	return ec.marshalOComparator2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐComparator(ctx, field.Selections, res)
}

func (ec *executionContext) _RaceBracketConfig_goalTargetValue(ctx context.Context, field graphql.CollectedField, obj *model.RaceBracketConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RaceBracketConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GoalTargetValue, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RaceBracketConfig_limitMode(ctx context.Context, field graphql.CollectedField, obj *model.RaceBracketConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RaceBracketConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitMode, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RaceLimitMode)
	fc.Result = res
	return ec.marshalORaceLimitMode2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐRaceLimitMode(ctx, field.Selections, res)
}

func (ec *executionContext) _RaceBracketConfig_limitValue(ctx context.Context, field graphql.CollectedField, obj *model.RaceBracketConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RaceBracketConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitValue, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RaceBracketConfig_raceType(ctx context.Context, field graphql.CollectedField, obj *model.RaceBracketConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RaceBracketConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RaceType, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RaceType)
	fc.Result = res
	return ec.marshalORaceType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐRaceType(ctx, field.Selections, res)
}

func (ec *executionContext) _RaceMatchConfig_id(ctx context.Context, field graphql.CollectedField, obj *model.RaceMatchConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RaceMatchConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RaceMatchConfig_bracketType(ctx context.Context, field graphql.CollectedField, obj *model.RaceMatchConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RaceMatchConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BracketType, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BracketType)
	fc.Result = res
	return ec.marshalOBracketType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐBracketType(ctx, field.Selections, res)
}

func (ec *executionContext) _RaceMatchConfig_playerReportingEnabled(ctx context.Context, field graphql.CollectedField, obj *model.RaceMatchConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RaceMatchConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlayerReportingEnabled, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RaceMatchConfig_verificationMethods(ctx context.Context, field graphql.CollectedField, obj *model.RaceMatchConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RaceMatchConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VerificationMethods, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MatchConfigVerificationMethod)
	fc.Result = res
	return ec.marshalOMatchConfigVerificationMethod2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐMatchConfigVerificationMethod(ctx, field.Selections, res)
}

func (ec *executionContext) _RaceMatchConfig_verificationRequired(ctx context.Context, field graphql.CollectedField, obj *model.RaceMatchConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RaceMatchConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VerificationRequired, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Round_id(ctx context.Context, field graphql.CollectedField, obj *model.Round) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Round",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Round_bestOf(ctx context.Context, field graphql.CollectedField, obj *model.Round) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Round",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BestOf, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Round_number(ctx context.Context, field graphql.CollectedField, obj *model.Round) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Round",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Round_startAt(ctx context.Context, field graphql.CollectedField, obj *model.Round) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Round",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Score_label(ctx context.Context, field graphql.CollectedField, obj *model.Score) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Score",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Score_value(ctx context.Context, field graphql.CollectedField, obj *model.Score) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Score",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Score_displayValue(ctx context.Context, field graphql.CollectedField, obj *model.Score) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Score",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayValue, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Seed_id(ctx context.Context, field graphql.CollectedField, obj *model.Seed) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Seed",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Seed_checkedInParticipants(ctx context.Context, field graphql.CollectedField, obj *model.Seed) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Seed",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckedInParticipants, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOJSON2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Seed_entrant(ctx context.Context, field graphql.CollectedField, obj *model.Seed) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Seed",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Entrant, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Entrant)
	fc.Result = res
	return ec.marshalOEntrant2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEntrant(ctx, field.Selections, res)
}

func (ec *executionContext) _Seed_groupSeedNum(ctx context.Context, field graphql.CollectedField, obj *model.Seed) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Seed",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupSeedNum, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Seed_isBye(ctx context.Context, field graphql.CollectedField, obj *model.Seed) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Seed",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBye, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Seed_phase(ctx context.Context, field graphql.CollectedField, obj *model.Seed) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Seed",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phase, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Phase)
	fc.Result = res
	return ec.marshalOPhase2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhase(ctx, field.Selections, res)
}

func (ec *executionContext) _Seed_phaseGroup(ctx context.Context, field graphql.CollectedField, obj *model.Seed) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Seed",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhaseGroup, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PhaseGroup)
	fc.Result = res
	return ec.marshalOPhaseGroup2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhaseGroup(ctx, field.Selections, res)
}

func (ec *executionContext) _Seed_placeholderName(ctx context.Context, field graphql.CollectedField, obj *model.Seed) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Seed",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlaceholderName, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Seed_placement(ctx context.Context, field graphql.CollectedField, obj *model.Seed) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Seed",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Placement, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Seed_players(ctx context.Context, field graphql.CollectedField, obj *model.Seed) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Seed",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Players, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Player)
	fc.Result = res
	return ec.marshalOPlayer2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPlayer(ctx, field.Selections, res)
}

func (ec *executionContext) _Seed_progressionSeedId(ctx context.Context, field graphql.CollectedField, obj *model.Seed) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Seed",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProgressionSeedID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Seed_progressionSource(ctx context.Context, field graphql.CollectedField, obj *model.Seed) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Seed",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProgressionSource, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Progression)
	fc.Result = res
	return ec.marshalOProgression2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐProgression(ctx, field.Selections, res)
}

func (ec *executionContext) _Seed_seedNum(ctx context.Context, field graphql.CollectedField, obj *model.Seed) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Seed",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SeedNum, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Seed_setRecordWithoutByes(ctx context.Context, field graphql.CollectedField, obj *model.Seed) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Seed",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Seed_setRecordWithoutByes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SetRecordWithoutByes, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOJSON2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Seed_standings(ctx context.Context, field graphql.CollectedField, obj *model.Seed) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Seed",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Seed_standings_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Standings, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Standing)
	fc.Result = res
	return ec.marshalOStanding2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStanding(ctx, field.Selections, res)
}

func (ec *executionContext) _SeedConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.SeedConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeedConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _SeedConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.SeedConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SeedConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Seed)
	fc.Result = res
	return ec.marshalOSeed2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSeed(ctx, field.Selections, res)
}

func (ec *executionContext) _Set_id(ctx context.Context, field graphql.CollectedField, obj *model.Set) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Set",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Set_completedAt(ctx context.Context, field graphql.CollectedField, obj *model.Set) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Set",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Set_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Set) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Set",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Set_displayScore(ctx context.Context, field graphql.CollectedField, obj *model.Set) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Set",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Set_displayScore_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayScore, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Set_event(ctx context.Context, field graphql.CollectedField, obj *model.Set) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Set",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Event, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEvent(ctx, field.Selections, res)
}

func (ec *executionContext) _Set_fullRoundText(ctx context.Context, field graphql.CollectedField, obj *model.Set) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Set",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullRoundText, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Set_game(ctx context.Context, field graphql.CollectedField, obj *model.Set) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Set",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Set_game_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Game, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Game)
	fc.Result = res
	return ec.marshalOGame2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐGame(ctx, field.Selections, res)
}

func (ec *executionContext) _Set_games(ctx context.Context, field graphql.CollectedField, obj *model.Set) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Set",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Games, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Game)
	fc.Result = res
	return ec.marshalOGame2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐGame(ctx, field.Selections, res)
}

func (ec *executionContext) _Set_hasPlaceholder(ctx context.Context, field graphql.CollectedField, obj *model.Set) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Set",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPlaceholder, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Set_identifier(ctx context.Context, field graphql.CollectedField, obj *model.Set) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Set",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Set_images(ctx context.Context, field graphql.CollectedField, obj *model.Set) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Set",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Set_images_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Images, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Image)
	fc.Result = res
	return ec.marshalOImage2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Set_lPlacement(ctx context.Context, field graphql.CollectedField, obj *model.Set) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Set",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LPlacement, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Set_phaseGroup(ctx context.Context, field graphql.CollectedField, obj *model.Set) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Set",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhaseGroup, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PhaseGroup)
	fc.Result = res
	return ec.marshalOPhaseGroup2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhaseGroup(ctx, field.Selections, res)
}

func (ec *executionContext) _Set_round(ctx context.Context, field graphql.CollectedField, obj *model.Set) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Set",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Round, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Set_setGamesType(ctx context.Context, field graphql.CollectedField, obj *model.Set) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Set",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SetGamesType, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Set_slots(ctx context.Context, field graphql.CollectedField, obj *model.Set) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Set",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Set_slots_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slots, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SetSlot)
	fc.Result = res
	return ec.marshalOSetSlot2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetSlot(ctx, field.Selections, res)
}

func (ec *executionContext) _Set_startedAt(ctx context.Context, field graphql.CollectedField, obj *model.Set) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Set",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Set_state(ctx context.Context, field graphql.CollectedField, obj *model.Set) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Set",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Set_station(ctx context.Context, field graphql.CollectedField, obj *model.Set) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Set",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Station, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Stations)
	fc.Result = res
	return ec.marshalOStations2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStations(ctx, field.Selections, res)
}

func (ec *executionContext) _Set_stream(ctx context.Context, field graphql.CollectedField, obj *model.Set) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Set",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stream, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Streams)
	fc.Result = res
	return ec.marshalOStreams2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStreams(ctx, field.Selections, res)
}

func (ec *executionContext) _Set_totalGames(ctx context.Context, field graphql.CollectedField, obj *model.Set) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Set",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalGames, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Set_vodUrl(ctx context.Context, field graphql.CollectedField, obj *model.Set) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Set",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VodURL, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Set_wPlacement(ctx context.Context, field graphql.CollectedField, obj *model.Set) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Set",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WPlacement, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Set_winnerId(ctx context.Context, field graphql.CollectedField, obj *model.Set) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Set",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WinnerID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SetConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.SetConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SetConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _SetConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.SetConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SetConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Set)
	fc.Result = res
	return ec.marshalOSet2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSet(ctx, field.Selections, res)
}

func (ec *executionContext) _SetSlot_id(ctx context.Context, field graphql.CollectedField, obj *model.SetSlot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SetSlot",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SetSlot_entrant(ctx context.Context, field graphql.CollectedField, obj *model.SetSlot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SetSlot",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Entrant, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Entrant)
	fc.Result = res
	return ec.marshalOEntrant2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEntrant(ctx, field.Selections, res)
}

func (ec *executionContext) _SetSlot_prereqId(ctx context.Context, field graphql.CollectedField, obj *model.SetSlot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SetSlot",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrereqID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SetSlot_prereqPlacement(ctx context.Context, field graphql.CollectedField, obj *model.SetSlot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SetSlot",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrereqPlacement, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SetSlot_prereqType(ctx context.Context, field graphql.CollectedField, obj *model.SetSlot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SetSlot",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrereqType, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SetSlot_seed(ctx context.Context, field graphql.CollectedField, obj *model.SetSlot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SetSlot",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seed, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Seed)
	fc.Result = res
	return ec.marshalOSeed2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSeed(ctx, field.Selections, res)
}

func (ec *executionContext) _SetSlot_slotIndex(ctx context.Context, field graphql.CollectedField, obj *model.SetSlot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SetSlot",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SlotIndex, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SetSlot_standing(ctx context.Context, field graphql.CollectedField, obj *model.SetSlot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SetSlot",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Standing, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Standing)
	fc.Result = res
	return ec.marshalOStanding2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStanding(ctx, field.Selections, res)
}

func (ec *executionContext) _Shop_id(ctx context.Context, field graphql.CollectedField, obj *model.Shop) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Shop",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Shop_levels(ctx context.Context, field graphql.CollectedField, obj *model.Shop) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Shop",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Shop_levels_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Levels, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ShopLevelConnection)
	fc.Result = res
	return ec.marshalOShopLevelConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐShopLevelConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Shop_messages(ctx context.Context, field graphql.CollectedField, obj *model.Shop) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Shop",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Shop_messages_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Messages, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ShopOrderMessageConnection)
	fc.Result = res
	return ec.marshalOShopOrderMessageConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐShopOrderMessageConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Shop_name(ctx context.Context, field graphql.CollectedField, obj *model.Shop) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Shop",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Shop_slug(ctx context.Context, field graphql.CollectedField, obj *model.Shop) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Shop",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slug, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Shop_url(ctx context.Context, field graphql.CollectedField, obj *model.Shop) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Shop",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ShopLevel_id(ctx context.Context, field graphql.CollectedField, obj *model.ShopLevel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShopLevel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ShopLevel_currAmount(ctx context.Context, field graphql.CollectedField, obj *model.ShopLevel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShopLevel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrAmount, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ShopLevel_description(ctx context.Context, field graphql.CollectedField, obj *model.ShopLevel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShopLevel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ShopLevel_goalAmount(ctx context.Context, field graphql.CollectedField, obj *model.ShopLevel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShopLevel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GoalAmount, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ShopLevel_images(ctx context.Context, field graphql.CollectedField, obj *model.ShopLevel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShopLevel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ShopLevel_images_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Images, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Image)
	fc.Result = res
	return ec.marshalOImage2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _ShopLevel_name(ctx context.Context, field graphql.CollectedField, obj *model.ShopLevel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShopLevel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ShopLevelConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.ShopLevelConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShopLevelConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ShopLevelConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.ShopLevelConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShopLevelConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ShopLevel)
	fc.Result = res
	return ec.marshalOShopLevel2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐShopLevel(ctx, field.Selections, res)
}

func (ec *executionContext) _ShopOrderMessage_id(ctx context.Context, field graphql.CollectedField, obj *model.ShopOrderMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShopOrderMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ShopOrderMessage_gamertag(ctx context.Context, field graphql.CollectedField, obj *model.ShopOrderMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShopOrderMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gamertag, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ShopOrderMessage_message(ctx context.Context, field graphql.CollectedField, obj *model.ShopOrderMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShopOrderMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ShopOrderMessage_name(ctx context.Context, field graphql.CollectedField, obj *model.ShopOrderMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShopOrderMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ShopOrderMessage_player(ctx context.Context, field graphql.CollectedField, obj *model.ShopOrderMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShopOrderMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Player, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Player)
	fc.Result = res
	return ec.marshalOPlayer2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPlayer(ctx, field.Selections, res)
}

func (ec *executionContext) _ShopOrderMessage_total(ctx context.Context, field graphql.CollectedField, obj *model.ShopOrderMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShopOrderMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ShopOrderMessageConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.ShopOrderMessageConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShopOrderMessageConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ShopOrderMessageConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.ShopOrderMessageConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShopOrderMessageConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ShopOrderMessage)
	fc.Result = res
	return ec.marshalOShopOrderMessage2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐShopOrderMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _Stage_id(ctx context.Context, field graphql.CollectedField, obj *model.Stage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Stage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Stage_name(ctx context.Context, field graphql.CollectedField, obj *model.Stage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Stage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Standing_container(ctx context.Context, field graphql.CollectedField, obj *model.Standing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Standing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Container, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(model.StandingContainer)
	fc.Result = res
	return ec.marshalOStandingContainer2githubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStandingContainer(ctx, field.Selections, res)
}

func (ec *executionContext) _Standing_id(ctx context.Context, field graphql.CollectedField, obj *model.Standing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Standing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Standing_entrant(ctx context.Context, field graphql.CollectedField, obj *model.Standing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Standing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Entrant, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Entrant)
	fc.Result = res
	return ec.marshalOEntrant2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEntrant(ctx, field.Selections, res)
}

func (ec *executionContext) _Standing_isFinal(ctx context.Context, field graphql.CollectedField, obj *model.Standing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Standing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFinal, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Standing_metadata(ctx context.Context, field graphql.CollectedField, obj *model.Standing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Standing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOJSON2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Standing_placement(ctx context.Context, field graphql.CollectedField, obj *model.Standing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Standing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Placement, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Standing_player(ctx context.Context, field graphql.CollectedField, obj *model.Standing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Standing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Player, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Player)
	fc.Result = res
	return ec.marshalOPlayer2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPlayer(ctx, field.Selections, res)
}

func (ec *executionContext) _Standing_standing(ctx context.Context, field graphql.CollectedField, obj *model.Standing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Standing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Standing, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Standing_stats(ctx context.Context, field graphql.CollectedField, obj *model.Standing) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Standing",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stats, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StandingStats)
	fc.Result = res
	return ec.marshalOStandingStats2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStandingStats(ctx, field.Selections, res)
}

func (ec *executionContext) _StandingConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.StandingConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StandingConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _StandingConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.StandingConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StandingConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Standing)
	fc.Result = res
	return ec.marshalOStanding2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStanding(ctx, field.Selections, res)
}

func (ec *executionContext) _StandingStats_score(ctx context.Context, field graphql.CollectedField, obj *model.StandingStats) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StandingStats",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Score)
	fc.Result = res
	return ec.marshalOScore2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐScore(ctx, field.Selections, res)
}

func (ec *executionContext) _Stations_id(ctx context.Context, field graphql.CollectedField, obj *model.Stations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Stations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Stations_canAutoAssign(ctx context.Context, field graphql.CollectedField, obj *model.Stations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Stations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanAutoAssign, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Stations_clusterNumber(ctx context.Context, field graphql.CollectedField, obj *model.Stations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Stations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClusterNumber, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Stations_clusterPrefix(ctx context.Context, field graphql.CollectedField, obj *model.Stations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Stations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClusterPrefix, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Stations_enabled(ctx context.Context, field graphql.CollectedField, obj *model.Stations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Stations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Stations_identifier(ctx context.Context, field graphql.CollectedField, obj *model.Stations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Stations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Stations_numSetups(ctx context.Context, field graphql.CollectedField, obj *model.Stations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Stations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumSetups, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Stations_number(ctx context.Context, field graphql.CollectedField, obj *model.Stations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Stations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Stations_prefix(ctx context.Context, field graphql.CollectedField, obj *model.Stations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Stations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Prefix, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Stations_queue(ctx context.Context, field graphql.CollectedField, obj *model.Stations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Stations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Queue, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOJSON2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Stations_queueDepth(ctx context.Context, field graphql.CollectedField, obj *model.Stations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Stations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueueDepth, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Stations_state(ctx context.Context, field graphql.CollectedField, obj *model.Stations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Stations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Stations_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Stations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Stations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _StationsConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.StationsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StationsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _StationsConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.StationsConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StationsConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Stations)
	fc.Result = res
	return ec.marshalOStations2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStations(ctx, field.Selections, res)
}

func (ec *executionContext) _Stream_id(ctx context.Context, field graphql.CollectedField, obj *model.Stream) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Stream",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Stream_isOnline(ctx context.Context, field graphql.CollectedField, obj *model.Stream) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Stream",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOnline, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Stream_name(ctx context.Context, field graphql.CollectedField, obj *model.Stream) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Stream",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Stream_type(ctx context.Context, field graphql.CollectedField, obj *model.Stream) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Stream",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StreamType)
	fc.Result = res
	return ec.marshalOStreamType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStreamType(ctx, field.Selections, res)
}

func (ec *executionContext) _StreamQueue_id(ctx context.Context, field graphql.CollectedField, obj *model.StreamQueue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StreamQueue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _StreamQueue_sets(ctx context.Context, field graphql.CollectedField, obj *model.StreamQueue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StreamQueue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sets, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Set)
	fc.Result = res
	return ec.marshalOSet2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSet(ctx, field.Selections, res)
}

func (ec *executionContext) _StreamQueue_stream(ctx context.Context, field graphql.CollectedField, obj *model.StreamQueue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StreamQueue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stream, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Streams)
	fc.Result = res
	return ec.marshalOStreams2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStreams(ctx, field.Selections, res)
}

func (ec *executionContext) _Streams_id(ctx context.Context, field graphql.CollectedField, obj *model.Streams) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Streams",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Streams_enabled(ctx context.Context, field graphql.CollectedField, obj *model.Streams) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Streams",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Streams_followerCount(ctx context.Context, field graphql.CollectedField, obj *model.Streams) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Streams",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FollowerCount, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Streams_isOnline(ctx context.Context, field graphql.CollectedField, obj *model.Streams) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Streams",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOnline, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Streams_numSetups(ctx context.Context, field graphql.CollectedField, obj *model.Streams) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Streams",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumSetups, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Streams_parentStreamId(ctx context.Context, field graphql.CollectedField, obj *model.Streams) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Streams",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentStreamID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Streams_streamGame(ctx context.Context, field graphql.CollectedField, obj *model.Streams) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Streams",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreamGame, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Streams_streamId(ctx context.Context, field graphql.CollectedField, obj *model.Streams) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Streams",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreamID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Streams_streamLogo(ctx context.Context, field graphql.CollectedField, obj *model.Streams) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Streams",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreamLogo, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Streams_streamName(ctx context.Context, field graphql.CollectedField, obj *model.Streams) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Streams",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreamName, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Streams_streamSource(ctx context.Context, field graphql.CollectedField, obj *model.Streams) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Streams",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreamSource, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StreamSource)
	fc.Result = res
	return ec.marshalOStreamSource2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStreamSource(ctx, field.Selections, res)
}

func (ec *executionContext) _Streams_streamStatus(ctx context.Context, field graphql.CollectedField, obj *model.Streams) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Streams",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreamStatus, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Streams_streamType(ctx context.Context, field graphql.CollectedField, obj *model.Streams) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Streams",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreamType, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Streams_streamTypeId(ctx context.Context, field graphql.CollectedField, obj *model.Streams) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Streams",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreamTypeID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Team_id(ctx context.Context, field graphql.CollectedField, obj *model.Team) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Team",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Team_entrant(ctx context.Context, field graphql.CollectedField, obj *model.Team) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Team",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Entrant, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Entrant)
	fc.Result = res
	return ec.marshalOEntrant2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEntrant(ctx, field.Selections, res)
}

func (ec *executionContext) _Team_event(ctx context.Context, field graphql.CollectedField, obj *model.Team) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Team",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Event, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEvent(ctx, field.Selections, res)
}

func (ec *executionContext) _Team_name(ctx context.Context, field graphql.CollectedField, obj *model.Team) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Team",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TeamConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.TeamConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TeamConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _TeamConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.TeamConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TeamConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Team)
	fc.Result = res
	return ec.marshalOTeam2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTeam(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_id(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_addrState(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddrState, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_admins(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Tournament_admins_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Admins, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_city(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_countryCode(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryCode, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_currency(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_endAt(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_eventRegistrationClosesAt(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventRegistrationClosesAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_events(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Tournament_events_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Events, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Event)
	fc.Result = res
	return ec.marshalOEvent2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEvent(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_hasOfflineEvents(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasOfflineEvents, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_hasOnlineEvents(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasOnlineEvents, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_hashtag(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hashtag, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_images(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Tournament_images_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Images, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Image)
	fc.Result = res
	return ec.marshalOImage2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_isOnline(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOnline, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_isRegistrationOpen(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRegistrationOpen, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_lat(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lat, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_links(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Links, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TournamentLinks)
	fc.Result = res
	return ec.marshalOTournamentLinks2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTournamentLinks(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_lng(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lng, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_mapsPlaceId(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MapsPlaceID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_name(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_numAttendees(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumAttendees, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_owner(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_participants(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Tournament_participants_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Participants, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ParticipantConnection)
	fc.Result = res
	return ec.marshalOParticipantConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐParticipantConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_postalCode(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostalCode, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_primaryContact(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrimaryContact, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_primaryContactType(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrimaryContactType, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_publishing(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Publishing, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOJSON2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_registrationClosesAt(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationClosesAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_rules(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rules, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_shortSlug(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortSlug, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_slug(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slug, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_startAt(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_state(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_stations(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Tournament_stations_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stations, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StationsConnection)
	fc.Result = res
	return ec.marshalOStationsConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStationsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_streamQueue(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreamQueue, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.StreamQueue)
	fc.Result = res
	return ec.marshalOStreamQueue2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStreamQueue(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_streams(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Streams, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Streams)
	fc.Result = res
	return ec.marshalOStreams2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStreams(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_teamCreationClosesAt(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamCreationClosesAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_teams(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Tournament_teams_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Teams, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TeamConnection)
	fc.Result = res
	return ec.marshalOTeamConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTeamConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_timezone(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timezone, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_tournamentType(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TournamentType, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_url(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Tournament_url_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_venueAddress(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VenueAddress, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_venueName(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VenueName, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tournament_waves(ctx context.Context, field graphql.CollectedField, obj *model.Tournament) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tournament",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Waves, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Wave)
	fc.Result = res
	return ec.marshalOWave2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐWave(ctx, field.Selections, res)
}

func (ec *executionContext) _TournamentConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.TournamentConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TournamentConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _TournamentConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.TournamentConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TournamentConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Tournament)
	fc.Result = res
	return ec.marshalOTournament2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTournament(ctx, field.Selections, res)
}

func (ec *executionContext) _TournamentLinks_facebook(ctx context.Context, field graphql.CollectedField, obj *model.TournamentLinks) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TournamentLinks",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Facebook, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TournamentLinks_discord(ctx context.Context, field graphql.CollectedField, obj *model.TournamentLinks) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TournamentLinks",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Discord, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_authorizations(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_User_authorizations_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Authorizations, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProfileAuthorization)
	fc.Result = res
	return ec.marshalOProfileAuthorization2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐProfileAuthorization(ctx, field.Selections, res)
}

func (ec *executionContext) _User_bio(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bio, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_birthday(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Birthday, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_events(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_User_events_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Events, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EventConnection)
	fc.Result = res
	return ec.marshalOEventConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEventConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _User_genderPronoun(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GenderPronoun, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_images(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_User_images_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Images, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Image)
	fc.Result = res
	return ec.marshalOImage2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _User_leagues(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_User_leagues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Leagues, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LeagueConnection)
	fc.Result = res
	return ec.marshalOLeagueConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐLeagueConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _User_location(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Address)
	fc.Result = res
	return ec.marshalOAddress2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _User_name(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_player(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Player, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Player)
	fc.Result = res
	return ec.marshalOPlayer2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPlayer(ctx, field.Selections, res)
}

func (ec *executionContext) _User_slug(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slug, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_tournaments(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_User_tournaments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tournaments, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TournamentConnection)
	fc.Result = res
	return ec.marshalOTournamentConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTournamentConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Videogame_id(ctx context.Context, field graphql.CollectedField, obj *model.Videogame) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Videogame",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Videogame_displayName(ctx context.Context, field graphql.CollectedField, obj *model.Videogame) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Videogame",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Videogame_images(ctx context.Context, field graphql.CollectedField, obj *model.Videogame) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Videogame",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Videogame_images_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Images, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Image)
	fc.Result = res
	return ec.marshalOImage2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Videogame_name(ctx context.Context, field graphql.CollectedField, obj *model.Videogame) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Videogame",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Videogame_slug(ctx context.Context, field graphql.CollectedField, obj *model.Videogame) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Videogame",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slug, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VideogameConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.VideogameConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideogameConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _VideogameConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.VideogameConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VideogameConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Videogame)
	fc.Result = res
	return ec.marshalOVideogame2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐVideogame(ctx, field.Selections, res)
}

func (ec *executionContext) _Wave_id(ctx context.Context, field graphql.CollectedField, obj *model.Wave) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Wave",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Wave_identifier(ctx context.Context, field graphql.CollectedField, obj *model.Wave) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Wave",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Wave_startAt(ctx context.Context, field graphql.CollectedField, obj *model.Wave) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Wave",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartAt, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputEventEntrantPageQuery(ctx context.Context, obj interface{}) (model.EventEntrantPageQuery, error) {
	var it model.EventEntrantPageQuery
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "perPage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			it.PerPage, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
			it.SortBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalOEventEntrantPageQueryFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEventEntrantPageQueryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventEntrantPageQueryFilter(ctx context.Context, obj interface{}) (model.EventEntrantPageQueryFilter, error) {
	var it model.EventEntrantPageQueryFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventOwnersQuery(ctx context.Context, obj interface{}) (model.EventOwnersQuery, error) {
	var it model.EventOwnersQuery
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["page"]; !present {
		asMap["page"] = 1
	}
	if _, present := asMap["perPage"]; !present {
		asMap["perPage"] = 25
	}

	for k, v := range asMap {
		switch k {
		case "page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "perPage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			it.PerPage, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
			it.SortBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLeagueEventsFilter(ctx context.Context, obj interface{}) (model.LeagueEventsFilter, error) {
	var it model.LeagueEventsFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "tierIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tierIds"))
			it.TierIds, err = ec.unmarshalOID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "upcoming":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("upcoming"))
			it.Upcoming, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLeagueEventsQuery(ctx context.Context, obj interface{}) (model.LeagueEventsQuery, error) {
	var it model.LeagueEventsQuery
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["page"]; !present {
		asMap["page"] = 1
	}
	if _, present := asMap["perPage"]; !present {
		asMap["perPage"] = 25
	}

	for k, v := range asMap {
		switch k {
		case "page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "perPage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			it.PerPage, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
			it.SortBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalOLeagueEventsFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐLeagueEventsFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLocationFilterType(ctx context.Context, obj interface{}) (model.LocationFilterType, error) {
	var it model.LocationFilterType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "countryCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryCode"))
			it.CountryCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			it.City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaginationSearchType(ctx context.Context, obj interface{}) (model.PaginationSearchType, error) {
	var it model.PaginationSearchType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "fieldsToSearch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fieldsToSearch"))
			it.FieldsToSearch, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "searchString":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchString"))
			it.SearchString, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputParticipantPageFilter(ctx context.Context, obj interface{}) (model.ParticipantPageFilter, error) {
	var it model.ParticipantPageFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			it.Ids, err = ec.unmarshalOID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "eventIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventIds"))
			it.EventIds, err = ec.unmarshalOID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOParticipantSearch2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐParticipantSearch(ctx, v)
			if err != nil {
				return it, err
			}
		case "gamerTag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gamerTag"))
			it.GamerTag, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "unpaid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unpaid"))
			it.Unpaid, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "incompleteTeam":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("incompleteTeam"))
			it.IncompleteTeam, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "missingDeck":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("missingDeck"))
			it.MissingDeck, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "checkedIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("checkedIn"))
			it.CheckedIn, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "notCheckedIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notCheckedIn"))
			it.NotCheckedIn, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputParticipantPaginationQuery(ctx context.Context, obj interface{}) (model.ParticipantPaginationQuery, error) {
	var it model.ParticipantPaginationQuery
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["page"]; !present {
		asMap["page"] = 1
	}
	if _, present := asMap["perPage"]; !present {
		asMap["perPage"] = 25
	}

	for k, v := range asMap {
		switch k {
		case "page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "perPage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			it.PerPage, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
			it.SortBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalOParticipantPageFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐParticipantPageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputParticipantSearch(ctx context.Context, obj interface{}) (model.ParticipantSearch, error) {
	var it model.ParticipantSearch
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "fieldsToSearch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fieldsToSearch"))
			it.FieldsToSearch, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "searchString":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchString"))
			it.SearchString, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPhaseGroupPageQuery(ctx context.Context, obj interface{}) (model.PhaseGroupPageQuery, error) {
	var it model.PhaseGroupPageQuery
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "perPage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			it.PerPage, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
			it.SortBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrantIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrantIds"))
			it.EntrantIds, err = ec.unmarshalOID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalOPhaseGroupPageQueryFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhaseGroupPageQueryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPhaseGroupPageQueryFilter(ctx context.Context, obj interface{}) (model.PhaseGroupPageQueryFilter, error) {
	var it model.PhaseGroupPageQueryFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "waveId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("waveId"))
			it.WaveID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPhaseGroupUpdateInput(ctx context.Context, obj interface{}) (model.PhaseGroupUpdateInput, error) {
	var it model.PhaseGroupUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "phaseGroupId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phaseGroupId"))
			it.PhaseGroupID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "stationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stationId"))
			it.StationID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "waveId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("waveId"))
			it.WaveID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPhaseUpsertInput(ctx context.Context, obj interface{}) (model.PhaseUpsertInput, error) {
	var it model.PhaseUpsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "groupCount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupCount"))
			it.GroupCount, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "bracketType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bracketType"))
			it.BracketType, err = ec.unmarshalOBracketType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐBracketType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputResolveConflictsLockedSeedConfig(ctx context.Context, obj interface{}) (model.ResolveConflictsLockedSeedConfig, error) {
	var it model.ResolveConflictsLockedSeedConfig
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "eventId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventId"))
			it.EventID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "numSeeds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numSeeds"))
			it.NumSeeds, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputResolveConflictsOptions(ctx context.Context, obj interface{}) (model.ResolveConflictsOptions, error) {
	var it model.ResolveConflictsOptions
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "lockedSeeds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lockedSeeds"))
			it.LockedSeeds, err = ec.unmarshalOResolveConflictsLockedSeedConfig2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐResolveConflictsLockedSeedConfig(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSeedPageFilter(ctx context.Context, obj interface{}) (model.SeedPageFilter, error) {
	var it model.SeedPageFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrantName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrantName"))
			it.EntrantName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "checkInState":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("checkInState"))
			it.CheckInState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "phaseGroupId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phaseGroupId"))
			it.PhaseGroupID, err = ec.unmarshalOID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phaseId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phaseId"))
			it.PhaseID, err = ec.unmarshalOID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "eventId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventId"))
			it.EventID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOSeedSearch2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSeedSearch(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSeedPaginationQuery(ctx context.Context, obj interface{}) (model.SeedPaginationQuery, error) {
	var it model.SeedPaginationQuery
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["page"]; !present {
		asMap["page"] = 1
	}
	if _, present := asMap["perPage"]; !present {
		asMap["perPage"] = 25
	}

	for k, v := range asMap {
		switch k {
		case "page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "perPage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			it.PerPage, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
			it.SortBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalOSeedPageFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSeedPageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSeedSearch(ctx context.Context, obj interface{}) (model.SeedSearch, error) {
	var it model.SeedSearch
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "fieldsToSearch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fieldsToSearch"))
			it.FieldsToSearch, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "searchString":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchString"))
			it.SearchString, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetFilterLocation(ctx context.Context, obj interface{}) (model.SetFilterLocation, error) {
	var it model.SetFilterLocation
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			it.Country, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "distanceFrom":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distanceFrom"))
			it.DistanceFrom, err = ec.unmarshalOSetFilterLocationDistanceFrom2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetFilterLocationDistanceFrom(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetFilterLocationDistanceFrom(ctx context.Context, obj interface{}) (model.SetFilterLocationDistanceFrom, error) {
	var it model.SetFilterLocationDistanceFrom
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "point":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("point"))
			it.Point, err = ec.unmarshalOSetFilterLocationDistanceFromPoint2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetFilterLocationDistanceFromPoint(ctx, v)
			if err != nil {
				return it, err
			}
		case "radius":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("radius"))
			it.Radius, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetFilterLocationDistanceFromPoint(ctx context.Context, obj interface{}) (model.SetFilterLocationDistanceFromPoint, error) {
	var it model.SetFilterLocationDistanceFromPoint
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "lat":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lat"))
			it.Lat, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lon":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lon"))
			it.Lon, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetFilters(ctx context.Context, obj interface{}) (model.SetFilters, error) {
	var it model.SetFilters
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "entrantIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrantIds"))
			it.EntrantIds, err = ec.unmarshalOID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrantSize":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrantSize"))
			it.EntrantSize, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasVod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasVod"))
			it.HasVod, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hideEmpty":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hideEmpty"))
			it.HideEmpty, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "showByes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("showByes"))
			it.ShowByes, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isEventOnline":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isEventOnline"))
			it.IsEventOnline, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalOSetFilterLocation2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetFilterLocation(ctx, v)
			if err != nil {
				return it, err
			}
		case "participantIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("participantIds"))
			it.ParticipantIds, err = ec.unmarshalOID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phaseGroupIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phaseGroupIds"))
			it.PhaseGroupIds, err = ec.unmarshalOID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phaseIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phaseIds"))
			it.PhaseIds, err = ec.unmarshalOID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "playerIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("playerIds"))
			it.PlayerIds, err = ec.unmarshalOID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "roundNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roundNumber"))
			it.RoundNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "stationIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stationIds"))
			it.StationIds, err = ec.unmarshalOID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stationNumbers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stationNumbers"))
			it.StationNumbers, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputShopLevelsQuery(ctx context.Context, obj interface{}) (model.ShopLevelsQuery, error) {
	var it model.ShopLevelsQuery
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["page"]; !present {
		asMap["page"] = 1
	}
	if _, present := asMap["perPage"]; !present {
		asMap["perPage"] = 25
	}

	for k, v := range asMap {
		switch k {
		case "page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "perPage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			it.PerPage, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
			it.SortBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputShopOrderMessagesQuery(ctx context.Context, obj interface{}) (model.ShopOrderMessagesQuery, error) {
	var it model.ShopOrderMessagesQuery
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["page"]; !present {
		asMap["page"] = 1
	}
	if _, present := asMap["perPage"]; !present {
		asMap["perPage"] = 25
	}

	for k, v := range asMap {
		switch k {
		case "page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "perPage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			it.PerPage, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
			it.SortBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStandingGroupStandingPageFilter(ctx context.Context, obj interface{}) (model.StandingGroupStandingPageFilter, error) {
	var it model.StandingGroupStandingPageFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "perPage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			it.PerPage, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
			it.SortBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStandingPageFilter(ctx context.Context, obj interface{}) (model.StandingPageFilter, error) {
	var it model.StandingPageFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			it.Ids, err = ec.unmarshalOID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOPaginationSearchType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPaginationSearchType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStandingPaginationQuery(ctx context.Context, obj interface{}) (model.StandingPaginationQuery, error) {
	var it model.StandingPaginationQuery
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["page"]; !present {
		asMap["page"] = 1
	}
	if _, present := asMap["perPage"]; !present {
		asMap["perPage"] = 25
	}

	for k, v := range asMap {
		switch k {
		case "page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "perPage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			it.PerPage, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
			it.SortBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalOStandingPageFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStandingPageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStationFilter(ctx context.Context, obj interface{}) (model.StationFilter, error) {
	var it model.StationFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "perPage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			it.PerPage, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStationUpsertInput(ctx context.Context, obj interface{}) (model.StationUpsertInput, error) {
	var it model.StationUpsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("number"))
			it.Number, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "clusterId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clusterId"))
			it.ClusterID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTeamsPageFilter(ctx context.Context, obj interface{}) (model.TeamsPageFilter, error) {
	var it model.TeamsPageFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "eventId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventId"))
			it.EventID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tournamentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tournamentId"))
			it.TournamentID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "eventIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventIds"))
			it.EventIds, err = ec.unmarshalOID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "incompleteTeam":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("incompleteTeam"))
			it.IncompleteTeam, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOJSON2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTeamsPaginationQuery(ctx context.Context, obj interface{}) (model.TeamsPaginationQuery, error) {
	var it model.TeamsPaginationQuery
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["page"]; !present {
		asMap["page"] = 1
	}
	if _, present := asMap["perPage"]; !present {
		asMap["perPage"] = 25
	}

	for k, v := range asMap {
		switch k {
		case "page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "perPage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			it.PerPage, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
			it.SortBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalOTeamsPageFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTeamsPageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTopGameFilter(ctx context.Context, obj interface{}) (model.TopGameFilter, error) {
	var it model.TopGameFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "gameNums":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameNums"))
			it.GameNums, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTournamentLocationFilter(ctx context.Context, obj interface{}) (model.TournamentLocationFilter, error) {
	var it model.TournamentLocationFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "distanceFrom":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distanceFrom"))
			it.DistanceFrom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "distance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distance"))
			it.Distance, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTournamentPageFilter(ctx context.Context, obj interface{}) (model.TournamentPageFilter, error) {
	var it model.TournamentPageFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			it.Ids, err = ec.unmarshalOID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ownerId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerId"))
			it.OwnerID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "countryCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryCode"))
			it.CountryCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "addrState":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addrState"))
			it.AddrState, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalOTournamentLocationFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTournamentLocationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "afterDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("afterDate"))
			it.AfterDate, err = ec.unmarshalOTimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "beforeDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("beforeDate"))
			it.BeforeDate, err = ec.unmarshalOTimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "computedUpdatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("computedUpdatedAt"))
			it.ComputedUpdatedAt, err = ec.unmarshalOTimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "venueName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("venueName"))
			it.VenueName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isFeatured":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isFeatured"))
			it.IsFeatured, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isLeague":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isLeague"))
			it.IsLeague, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasBannerImages":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBannerImages"))
			it.HasBannerImages, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "activeShops":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeShops"))
			it.ActiveShops, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "regOpen":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regOpen"))
			it.RegOpen, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "past":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("past"))
			it.Past, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "published":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
			it.Published, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffPicks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffPicks"))
			it.StaffPicks, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasOnlineEvents":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasOnlineEvents"))
			it.HasOnlineEvents, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "topGames":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topGames"))
			it.TopGames, err = ec.unmarshalOTopGameFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTopGameFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "upcoming":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("upcoming"))
			it.Upcoming, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "videogameIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("videogameIds"))
			it.VideogameIds, err = ec.unmarshalOID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTournamentQuery(ctx context.Context, obj interface{}) (model.TournamentQuery, error) {
	var it model.TournamentQuery
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["page"]; !present {
		asMap["page"] = 1
	}
	if _, present := asMap["perPage"]; !present {
		asMap["perPage"] = 25
	}

	for k, v := range asMap {
		switch k {
		case "page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "perPage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			it.PerPage, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
			it.SortBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalOTournamentPageFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTournamentPageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
			it.Sort, err = ec.unmarshalOTournamentPaginationSort2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTournamentPaginationSort(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePhaseSeedInfo(ctx context.Context, obj interface{}) (model.UpdatePhaseSeedInfo, error) {
	var it model.UpdatePhaseSeedInfo
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "seedId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seedId"))
			it.SeedID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "seedNum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seedNum"))
			it.SeedNum, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phaseGroupId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phaseGroupId"))
			it.PhaseGroupID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePhaseSeedingOptions(ctx context.Context, obj interface{}) (model.UpdatePhaseSeedingOptions, error) {
	var it model.UpdatePhaseSeedingOptions
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "strictMode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strictMode"))
			it.StrictMode, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserEventsPaginationFilter(ctx context.Context, obj interface{}) (model.UserEventsPaginationFilter, error) {
	var it model.UserEventsPaginationFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "videogameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("videogameId"))
			it.VideogameID, err = ec.unmarshalOID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "eventType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventType"))
			it.EventType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "minEntrantCount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minEntrantCount"))
			it.MinEntrantCount, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "maxEntrantCount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxEntrantCount"))
			it.MaxEntrantCount, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalOLocationFilterType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐLocationFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOPaginationSearchType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPaginationSearchType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserEventsPaginationQuery(ctx context.Context, obj interface{}) (model.UserEventsPaginationQuery, error) {
	var it model.UserEventsPaginationQuery
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["page"]; !present {
		asMap["page"] = 1
	}
	if _, present := asMap["perPage"]; !present {
		asMap["perPage"] = 25
	}

	for k, v := range asMap {
		switch k {
		case "page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "perPage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			it.PerPage, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
			it.SortBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalOUserEventsPaginationFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUserEventsPaginationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserLeaguesPaginationFilter(ctx context.Context, obj interface{}) (model.UserLeaguesPaginationFilter, error) {
	var it model.UserLeaguesPaginationFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "videogameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("videogameId"))
			it.VideogameID, err = ec.unmarshalOID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "upcoming":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("upcoming"))
			it.Upcoming, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "past":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("past"))
			it.Past, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOPaginationSearchType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPaginationSearchType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserLeaguesPaginationQuery(ctx context.Context, obj interface{}) (model.UserLeaguesPaginationQuery, error) {
	var it model.UserLeaguesPaginationQuery
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["page"]; !present {
		asMap["page"] = 1
	}
	if _, present := asMap["perPage"]; !present {
		asMap["perPage"] = 25
	}

	for k, v := range asMap {
		switch k {
		case "page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "perPage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			it.PerPage, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
			it.SortBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalOUserLeaguesPaginationFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUserLeaguesPaginationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserTournamentsPaginationFilter(ctx context.Context, obj interface{}) (model.UserTournamentsPaginationFilter, error) {
	var it model.UserTournamentsPaginationFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "past":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("past"))
			it.Past, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "upcoming":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("upcoming"))
			it.Upcoming, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOPaginationSearchType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPaginationSearchType(ctx, v)
			if err != nil {
				return it, err
			}
		case "videogameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("videogameId"))
			it.VideogameID, err = ec.unmarshalOID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tournamentView":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tournamentView"))
			it.TournamentView, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserTournamentsPaginationQuery(ctx context.Context, obj interface{}) (model.UserTournamentsPaginationQuery, error) {
	var it model.UserTournamentsPaginationQuery
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["page"]; !present {
		asMap["page"] = 1
	}
	if _, present := asMap["perPage"]; !present {
		asMap["perPage"] = 25
	}

	for k, v := range asMap {
		switch k {
		case "page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "perPage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			it.PerPage, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
			it.SortBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalOUserTournamentsPaginationFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUserTournamentsPaginationFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVideogamePageFilter(ctx context.Context, obj interface{}) (model.VideogamePageFilter, error) {
	var it model.VideogamePageFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "forUser":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("forUser"))
			it.ForUser, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVideogameQuery(ctx context.Context, obj interface{}) (model.VideogameQuery, error) {
	var it model.VideogameQuery
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["page"]; !present {
		asMap["page"] = 1
	}
	if _, present := asMap["perPage"]; !present {
		asMap["perPage"] = 25
	}

	for k, v := range asMap {
		switch k {
		case "page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "perPage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			it.PerPage, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
			it.SortBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalOVideogamePageFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐVideogamePageFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputWaveUpsertInput(ctx context.Context, obj interface{}) (model.WaveUpsertInput, error) {
	var it model.WaveUpsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifier"))
			it.Identifier, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "startAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startAt"))
			it.StartAt, err = ec.unmarshalNTimestamp2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "endAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endAt"))
			it.EndAt, err = ec.unmarshalNTimestamp2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _BracketConfig(ctx context.Context, sel ast.SelectionSet, obj model.BracketConfig) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.RaceBracketConfig:
		return ec._RaceBracketConfig(ctx, sel, &obj)
	case *model.RaceBracketConfig:
		if obj == nil {
			return graphql.Null
		}
		return ec._RaceBracketConfig(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _MatchConfig(ctx context.Context, sel ast.SelectionSet, obj model.MatchConfig) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.RaceMatchConfig:
		return ec._RaceMatchConfig(ctx, sel, &obj)
	case *model.RaceMatchConfig:
		if obj == nil {
			return graphql.Null
		}
		return ec._RaceMatchConfig(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _StandingContainer(ctx context.Context, sel ast.SelectionSet, obj model.StandingContainer) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.Tournament:
		return ec._Tournament(ctx, sel, &obj)
	case *model.Tournament:
		if obj == nil {
			return graphql.Null
		}
		return ec._Tournament(ctx, sel, obj)
	case model.Event:
		return ec._Event(ctx, sel, &obj)
	case *model.Event:
		if obj == nil {
			return graphql.Null
		}
		return ec._Event(ctx, sel, obj)
	case model.PhaseGroup:
		return ec._PhaseGroup(ctx, sel, &obj)
	case *model.PhaseGroup:
		if obj == nil {
			return graphql.Null
		}
		return ec._PhaseGroup(ctx, sel, obj)
	case model.Set:
		return ec._Set(ctx, sel, &obj)
	case *model.Set:
		if obj == nil {
			return graphql.Null
		}
		return ec._Set(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var addressImplementors = []string{"Address"}

func (ec *executionContext) _Address(ctx context.Context, sel ast.SelectionSet, obj *model.Address) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addressImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Address")
		case "id":
			out.Values[i] = ec._Address_id(ctx, field, obj)
		case "city":
			out.Values[i] = ec._Address_city(ctx, field, obj)
		case "country":
			out.Values[i] = ec._Address_country(ctx, field, obj)
		case "countryId":
			out.Values[i] = ec._Address_countryId(ctx, field, obj)
		case "state":
			out.Values[i] = ec._Address_state(ctx, field, obj)
		case "stateId":
			out.Values[i] = ec._Address_stateId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var contactInfoImplementors = []string{"ContactInfo"}

func (ec *executionContext) _ContactInfo(ctx context.Context, sel ast.SelectionSet, obj *model.ContactInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contactInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContactInfo")
		case "id":
			out.Values[i] = ec._ContactInfo_id(ctx, field, obj)
		case "city":
			out.Values[i] = ec._ContactInfo_city(ctx, field, obj)
		case "country":
			out.Values[i] = ec._ContactInfo_country(ctx, field, obj)
		case "countryId":
			out.Values[i] = ec._ContactInfo_countryId(ctx, field, obj)
		case "name":
			out.Values[i] = ec._ContactInfo_name(ctx, field, obj)
		case "nameFirst":
			out.Values[i] = ec._ContactInfo_nameFirst(ctx, field, obj)
		case "nameLast":
			out.Values[i] = ec._ContactInfo_nameLast(ctx, field, obj)
		case "state":
			out.Values[i] = ec._ContactInfo_state(ctx, field, obj)
		case "stateId":
			out.Values[i] = ec._ContactInfo_stateId(ctx, field, obj)
		case "zipcode":
			out.Values[i] = ec._ContactInfo_zipcode(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var entrantImplementors = []string{"Entrant"}

func (ec *executionContext) _Entrant(ctx context.Context, sel ast.SelectionSet, obj *model.Entrant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, entrantImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Entrant")
		case "id":
			out.Values[i] = ec._Entrant_id(ctx, field, obj)
		case "event":
			out.Values[i] = ec._Entrant_event(ctx, field, obj)
		case "isDisqualified":
			out.Values[i] = ec._Entrant_isDisqualified(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Entrant_name(ctx, field, obj)
		case "participants":
			out.Values[i] = ec._Entrant_participants(ctx, field, obj)
		case "seeds":
			out.Values[i] = ec._Entrant_seeds(ctx, field, obj)
		case "skill":
			out.Values[i] = ec._Entrant_skill(ctx, field, obj)
		case "standing":
			out.Values[i] = ec._Entrant_standing(ctx, field, obj)
		case "stream":
			out.Values[i] = ec._Entrant_stream(ctx, field, obj)
		case "streams":
			out.Values[i] = ec._Entrant_streams(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var entrantConnectionImplementors = []string{"EntrantConnection"}

func (ec *executionContext) _EntrantConnection(ctx context.Context, sel ast.SelectionSet, obj *model.EntrantConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, entrantConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EntrantConnection")
		case "pageInfo":
			out.Values[i] = ec._EntrantConnection_pageInfo(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._EntrantConnection_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var eventImplementors = []string{"Event", "StandingContainer"}

func (ec *executionContext) _Event(ctx context.Context, sel ast.SelectionSet, obj *model.Event) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eventImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Event")
		case "id":
			out.Values[i] = ec._Event_id(ctx, field, obj)
		case "checkInBuffer":
			out.Values[i] = ec._Event_checkInBuffer(ctx, field, obj)
		case "checkInDuration":
			out.Values[i] = ec._Event_checkInDuration(ctx, field, obj)
		case "checkInEnabled":
			out.Values[i] = ec._Event_checkInEnabled(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Event_createdAt(ctx, field, obj)
		case "deckSubmissionDeadline":
			out.Values[i] = ec._Event_deckSubmissionDeadline(ctx, field, obj)
		case "entrantSizeMax":
			out.Values[i] = ec._Event_entrantSizeMax(ctx, field, obj)
		case "entrantSizeMin":
			out.Values[i] = ec._Event_entrantSizeMin(ctx, field, obj)
		case "entrants":
			out.Values[i] = ec._Event_entrants(ctx, field, obj)
		case "hasDecks":
			out.Values[i] = ec._Event_hasDecks(ctx, field, obj)
		case "hasTasks":
			out.Values[i] = ec._Event_hasTasks(ctx, field, obj)
		case "images":
			out.Values[i] = ec._Event_images(ctx, field, obj)
		case "isOnline":
			out.Values[i] = ec._Event_isOnline(ctx, field, obj)
		case "matchRulesMarkdown":
			out.Values[i] = ec._Event_matchRulesMarkdown(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Event_name(ctx, field, obj)
		case "numEntrants":
			out.Values[i] = ec._Event_numEntrants(ctx, field, obj)
		case "phaseGroups":
			out.Values[i] = ec._Event_phaseGroups(ctx, field, obj)
		case "phases":
			out.Values[i] = ec._Event_phases(ctx, field, obj)
		case "prizingInfo":
			out.Values[i] = ec._Event_prizingInfo(ctx, field, obj)
		case "publishing":
			out.Values[i] = ec._Event_publishing(ctx, field, obj)
		case "rulesMarkdown":
			out.Values[i] = ec._Event_rulesMarkdown(ctx, field, obj)
		case "rulesetId":
			out.Values[i] = ec._Event_rulesetId(ctx, field, obj)
		case "rulesetSettings":
			out.Values[i] = ec._Event_rulesetSettings(ctx, field, obj)
		case "sets":
			out.Values[i] = ec._Event_sets(ctx, field, obj)
		case "slug":
			out.Values[i] = ec._Event_slug(ctx, field, obj)
		case "standings":
			out.Values[i] = ec._Event_standings(ctx, field, obj)
		case "startAt":
			out.Values[i] = ec._Event_startAt(ctx, field, obj)
		case "state":
			out.Values[i] = ec._Event_state(ctx, field, obj)
		case "stations":
			out.Values[i] = ec._Event_stations(ctx, field, obj)
		case "teamManagementDeadline":
			out.Values[i] = ec._Event_teamManagementDeadline(ctx, field, obj)
		case "teamNameAllowed":
			out.Values[i] = ec._Event_teamNameAllowed(ctx, field, obj)
		case "tournament":
			out.Values[i] = ec._Event_tournament(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Event_type(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Event_updatedAt(ctx, field, obj)
		case "useEventSeeds":
			out.Values[i] = ec._Event_useEventSeeds(ctx, field, obj)
		case "videogame":
			out.Values[i] = ec._Event_videogame(ctx, field, obj)
		case "waves":
			out.Values[i] = ec._Event_waves(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var eventConnectionImplementors = []string{"EventConnection"}

func (ec *executionContext) _EventConnection(ctx context.Context, sel ast.SelectionSet, obj *model.EventConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eventConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventConnection")
		case "pageInfo":
			out.Values[i] = ec._EventConnection_pageInfo(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._EventConnection_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var eventOwnerImplementors = []string{"EventOwner"}

func (ec *executionContext) _EventOwner(ctx context.Context, sel ast.SelectionSet, obj *model.EventOwner) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eventOwnerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventOwner")
		case "eventId":
			out.Values[i] = ec._EventOwner_eventId(ctx, field, obj)
		case "email":
			out.Values[i] = ec._EventOwner_email(ctx, field, obj)
		case "gamerTag":
			out.Values[i] = ec._EventOwner_gamerTag(ctx, field, obj)
		case "fullName":
			out.Values[i] = ec._EventOwner_fullName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var eventOwnerConnectionImplementors = []string{"EventOwnerConnection"}

func (ec *executionContext) _EventOwnerConnection(ctx context.Context, sel ast.SelectionSet, obj *model.EventOwnerConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eventOwnerConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventOwnerConnection")
		case "pageInfo":
			out.Values[i] = ec._EventOwnerConnection_pageInfo(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._EventOwnerConnection_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var gameImplementors = []string{"Game"}

func (ec *executionContext) _Game(ctx context.Context, sel ast.SelectionSet, obj *model.Game) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gameImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Game")
		case "id":
			out.Values[i] = ec._Game_id(ctx, field, obj)
		case "images":
			out.Values[i] = ec._Game_images(ctx, field, obj)
		case "orderNum":
			out.Values[i] = ec._Game_orderNum(ctx, field, obj)
		case "selections":
			out.Values[i] = ec._Game_selections(ctx, field, obj)
		case "stage":
			out.Values[i] = ec._Game_stage(ctx, field, obj)
		case "state":
			out.Values[i] = ec._Game_state(ctx, field, obj)
		case "winnerId":
			out.Values[i] = ec._Game_winnerId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var gameSelectionImplementors = []string{"GameSelection"}

func (ec *executionContext) _GameSelection(ctx context.Context, sel ast.SelectionSet, obj *model.GameSelection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gameSelectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GameSelection")
		case "id":
			out.Values[i] = ec._GameSelection_id(ctx, field, obj)
		case "entrant":
			out.Values[i] = ec._GameSelection_entrant(ctx, field, obj)
		case "orderNum":
			out.Values[i] = ec._GameSelection_orderNum(ctx, field, obj)
		case "participant":
			out.Values[i] = ec._GameSelection_participant(ctx, field, obj)
		case "selectionType":
			out.Values[i] = ec._GameSelection_selectionType(ctx, field, obj)
		case "selectionValue":
			out.Values[i] = ec._GameSelection_selectionValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imageImplementors = []string{"Image"}

func (ec *executionContext) _Image(ctx context.Context, sel ast.SelectionSet, obj *model.Image) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Image")
		case "id":
			out.Values[i] = ec._Image_id(ctx, field, obj)
		case "height":
			out.Values[i] = ec._Image_height(ctx, field, obj)
		case "ratio":
			out.Values[i] = ec._Image_ratio(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Image_type(ctx, field, obj)
		case "url":
			out.Values[i] = ec._Image_url(ctx, field, obj)
		case "width":
			out.Values[i] = ec._Image_width(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var leagueImplementors = []string{"League"}

func (ec *executionContext) _League(ctx context.Context, sel ast.SelectionSet, obj *model.League) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, leagueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("League")
		case "id":
			out.Values[i] = ec._League_id(ctx, field, obj)
		case "addrState":
			out.Values[i] = ec._League_addrState(ctx, field, obj)
		case "city":
			out.Values[i] = ec._League_city(ctx, field, obj)
		case "countryCode":
			out.Values[i] = ec._League_countryCode(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._League_createdAt(ctx, field, obj)
		case "currency":
			out.Values[i] = ec._League_currency(ctx, field, obj)
		case "endAt":
			out.Values[i] = ec._League_endAt(ctx, field, obj)
		case "entrantCount":
			out.Values[i] = ec._League_entrantCount(ctx, field, obj)
		case "eventOwners":
			out.Values[i] = ec._League_eventOwners(ctx, field, obj)
		case "eventRegistrationClosesAt":
			out.Values[i] = ec._League_eventRegistrationClosesAt(ctx, field, obj)
		case "events":
			out.Values[i] = ec._League_events(ctx, field, obj)
		case "finalEventId":
			out.Values[i] = ec._League_finalEventId(ctx, field, obj)
		case "hasOfflineEvents":
			out.Values[i] = ec._League_hasOfflineEvents(ctx, field, obj)
		case "hasOnlineEvents":
			out.Values[i] = ec._League_hasOnlineEvents(ctx, field, obj)
		case "hashtag":
			out.Values[i] = ec._League_hashtag(ctx, field, obj)
		case "images":
			out.Values[i] = ec._League_images(ctx, field, obj)
		case "isOnline":
			out.Values[i] = ec._League_isOnline(ctx, field, obj)
		case "lat":
			out.Values[i] = ec._League_lat(ctx, field, obj)
		case "links":
			out.Values[i] = ec._League_links(ctx, field, obj)
		case "lng":
			out.Values[i] = ec._League_lng(ctx, field, obj)
		case "mapsPlaceId":
			out.Values[i] = ec._League_mapsPlaceId(ctx, field, obj)
		case "name":
			out.Values[i] = ec._League_name(ctx, field, obj)
		case "numProgressingToFinalEvent":
			out.Values[i] = ec._League_numProgressingToFinalEvent(ctx, field, obj)
		case "numUniquePlayers":
			out.Values[i] = ec._League_numUniquePlayers(ctx, field, obj)
		case "postalCode":
			out.Values[i] = ec._League_postalCode(ctx, field, obj)
		case "primaryContact":
			out.Values[i] = ec._League_primaryContact(ctx, field, obj)
		case "primaryContactType":
			out.Values[i] = ec._League_primaryContactType(ctx, field, obj)
		case "publishing":
			out.Values[i] = ec._League_publishing(ctx, field, obj)
		case "registrationClosesAt":
			out.Values[i] = ec._League_registrationClosesAt(ctx, field, obj)
		case "rules":
			out.Values[i] = ec._League_rules(ctx, field, obj)
		case "shortSlug":
			out.Values[i] = ec._League_shortSlug(ctx, field, obj)
		case "showStandings":
			out.Values[i] = ec._League_showStandings(ctx, field, obj)
		case "slug":
			out.Values[i] = ec._League_slug(ctx, field, obj)
		case "standings":
			out.Values[i] = ec._League_standings(ctx, field, obj)
		case "startAt":
			out.Values[i] = ec._League_startAt(ctx, field, obj)
		case "state":
			out.Values[i] = ec._League_state(ctx, field, obj)
		case "teamCreationClosesAt":
			out.Values[i] = ec._League_teamCreationClosesAt(ctx, field, obj)
		case "timezone":
			out.Values[i] = ec._League_timezone(ctx, field, obj)
		case "tournamentType":
			out.Values[i] = ec._League_tournamentType(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._League_updatedAt(ctx, field, obj)
		case "url":
			out.Values[i] = ec._League_url(ctx, field, obj)
		case "venueAddress":
			out.Values[i] = ec._League_venueAddress(ctx, field, obj)
		case "venueName":
			out.Values[i] = ec._League_venueName(ctx, field, obj)
		case "videogames":
			out.Values[i] = ec._League_videogames(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var leagueConnectionImplementors = []string{"LeagueConnection"}

func (ec *executionContext) _LeagueConnection(ctx context.Context, sel ast.SelectionSet, obj *model.LeagueConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, leagueConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LeagueConnection")
		case "pageInfo":
			out.Values[i] = ec._LeagueConnection_pageInfo(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._LeagueConnection_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "deletePhase":
			out.Values[i] = ec._Mutation_deletePhase(ctx, field)
		case "deleteStation":
			out.Values[i] = ec._Mutation_deleteStation(ctx, field)
		case "deleteWave":
			out.Values[i] = ec._Mutation_deleteWave(ctx, field)
		case "resolveScheduleConflicts":
			out.Values[i] = ec._Mutation_resolveScheduleConflicts(ctx, field)
		case "swapSeeds":
			out.Values[i] = ec._Mutation_swapSeeds(ctx, field)
		case "updatePhaseGroups":
			out.Values[i] = ec._Mutation_updatePhaseGroups(ctx, field)
		case "updatePhaseSeeding":
			out.Values[i] = ec._Mutation_updatePhaseSeeding(ctx, field)
		case "upsertPhase":
			out.Values[i] = ec._Mutation_upsertPhase(ctx, field)
		case "upsertStation":
			out.Values[i] = ec._Mutation_upsertStation(ctx, field)
		case "upsertWave":
			out.Values[i] = ec._Mutation_upsertWave(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *model.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "total":
			out.Values[i] = ec._PageInfo_total(ctx, field, obj)
		case "totalPages":
			out.Values[i] = ec._PageInfo_totalPages(ctx, field, obj)
		case "page":
			out.Values[i] = ec._PageInfo_page(ctx, field, obj)
		case "perPage":
			out.Values[i] = ec._PageInfo_perPage(ctx, field, obj)
		case "sortBy":
			out.Values[i] = ec._PageInfo_sortBy(ctx, field, obj)
		case "filter":
			out.Values[i] = ec._PageInfo_filter(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var participantImplementors = []string{"Participant"}

func (ec *executionContext) _Participant(ctx context.Context, sel ast.SelectionSet, obj *model.Participant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, participantImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Participant")
		case "id":
			out.Values[i] = ec._Participant_id(ctx, field, obj)
		case "checkedIn":
			out.Values[i] = ec._Participant_checkedIn(ctx, field, obj)
		case "checkedInAt":
			out.Values[i] = ec._Participant_checkedInAt(ctx, field, obj)
		case "connectedAccounts":
			out.Values[i] = ec._Participant_connectedAccounts(ctx, field, obj)
		case "contactInfo":
			out.Values[i] = ec._Participant_contactInfo(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Participant_email(ctx, field, obj)
		case "entrants":
			out.Values[i] = ec._Participant_entrants(ctx, field, obj)
		case "events":
			out.Values[i] = ec._Participant_events(ctx, field, obj)
		case "gamerTag":
			out.Values[i] = ec._Participant_gamerTag(ctx, field, obj)
		case "images":
			out.Values[i] = ec._Participant_images(ctx, field, obj)
		case "player":
			out.Values[i] = ec._Participant_player(ctx, field, obj)
		case "prefix":
			out.Values[i] = ec._Participant_prefix(ctx, field, obj)
		case "user":
			out.Values[i] = ec._Participant_user(ctx, field, obj)
		case "verified":
			out.Values[i] = ec._Participant_verified(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var participantConnectionImplementors = []string{"ParticipantConnection"}

func (ec *executionContext) _ParticipantConnection(ctx context.Context, sel ast.SelectionSet, obj *model.ParticipantConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, participantConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ParticipantConnection")
		case "pageInfo":
			out.Values[i] = ec._ParticipantConnection_pageInfo(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._ParticipantConnection_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var phaseImplementors = []string{"Phase"}

func (ec *executionContext) _Phase(ctx context.Context, sel ast.SelectionSet, obj *model.Phase) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, phaseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Phase")
		case "id":
			out.Values[i] = ec._Phase_id(ctx, field, obj)
		case "bracketType":
			out.Values[i] = ec._Phase_bracketType(ctx, field, obj)
		case "event":
			out.Values[i] = ec._Phase_event(ctx, field, obj)
		case "groupCount":
			out.Values[i] = ec._Phase_groupCount(ctx, field, obj)
		case "isExhibition":
			out.Values[i] = ec._Phase_isExhibition(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Phase_name(ctx, field, obj)
		case "numSeeds":
			out.Values[i] = ec._Phase_numSeeds(ctx, field, obj)
		case "paginatedSeeds":
			out.Values[i] = ec._Phase_paginatedSeeds(ctx, field, obj)
		case "phaseGroups":
			out.Values[i] = ec._Phase_phaseGroups(ctx, field, obj)
		case "phaseOrder":
			out.Values[i] = ec._Phase_phaseOrder(ctx, field, obj)
		case "seeds":
			out.Values[i] = ec._Phase_seeds(ctx, field, obj)
		case "sets":
			out.Values[i] = ec._Phase_sets(ctx, field, obj)
		case "state":
			out.Values[i] = ec._Phase_state(ctx, field, obj)
		case "waves":
			out.Values[i] = ec._Phase_waves(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var phaseGroupImplementors = []string{"PhaseGroup", "StandingContainer"}

func (ec *executionContext) _PhaseGroup(ctx context.Context, sel ast.SelectionSet, obj *model.PhaseGroup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, phaseGroupImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PhaseGroup")
		case "id":
			out.Values[i] = ec._PhaseGroup_id(ctx, field, obj)
		case "bracketType":
			out.Values[i] = ec._PhaseGroup_bracketType(ctx, field, obj)
		case "displayIdentifier":
			out.Values[i] = ec._PhaseGroup_displayIdentifier(ctx, field, obj)
		case "firstRoundTime":
			out.Values[i] = ec._PhaseGroup_firstRoundTime(ctx, field, obj)
		case "numRounds":
			out.Values[i] = ec._PhaseGroup_numRounds(ctx, field, obj)
		case "paginatedSeeds":
			out.Values[i] = ec._PhaseGroup_paginatedSeeds(ctx, field, obj)
		case "paginatedSets":
			out.Values[i] = ec._PhaseGroup_paginatedSets(ctx, field, obj)
		case "phase":
			out.Values[i] = ec._PhaseGroup_phase(ctx, field, obj)
		case "progressionsOut":
			out.Values[i] = ec._PhaseGroup_progressionsOut(ctx, field, obj)
		case "rounds":
			out.Values[i] = ec._PhaseGroup_rounds(ctx, field, obj)
		case "seedMap":
			out.Values[i] = ec._PhaseGroup_seedMap(ctx, field, obj)
		case "seeds":
			out.Values[i] = ec._PhaseGroup_seeds(ctx, field, obj)
		case "sets":
			out.Values[i] = ec._PhaseGroup_sets(ctx, field, obj)
		case "standings":
			out.Values[i] = ec._PhaseGroup_standings(ctx, field, obj)
		case "startAt":
			out.Values[i] = ec._PhaseGroup_startAt(ctx, field, obj)
		case "state":
			out.Values[i] = ec._PhaseGroup_state(ctx, field, obj)
		case "tiebreakOrder":
			out.Values[i] = ec._PhaseGroup_tiebreakOrder(ctx, field, obj)
		case "wave":
			out.Values[i] = ec._PhaseGroup_wave(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var phaseGroupConnectionImplementors = []string{"PhaseGroupConnection"}

func (ec *executionContext) _PhaseGroupConnection(ctx context.Context, sel ast.SelectionSet, obj *model.PhaseGroupConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, phaseGroupConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PhaseGroupConnection")
		case "pageInfo":
			out.Values[i] = ec._PhaseGroupConnection_pageInfo(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._PhaseGroupConnection_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var playerImplementors = []string{"Player"}

func (ec *executionContext) _Player(ctx context.Context, sel ast.SelectionSet, obj *model.Player) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, playerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Player")
		case "id":
			out.Values[i] = ec._Player_id(ctx, field, obj)
		case "gamerTag":
			out.Values[i] = ec._Player_gamerTag(ctx, field, obj)
		case "prefix":
			out.Values[i] = ec._Player_prefix(ctx, field, obj)
		case "rankings":
			out.Values[i] = ec._Player_rankings(ctx, field, obj)
		case "recentSets":
			out.Values[i] = ec._Player_recentSets(ctx, field, obj)
		case "sets":
			out.Values[i] = ec._Player_sets(ctx, field, obj)
		case "user":
			out.Values[i] = ec._Player_user(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var playerRankImplementors = []string{"PlayerRank"}

func (ec *executionContext) _PlayerRank(ctx context.Context, sel ast.SelectionSet, obj *model.PlayerRank) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, playerRankImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlayerRank")
		case "id":
			out.Values[i] = ec._PlayerRank_id(ctx, field, obj)
		case "rank":
			out.Values[i] = ec._PlayerRank_rank(ctx, field, obj)
		case "title":
			out.Values[i] = ec._PlayerRank_title(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var profileAuthorizationImplementors = []string{"ProfileAuthorization"}

func (ec *executionContext) _ProfileAuthorization(ctx context.Context, sel ast.SelectionSet, obj *model.ProfileAuthorization) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, profileAuthorizationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProfileAuthorization")
		case "id":
			out.Values[i] = ec._ProfileAuthorization_id(ctx, field, obj)
		case "externalUsername":
			out.Values[i] = ec._ProfileAuthorization_externalUsername(ctx, field, obj)
		case "stream":
			out.Values[i] = ec._ProfileAuthorization_stream(ctx, field, obj)
		case "type":
			out.Values[i] = ec._ProfileAuthorization_type(ctx, field, obj)
		case "url":
			out.Values[i] = ec._ProfileAuthorization_url(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var progressionImplementors = []string{"Progression"}

func (ec *executionContext) _Progression(ctx context.Context, sel ast.SelectionSet, obj *model.Progression) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, progressionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Progression")
		case "id":
			out.Values[i] = ec._Progression_id(ctx, field, obj)
		case "originOrder":
			out.Values[i] = ec._Progression_originOrder(ctx, field, obj)
		case "originPhase":
			out.Values[i] = ec._Progression_originPhase(ctx, field, obj)
		case "originPhaseGroup":
			out.Values[i] = ec._Progression_originPhaseGroup(ctx, field, obj)
		case "originPlacement":
			out.Values[i] = ec._Progression_originPlacement(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "currentUser":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_currentUser(ctx, field)
				return res
			})
		case "event":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_event(ctx, field)
				return res
			})
		case "league":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_league(ctx, field)
				return res
			})
		case "participant":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_participant(ctx, field)
				return res
			})
		case "phase":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_phase(ctx, field)
				return res
			})
		case "phaseGroup":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_phaseGroup(ctx, field)
				return res
			})
		case "player":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_player(ctx, field)
				return res
			})
		case "seed":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_seed(ctx, field)
				return res
			})
		case "set":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_set(ctx, field)
				return res
			})
		case "shop":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_shop(ctx, field)
				return res
			})
		case "stream":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_stream(ctx, field)
				return res
			})
		case "streamQueue":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_streamQueue(ctx, field)
				return res
			})
		case "tournament":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tournament(ctx, field)
				return res
			})
		case "tournaments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tournaments(ctx, field)
				return res
			})
		case "user":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_user(ctx, field)
				return res
			})
		case "videogame":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_videogame(ctx, field)
				return res
			})
		case "videogames":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_videogames(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var raceBracketConfigImplementors = []string{"RaceBracketConfig", "BracketConfig"}

func (ec *executionContext) _RaceBracketConfig(ctx context.Context, sel ast.SelectionSet, obj *model.RaceBracketConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, raceBracketConfigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RaceBracketConfig")
		case "automaticEndTime":
			out.Values[i] = ec._RaceBracketConfig_automaticEndTime(ctx, field, obj)
		case "id":
			out.Values[i] = ec._RaceBracketConfig_id(ctx, field, obj)
		case "automaticStartTime":
			out.Values[i] = ec._RaceBracketConfig_automaticStartTime(ctx, field, obj)
		case "bracketType":
			out.Values[i] = ec._RaceBracketConfig_bracketType(ctx, field, obj)
		case "goalTargetComparator":
			out.Values[i] = ec._RaceBracketConfig_goalTargetComparator(ctx, field, obj)
		case "goalTargetValue":
			out.Values[i] = ec._RaceBracketConfig_goalTargetValue(ctx, field, obj)
		case "limitMode":
			out.Values[i] = ec._RaceBracketConfig_limitMode(ctx, field, obj)
		case "limitValue":
			out.Values[i] = ec._RaceBracketConfig_limitValue(ctx, field, obj)
		case "raceType":
			out.Values[i] = ec._RaceBracketConfig_raceType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var raceMatchConfigImplementors = []string{"RaceMatchConfig", "MatchConfig"}

func (ec *executionContext) _RaceMatchConfig(ctx context.Context, sel ast.SelectionSet, obj *model.RaceMatchConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, raceMatchConfigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RaceMatchConfig")
		case "id":
			out.Values[i] = ec._RaceMatchConfig_id(ctx, field, obj)
		case "bracketType":
			out.Values[i] = ec._RaceMatchConfig_bracketType(ctx, field, obj)
		case "playerReportingEnabled":
			out.Values[i] = ec._RaceMatchConfig_playerReportingEnabled(ctx, field, obj)
		case "verificationMethods":
			out.Values[i] = ec._RaceMatchConfig_verificationMethods(ctx, field, obj)
		case "verificationRequired":
			out.Values[i] = ec._RaceMatchConfig_verificationRequired(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var roundImplementors = []string{"Round"}

func (ec *executionContext) _Round(ctx context.Context, sel ast.SelectionSet, obj *model.Round) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, roundImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Round")
		case "id":
			out.Values[i] = ec._Round_id(ctx, field, obj)
		case "bestOf":
			out.Values[i] = ec._Round_bestOf(ctx, field, obj)
		case "number":
			out.Values[i] = ec._Round_number(ctx, field, obj)
		case "startAt":
			out.Values[i] = ec._Round_startAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var scoreImplementors = []string{"Score"}

func (ec *executionContext) _Score(ctx context.Context, sel ast.SelectionSet, obj *model.Score) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scoreImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Score")
		case "label":
			out.Values[i] = ec._Score_label(ctx, field, obj)
		case "value":
			out.Values[i] = ec._Score_value(ctx, field, obj)
		case "displayValue":
			out.Values[i] = ec._Score_displayValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var seedImplementors = []string{"Seed"}

func (ec *executionContext) _Seed(ctx context.Context, sel ast.SelectionSet, obj *model.Seed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, seedImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Seed")
		case "id":
			out.Values[i] = ec._Seed_id(ctx, field, obj)
		case "checkedInParticipants":
			out.Values[i] = ec._Seed_checkedInParticipants(ctx, field, obj)
		case "entrant":
			out.Values[i] = ec._Seed_entrant(ctx, field, obj)
		case "groupSeedNum":
			out.Values[i] = ec._Seed_groupSeedNum(ctx, field, obj)
		case "isBye":
			out.Values[i] = ec._Seed_isBye(ctx, field, obj)
		case "phase":
			out.Values[i] = ec._Seed_phase(ctx, field, obj)
		case "phaseGroup":
			out.Values[i] = ec._Seed_phaseGroup(ctx, field, obj)
		case "placeholderName":
			out.Values[i] = ec._Seed_placeholderName(ctx, field, obj)
		case "placement":
			out.Values[i] = ec._Seed_placement(ctx, field, obj)
		case "players":
			out.Values[i] = ec._Seed_players(ctx, field, obj)
		case "progressionSeedId":
			out.Values[i] = ec._Seed_progressionSeedId(ctx, field, obj)
		case "progressionSource":
			out.Values[i] = ec._Seed_progressionSource(ctx, field, obj)
		case "seedNum":
			out.Values[i] = ec._Seed_seedNum(ctx, field, obj)
		case "setRecordWithoutByes":
			out.Values[i] = ec._Seed_setRecordWithoutByes(ctx, field, obj)
		case "standings":
			out.Values[i] = ec._Seed_standings(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var seedConnectionImplementors = []string{"SeedConnection"}

func (ec *executionContext) _SeedConnection(ctx context.Context, sel ast.SelectionSet, obj *model.SeedConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, seedConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SeedConnection")
		case "pageInfo":
			out.Values[i] = ec._SeedConnection_pageInfo(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._SeedConnection_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var setImplementors = []string{"Set", "StandingContainer"}

func (ec *executionContext) _Set(ctx context.Context, sel ast.SelectionSet, obj *model.Set) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, setImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Set")
		case "id":
			out.Values[i] = ec._Set_id(ctx, field, obj)
		case "completedAt":
			out.Values[i] = ec._Set_completedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Set_createdAt(ctx, field, obj)
		case "displayScore":
			out.Values[i] = ec._Set_displayScore(ctx, field, obj)
		case "event":
			out.Values[i] = ec._Set_event(ctx, field, obj)
		case "fullRoundText":
			out.Values[i] = ec._Set_fullRoundText(ctx, field, obj)
		case "game":
			out.Values[i] = ec._Set_game(ctx, field, obj)
		case "games":
			out.Values[i] = ec._Set_games(ctx, field, obj)
		case "hasPlaceholder":
			out.Values[i] = ec._Set_hasPlaceholder(ctx, field, obj)
		case "identifier":
			out.Values[i] = ec._Set_identifier(ctx, field, obj)
		case "images":
			out.Values[i] = ec._Set_images(ctx, field, obj)
		case "lPlacement":
			out.Values[i] = ec._Set_lPlacement(ctx, field, obj)
		case "phaseGroup":
			out.Values[i] = ec._Set_phaseGroup(ctx, field, obj)
		case "round":
			out.Values[i] = ec._Set_round(ctx, field, obj)
		case "setGamesType":
			out.Values[i] = ec._Set_setGamesType(ctx, field, obj)
		case "slots":
			out.Values[i] = ec._Set_slots(ctx, field, obj)
		case "startedAt":
			out.Values[i] = ec._Set_startedAt(ctx, field, obj)
		case "state":
			out.Values[i] = ec._Set_state(ctx, field, obj)
		case "station":
			out.Values[i] = ec._Set_station(ctx, field, obj)
		case "stream":
			out.Values[i] = ec._Set_stream(ctx, field, obj)
		case "totalGames":
			out.Values[i] = ec._Set_totalGames(ctx, field, obj)
		case "vodUrl":
			out.Values[i] = ec._Set_vodUrl(ctx, field, obj)
		case "wPlacement":
			out.Values[i] = ec._Set_wPlacement(ctx, field, obj)
		case "winnerId":
			out.Values[i] = ec._Set_winnerId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var setConnectionImplementors = []string{"SetConnection"}

func (ec *executionContext) _SetConnection(ctx context.Context, sel ast.SelectionSet, obj *model.SetConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, setConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SetConnection")
		case "pageInfo":
			out.Values[i] = ec._SetConnection_pageInfo(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._SetConnection_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var setSlotImplementors = []string{"SetSlot"}

func (ec *executionContext) _SetSlot(ctx context.Context, sel ast.SelectionSet, obj *model.SetSlot) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, setSlotImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SetSlot")
		case "id":
			out.Values[i] = ec._SetSlot_id(ctx, field, obj)
		case "entrant":
			out.Values[i] = ec._SetSlot_entrant(ctx, field, obj)
		case "prereqId":
			out.Values[i] = ec._SetSlot_prereqId(ctx, field, obj)
		case "prereqPlacement":
			out.Values[i] = ec._SetSlot_prereqPlacement(ctx, field, obj)
		case "prereqType":
			out.Values[i] = ec._SetSlot_prereqType(ctx, field, obj)
		case "seed":
			out.Values[i] = ec._SetSlot_seed(ctx, field, obj)
		case "slotIndex":
			out.Values[i] = ec._SetSlot_slotIndex(ctx, field, obj)
		case "standing":
			out.Values[i] = ec._SetSlot_standing(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var shopImplementors = []string{"Shop"}

func (ec *executionContext) _Shop(ctx context.Context, sel ast.SelectionSet, obj *model.Shop) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shopImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Shop")
		case "id":
			out.Values[i] = ec._Shop_id(ctx, field, obj)
		case "levels":
			out.Values[i] = ec._Shop_levels(ctx, field, obj)
		case "messages":
			out.Values[i] = ec._Shop_messages(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Shop_name(ctx, field, obj)
		case "slug":
			out.Values[i] = ec._Shop_slug(ctx, field, obj)
		case "url":
			out.Values[i] = ec._Shop_url(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var shopLevelImplementors = []string{"ShopLevel"}

func (ec *executionContext) _ShopLevel(ctx context.Context, sel ast.SelectionSet, obj *model.ShopLevel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shopLevelImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShopLevel")
		case "id":
			out.Values[i] = ec._ShopLevel_id(ctx, field, obj)
		case "currAmount":
			out.Values[i] = ec._ShopLevel_currAmount(ctx, field, obj)
		case "description":
			out.Values[i] = ec._ShopLevel_description(ctx, field, obj)
		case "goalAmount":
			out.Values[i] = ec._ShopLevel_goalAmount(ctx, field, obj)
		case "images":
			out.Values[i] = ec._ShopLevel_images(ctx, field, obj)
		case "name":
			out.Values[i] = ec._ShopLevel_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var shopLevelConnectionImplementors = []string{"ShopLevelConnection"}

func (ec *executionContext) _ShopLevelConnection(ctx context.Context, sel ast.SelectionSet, obj *model.ShopLevelConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shopLevelConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShopLevelConnection")
		case "pageInfo":
			out.Values[i] = ec._ShopLevelConnection_pageInfo(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._ShopLevelConnection_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var shopOrderMessageImplementors = []string{"ShopOrderMessage"}

func (ec *executionContext) _ShopOrderMessage(ctx context.Context, sel ast.SelectionSet, obj *model.ShopOrderMessage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shopOrderMessageImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShopOrderMessage")
		case "id":
			out.Values[i] = ec._ShopOrderMessage_id(ctx, field, obj)
		case "gamertag":
			out.Values[i] = ec._ShopOrderMessage_gamertag(ctx, field, obj)
		case "message":
			out.Values[i] = ec._ShopOrderMessage_message(ctx, field, obj)
		case "name":
			out.Values[i] = ec._ShopOrderMessage_name(ctx, field, obj)
		case "player":
			out.Values[i] = ec._ShopOrderMessage_player(ctx, field, obj)
		case "total":
			out.Values[i] = ec._ShopOrderMessage_total(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var shopOrderMessageConnectionImplementors = []string{"ShopOrderMessageConnection"}

func (ec *executionContext) _ShopOrderMessageConnection(ctx context.Context, sel ast.SelectionSet, obj *model.ShopOrderMessageConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shopOrderMessageConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShopOrderMessageConnection")
		case "pageInfo":
			out.Values[i] = ec._ShopOrderMessageConnection_pageInfo(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._ShopOrderMessageConnection_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var stageImplementors = []string{"Stage"}

func (ec *executionContext) _Stage(ctx context.Context, sel ast.SelectionSet, obj *model.Stage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stageImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Stage")
		case "id":
			out.Values[i] = ec._Stage_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Stage_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var standingImplementors = []string{"Standing"}

func (ec *executionContext) _Standing(ctx context.Context, sel ast.SelectionSet, obj *model.Standing) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, standingImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Standing")
		case "container":
			out.Values[i] = ec._Standing_container(ctx, field, obj)
		case "id":
			out.Values[i] = ec._Standing_id(ctx, field, obj)
		case "entrant":
			out.Values[i] = ec._Standing_entrant(ctx, field, obj)
		case "isFinal":
			out.Values[i] = ec._Standing_isFinal(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._Standing_metadata(ctx, field, obj)
		case "placement":
			out.Values[i] = ec._Standing_placement(ctx, field, obj)
		case "player":
			out.Values[i] = ec._Standing_player(ctx, field, obj)
		case "standing":
			out.Values[i] = ec._Standing_standing(ctx, field, obj)
		case "stats":
			out.Values[i] = ec._Standing_stats(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var standingConnectionImplementors = []string{"StandingConnection"}

func (ec *executionContext) _StandingConnection(ctx context.Context, sel ast.SelectionSet, obj *model.StandingConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, standingConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StandingConnection")
		case "pageInfo":
			out.Values[i] = ec._StandingConnection_pageInfo(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._StandingConnection_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var standingStatsImplementors = []string{"StandingStats"}

func (ec *executionContext) _StandingStats(ctx context.Context, sel ast.SelectionSet, obj *model.StandingStats) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, standingStatsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StandingStats")
		case "score":
			out.Values[i] = ec._StandingStats_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var stationsImplementors = []string{"Stations"}

func (ec *executionContext) _Stations(ctx context.Context, sel ast.SelectionSet, obj *model.Stations) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stationsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Stations")
		case "id":
			out.Values[i] = ec._Stations_id(ctx, field, obj)
		case "canAutoAssign":
			out.Values[i] = ec._Stations_canAutoAssign(ctx, field, obj)
		case "clusterNumber":
			out.Values[i] = ec._Stations_clusterNumber(ctx, field, obj)
		case "clusterPrefix":
			out.Values[i] = ec._Stations_clusterPrefix(ctx, field, obj)
		case "enabled":
			out.Values[i] = ec._Stations_enabled(ctx, field, obj)
		case "identifier":
			out.Values[i] = ec._Stations_identifier(ctx, field, obj)
		case "numSetups":
			out.Values[i] = ec._Stations_numSetups(ctx, field, obj)
		case "number":
			out.Values[i] = ec._Stations_number(ctx, field, obj)
		case "prefix":
			out.Values[i] = ec._Stations_prefix(ctx, field, obj)
		case "queue":
			out.Values[i] = ec._Stations_queue(ctx, field, obj)
		case "queueDepth":
			out.Values[i] = ec._Stations_queueDepth(ctx, field, obj)
		case "state":
			out.Values[i] = ec._Stations_state(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Stations_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var stationsConnectionImplementors = []string{"StationsConnection"}

func (ec *executionContext) _StationsConnection(ctx context.Context, sel ast.SelectionSet, obj *model.StationsConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stationsConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StationsConnection")
		case "pageInfo":
			out.Values[i] = ec._StationsConnection_pageInfo(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._StationsConnection_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var streamImplementors = []string{"Stream"}

func (ec *executionContext) _Stream(ctx context.Context, sel ast.SelectionSet, obj *model.Stream) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, streamImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Stream")
		case "id":
			out.Values[i] = ec._Stream_id(ctx, field, obj)
		case "isOnline":
			out.Values[i] = ec._Stream_isOnline(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Stream_name(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Stream_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var streamQueueImplementors = []string{"StreamQueue"}

func (ec *executionContext) _StreamQueue(ctx context.Context, sel ast.SelectionSet, obj *model.StreamQueue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, streamQueueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StreamQueue")
		case "id":
			out.Values[i] = ec._StreamQueue_id(ctx, field, obj)
		case "sets":
			out.Values[i] = ec._StreamQueue_sets(ctx, field, obj)
		case "stream":
			out.Values[i] = ec._StreamQueue_stream(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var streamsImplementors = []string{"Streams"}

func (ec *executionContext) _Streams(ctx context.Context, sel ast.SelectionSet, obj *model.Streams) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, streamsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Streams")
		case "id":
			out.Values[i] = ec._Streams_id(ctx, field, obj)
		case "enabled":
			out.Values[i] = ec._Streams_enabled(ctx, field, obj)
		case "followerCount":
			out.Values[i] = ec._Streams_followerCount(ctx, field, obj)
		case "isOnline":
			out.Values[i] = ec._Streams_isOnline(ctx, field, obj)
		case "numSetups":
			out.Values[i] = ec._Streams_numSetups(ctx, field, obj)
		case "parentStreamId":
			out.Values[i] = ec._Streams_parentStreamId(ctx, field, obj)
		case "streamGame":
			out.Values[i] = ec._Streams_streamGame(ctx, field, obj)
		case "streamId":
			out.Values[i] = ec._Streams_streamId(ctx, field, obj)
		case "streamLogo":
			out.Values[i] = ec._Streams_streamLogo(ctx, field, obj)
		case "streamName":
			out.Values[i] = ec._Streams_streamName(ctx, field, obj)
		case "streamSource":
			out.Values[i] = ec._Streams_streamSource(ctx, field, obj)
		case "streamStatus":
			out.Values[i] = ec._Streams_streamStatus(ctx, field, obj)
		case "streamType":
			out.Values[i] = ec._Streams_streamType(ctx, field, obj)
		case "streamTypeId":
			out.Values[i] = ec._Streams_streamTypeId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var teamImplementors = []string{"Team"}

func (ec *executionContext) _Team(ctx context.Context, sel ast.SelectionSet, obj *model.Team) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, teamImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Team")
		case "id":
			out.Values[i] = ec._Team_id(ctx, field, obj)
		case "entrant":
			out.Values[i] = ec._Team_entrant(ctx, field, obj)
		case "event":
			out.Values[i] = ec._Team_event(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Team_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var teamConnectionImplementors = []string{"TeamConnection"}

func (ec *executionContext) _TeamConnection(ctx context.Context, sel ast.SelectionSet, obj *model.TeamConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, teamConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TeamConnection")
		case "pageInfo":
			out.Values[i] = ec._TeamConnection_pageInfo(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._TeamConnection_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tournamentImplementors = []string{"Tournament", "StandingContainer"}

func (ec *executionContext) _Tournament(ctx context.Context, sel ast.SelectionSet, obj *model.Tournament) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tournamentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Tournament")
		case "id":
			out.Values[i] = ec._Tournament_id(ctx, field, obj)
		case "addrState":
			out.Values[i] = ec._Tournament_addrState(ctx, field, obj)
		case "admins":
			out.Values[i] = ec._Tournament_admins(ctx, field, obj)
		case "city":
			out.Values[i] = ec._Tournament_city(ctx, field, obj)
		case "countryCode":
			out.Values[i] = ec._Tournament_countryCode(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Tournament_createdAt(ctx, field, obj)
		case "currency":
			out.Values[i] = ec._Tournament_currency(ctx, field, obj)
		case "endAt":
			out.Values[i] = ec._Tournament_endAt(ctx, field, obj)
		case "eventRegistrationClosesAt":
			out.Values[i] = ec._Tournament_eventRegistrationClosesAt(ctx, field, obj)
		case "events":
			out.Values[i] = ec._Tournament_events(ctx, field, obj)
		case "hasOfflineEvents":
			out.Values[i] = ec._Tournament_hasOfflineEvents(ctx, field, obj)
		case "hasOnlineEvents":
			out.Values[i] = ec._Tournament_hasOnlineEvents(ctx, field, obj)
		case "hashtag":
			out.Values[i] = ec._Tournament_hashtag(ctx, field, obj)
		case "images":
			out.Values[i] = ec._Tournament_images(ctx, field, obj)
		case "isOnline":
			out.Values[i] = ec._Tournament_isOnline(ctx, field, obj)
		case "isRegistrationOpen":
			out.Values[i] = ec._Tournament_isRegistrationOpen(ctx, field, obj)
		case "lat":
			out.Values[i] = ec._Tournament_lat(ctx, field, obj)
		case "links":
			out.Values[i] = ec._Tournament_links(ctx, field, obj)
		case "lng":
			out.Values[i] = ec._Tournament_lng(ctx, field, obj)
		case "mapsPlaceId":
			out.Values[i] = ec._Tournament_mapsPlaceId(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Tournament_name(ctx, field, obj)
		case "numAttendees":
			out.Values[i] = ec._Tournament_numAttendees(ctx, field, obj)
		case "owner":
			out.Values[i] = ec._Tournament_owner(ctx, field, obj)
		case "participants":
			out.Values[i] = ec._Tournament_participants(ctx, field, obj)
		case "postalCode":
			out.Values[i] = ec._Tournament_postalCode(ctx, field, obj)
		case "primaryContact":
			out.Values[i] = ec._Tournament_primaryContact(ctx, field, obj)
		case "primaryContactType":
			out.Values[i] = ec._Tournament_primaryContactType(ctx, field, obj)
		case "publishing":
			out.Values[i] = ec._Tournament_publishing(ctx, field, obj)
		case "registrationClosesAt":
			out.Values[i] = ec._Tournament_registrationClosesAt(ctx, field, obj)
		case "rules":
			out.Values[i] = ec._Tournament_rules(ctx, field, obj)
		case "shortSlug":
			out.Values[i] = ec._Tournament_shortSlug(ctx, field, obj)
		case "slug":
			out.Values[i] = ec._Tournament_slug(ctx, field, obj)
		case "startAt":
			out.Values[i] = ec._Tournament_startAt(ctx, field, obj)
		case "state":
			out.Values[i] = ec._Tournament_state(ctx, field, obj)
		case "stations":
			out.Values[i] = ec._Tournament_stations(ctx, field, obj)
		case "streamQueue":
			out.Values[i] = ec._Tournament_streamQueue(ctx, field, obj)
		case "streams":
			out.Values[i] = ec._Tournament_streams(ctx, field, obj)
		case "teamCreationClosesAt":
			out.Values[i] = ec._Tournament_teamCreationClosesAt(ctx, field, obj)
		case "teams":
			out.Values[i] = ec._Tournament_teams(ctx, field, obj)
		case "timezone":
			out.Values[i] = ec._Tournament_timezone(ctx, field, obj)
		case "tournamentType":
			out.Values[i] = ec._Tournament_tournamentType(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Tournament_updatedAt(ctx, field, obj)
		case "url":
			out.Values[i] = ec._Tournament_url(ctx, field, obj)
		case "venueAddress":
			out.Values[i] = ec._Tournament_venueAddress(ctx, field, obj)
		case "venueName":
			out.Values[i] = ec._Tournament_venueName(ctx, field, obj)
		case "waves":
			out.Values[i] = ec._Tournament_waves(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tournamentConnectionImplementors = []string{"TournamentConnection"}

func (ec *executionContext) _TournamentConnection(ctx context.Context, sel ast.SelectionSet, obj *model.TournamentConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tournamentConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TournamentConnection")
		case "pageInfo":
			out.Values[i] = ec._TournamentConnection_pageInfo(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._TournamentConnection_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tournamentLinksImplementors = []string{"TournamentLinks"}

func (ec *executionContext) _TournamentLinks(ctx context.Context, sel ast.SelectionSet, obj *model.TournamentLinks) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tournamentLinksImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TournamentLinks")
		case "facebook":
			out.Values[i] = ec._TournamentLinks_facebook(ctx, field, obj)
		case "discord":
			out.Values[i] = ec._TournamentLinks_discord(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *model.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
		case "authorizations":
			out.Values[i] = ec._User_authorizations(ctx, field, obj)
		case "bio":
			out.Values[i] = ec._User_bio(ctx, field, obj)
		case "birthday":
			out.Values[i] = ec._User_birthday(ctx, field, obj)
		case "events":
			out.Values[i] = ec._User_events(ctx, field, obj)
		case "genderPronoun":
			out.Values[i] = ec._User_genderPronoun(ctx, field, obj)
		case "images":
			out.Values[i] = ec._User_images(ctx, field, obj)
		case "leagues":
			out.Values[i] = ec._User_leagues(ctx, field, obj)
		case "location":
			out.Values[i] = ec._User_location(ctx, field, obj)
		case "name":
			out.Values[i] = ec._User_name(ctx, field, obj)
		case "player":
			out.Values[i] = ec._User_player(ctx, field, obj)
		case "slug":
			out.Values[i] = ec._User_slug(ctx, field, obj)
		case "tournaments":
			out.Values[i] = ec._User_tournaments(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var videogameImplementors = []string{"Videogame"}

func (ec *executionContext) _Videogame(ctx context.Context, sel ast.SelectionSet, obj *model.Videogame) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, videogameImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Videogame")
		case "id":
			out.Values[i] = ec._Videogame_id(ctx, field, obj)
		case "displayName":
			out.Values[i] = ec._Videogame_displayName(ctx, field, obj)
		case "images":
			out.Values[i] = ec._Videogame_images(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Videogame_name(ctx, field, obj)
		case "slug":
			out.Values[i] = ec._Videogame_slug(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var videogameConnectionImplementors = []string{"VideogameConnection"}

func (ec *executionContext) _VideogameConnection(ctx context.Context, sel ast.SelectionSet, obj *model.VideogameConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, videogameConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VideogameConnection")
		case "pageInfo":
			out.Values[i] = ec._VideogameConnection_pageInfo(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._VideogameConnection_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var waveImplementors = []string{"Wave"}

func (ec *executionContext) _Wave(ctx context.Context, sel ast.SelectionSet, obj *model.Wave) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, waveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Wave")
		case "id":
			out.Values[i] = ec._Wave_id(ctx, field, obj)
		case "identifier":
			out.Values[i] = ec._Wave_identifier(ctx, field, obj)
		case "startAt":
			out.Values[i] = ec._Wave_startAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNParticipantPaginationQuery2githubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐParticipantPaginationQuery(ctx context.Context, v interface{}) (model.ParticipantPaginationQuery, error) {
	res, err := ec.unmarshalInputParticipantPaginationQuery(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPhaseGroupUpdateInput2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhaseGroupUpdateInput(ctx context.Context, v interface{}) ([]*model.PhaseGroupUpdateInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.PhaseGroupUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOPhaseGroupUpdateInput2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhaseGroupUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNPhaseUpsertInput2githubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhaseUpsertInput(ctx context.Context, v interface{}) (model.PhaseUpsertInput, error) {
	res, err := ec.unmarshalInputPhaseUpsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSeedPaginationQuery2githubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSeedPaginationQuery(ctx context.Context, v interface{}) (model.SeedPaginationQuery, error) {
	res, err := ec.unmarshalInputSeedPaginationQuery(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNStandingPaginationQuery2githubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStandingPaginationQuery(ctx context.Context, v interface{}) (model.StandingPaginationQuery, error) {
	res, err := ec.unmarshalInputStandingPaginationQuery(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNStationUpsertInput2githubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStationUpsertInput(ctx context.Context, v interface{}) (model.StationUpsertInput, error) {
	res, err := ec.unmarshalInputStationUpsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTeamsPaginationQuery2githubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTeamsPaginationQuery(ctx context.Context, v interface{}) (model.TeamsPaginationQuery, error) {
	res, err := ec.unmarshalInputTeamsPaginationQuery(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTimestamp2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamp2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTournamentQuery2githubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTournamentQuery(ctx context.Context, v interface{}) (model.TournamentQuery, error) {
	res, err := ec.unmarshalInputTournamentQuery(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdatePhaseSeedInfo2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUpdatePhaseSeedInfo(ctx context.Context, v interface{}) ([]*model.UpdatePhaseSeedInfo, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.UpdatePhaseSeedInfo, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUpdatePhaseSeedInfo2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUpdatePhaseSeedInfo(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNVideogameQuery2githubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐVideogameQuery(ctx context.Context, v interface{}) (model.VideogameQuery, error) {
	res, err := ec.unmarshalInputVideogameQuery(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNWaveUpsertInput2githubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐWaveUpsertInput(ctx context.Context, v interface{}) (model.WaveUpsertInput, error) {
	res, err := ec.unmarshalInputWaveUpsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOActivityState2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐActivityState(ctx context.Context, v interface{}) (*model.ActivityState, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ActivityState)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOActivityState2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐActivityState(ctx context.Context, sel ast.SelectionSet, v *model.ActivityState) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOAddress2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐAddress(ctx context.Context, sel ast.SelectionSet, v *model.Address) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Address(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAuthorizationType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐAuthorizationType(ctx context.Context, v interface{}) (*model.AuthorizationType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.AuthorizationType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAuthorizationType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐAuthorizationType(ctx context.Context, sel ast.SelectionSet, v *model.AuthorizationType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBracketType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐBracketType(ctx context.Context, v interface{}) (*model.BracketType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.BracketType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBracketType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐBracketType(ctx context.Context, sel ast.SelectionSet, v *model.BracketType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOComparator2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐComparator(ctx context.Context, v interface{}) (*model.Comparator, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.Comparator)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOComparator2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐComparator(ctx context.Context, sel ast.SelectionSet, v *model.Comparator) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOContactInfo2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐContactInfo(ctx context.Context, sel ast.SelectionSet, v *model.ContactInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ContactInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOEntrant2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEntrant(ctx context.Context, sel ast.SelectionSet, v []*model.Entrant) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOEntrant2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEntrant(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOEntrant2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEntrant(ctx context.Context, sel ast.SelectionSet, v *model.Entrant) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Entrant(ctx, sel, v)
}

func (ec *executionContext) marshalOEntrantConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEntrantConnection(ctx context.Context, sel ast.SelectionSet, v *model.EntrantConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EntrantConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOEvent2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEvent(ctx context.Context, sel ast.SelectionSet, v []*model.Event) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOEvent2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEvent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOEvent2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEvent(ctx context.Context, sel ast.SelectionSet, v *model.Event) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Event(ctx, sel, v)
}

func (ec *executionContext) marshalOEventConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEventConnection(ctx context.Context, sel ast.SelectionSet, v *model.EventConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EventConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEventEntrantPageQuery2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEventEntrantPageQuery(ctx context.Context, v interface{}) (*model.EventEntrantPageQuery, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEventEntrantPageQuery(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEventEntrantPageQueryFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEventEntrantPageQueryFilter(ctx context.Context, v interface{}) (*model.EventEntrantPageQueryFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEventEntrantPageQueryFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEventOwner2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEventOwner(ctx context.Context, sel ast.SelectionSet, v []*model.EventOwner) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOEventOwner2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEventOwner(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOEventOwner2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEventOwner(ctx context.Context, sel ast.SelectionSet, v *model.EventOwner) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EventOwner(ctx, sel, v)
}

func (ec *executionContext) marshalOEventOwnerConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEventOwnerConnection(ctx context.Context, sel ast.SelectionSet, v *model.EventOwnerConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EventOwnerConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEventOwnersQuery2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐEventOwnersQuery(ctx context.Context, v interface{}) (*model.EventOwnersQuery, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEventOwnersQuery(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) marshalOGame2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐGame(ctx context.Context, sel ast.SelectionSet, v []*model.Game) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGame2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐGame(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOGame2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐGame(ctx context.Context, sel ast.SelectionSet, v *model.Game) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Game(ctx, sel, v)
}

func (ec *executionContext) marshalOGameSelection2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐGameSelection(ctx context.Context, sel ast.SelectionSet, v []*model.GameSelection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGameSelection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐGameSelection(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOGameSelection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐGameSelection(ctx context.Context, sel ast.SelectionSet, v *model.GameSelection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GameSelection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOGameSelectionType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐGameSelectionType(ctx context.Context, v interface{}) (*model.GameSelectionType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.GameSelectionType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOGameSelectionType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐGameSelectionType(ctx context.Context, sel ast.SelectionSet, v *model.GameSelectionType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOID2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOID2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOID2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalID(*v)
}

func (ec *executionContext) marshalOImage2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐImage(ctx context.Context, sel ast.SelectionSet, v []*model.Image) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOImage2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐImage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOImage2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐImage(ctx context.Context, sel ast.SelectionSet, v *model.Image) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Image(ctx, sel, v)
}

func (ec *executionContext) unmarshalOInt2ᚕᚖint(ctx context.Context, v interface{}) ([]*int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOInt2ᚖint(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕᚖint(ctx context.Context, sel ast.SelectionSet, v []*int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOInt2ᚖint(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOJSON2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJSON2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOLeague2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐLeague(ctx context.Context, sel ast.SelectionSet, v []*model.League) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLeague2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐLeague(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOLeague2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐLeague(ctx context.Context, sel ast.SelectionSet, v *model.League) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._League(ctx, sel, v)
}

func (ec *executionContext) marshalOLeagueConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐLeagueConnection(ctx context.Context, sel ast.SelectionSet, v *model.LeagueConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LeagueConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLeagueEventsFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐLeagueEventsFilter(ctx context.Context, v interface{}) (*model.LeagueEventsFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLeagueEventsFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLeagueEventsQuery2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐLeagueEventsQuery(ctx context.Context, v interface{}) (*model.LeagueEventsQuery, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLeagueEventsQuery(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLocationFilterType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐLocationFilterType(ctx context.Context, v interface{}) (*model.LocationFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLocationFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMatchConfigVerificationMethod2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐMatchConfigVerificationMethod(ctx context.Context, v interface{}) ([]*model.MatchConfigVerificationMethod, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MatchConfigVerificationMethod, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOMatchConfigVerificationMethod2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐMatchConfigVerificationMethod(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOMatchConfigVerificationMethod2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐMatchConfigVerificationMethod(ctx context.Context, sel ast.SelectionSet, v []*model.MatchConfigVerificationMethod) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMatchConfigVerificationMethod2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐMatchConfigVerificationMethod(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOMatchConfigVerificationMethod2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐMatchConfigVerificationMethod(ctx context.Context, v interface{}) (*model.MatchConfigVerificationMethod, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.MatchConfigVerificationMethod)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMatchConfigVerificationMethod2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐMatchConfigVerificationMethod(ctx context.Context, sel ast.SelectionSet, v *model.MatchConfigVerificationMethod) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOPageInfo2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v *model.PageInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PageInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPaginationSearchType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPaginationSearchType(ctx context.Context, v interface{}) (*model.PaginationSearchType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPaginationSearchType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOParticipant2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐParticipant(ctx context.Context, sel ast.SelectionSet, v []*model.Participant) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOParticipant2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐParticipant(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOParticipant2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐParticipant(ctx context.Context, sel ast.SelectionSet, v *model.Participant) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Participant(ctx, sel, v)
}

func (ec *executionContext) marshalOParticipantConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐParticipantConnection(ctx context.Context, sel ast.SelectionSet, v *model.ParticipantConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ParticipantConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOParticipantPageFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐParticipantPageFilter(ctx context.Context, v interface{}) (*model.ParticipantPageFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputParticipantPageFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOParticipantSearch2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐParticipantSearch(ctx context.Context, v interface{}) (*model.ParticipantSearch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputParticipantSearch(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPhase2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhase(ctx context.Context, sel ast.SelectionSet, v []*model.Phase) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPhase2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhase(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPhase2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhase(ctx context.Context, sel ast.SelectionSet, v *model.Phase) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Phase(ctx, sel, v)
}

func (ec *executionContext) marshalOPhaseGroup2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhaseGroup(ctx context.Context, sel ast.SelectionSet, v []*model.PhaseGroup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPhaseGroup2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhaseGroup(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPhaseGroup2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhaseGroup(ctx context.Context, sel ast.SelectionSet, v *model.PhaseGroup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PhaseGroup(ctx, sel, v)
}

func (ec *executionContext) marshalOPhaseGroupConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhaseGroupConnection(ctx context.Context, sel ast.SelectionSet, v *model.PhaseGroupConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PhaseGroupConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPhaseGroupPageQuery2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhaseGroupPageQuery(ctx context.Context, v interface{}) (*model.PhaseGroupPageQuery, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPhaseGroupPageQuery(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPhaseGroupPageQueryFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhaseGroupPageQueryFilter(ctx context.Context, v interface{}) (*model.PhaseGroupPageQueryFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPhaseGroupPageQueryFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPhaseGroupUpdateInput2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPhaseGroupUpdateInput(ctx context.Context, v interface{}) (*model.PhaseGroupUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPhaseGroupUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPlayer2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPlayer(ctx context.Context, sel ast.SelectionSet, v []*model.Player) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPlayer2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPlayer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPlayer2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPlayer(ctx context.Context, sel ast.SelectionSet, v *model.Player) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Player(ctx, sel, v)
}

func (ec *executionContext) marshalOPlayerRank2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPlayerRank(ctx context.Context, sel ast.SelectionSet, v []*model.PlayerRank) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPlayerRank2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPlayerRank(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPlayerRank2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐPlayerRank(ctx context.Context, sel ast.SelectionSet, v *model.PlayerRank) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PlayerRank(ctx, sel, v)
}

func (ec *executionContext) marshalOProfileAuthorization2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐProfileAuthorization(ctx context.Context, sel ast.SelectionSet, v []*model.ProfileAuthorization) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProfileAuthorization2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐProfileAuthorization(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOProfileAuthorization2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐProfileAuthorization(ctx context.Context, sel ast.SelectionSet, v *model.ProfileAuthorization) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProfileAuthorization(ctx, sel, v)
}

func (ec *executionContext) marshalOProgression2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐProgression(ctx context.Context, sel ast.SelectionSet, v []*model.Progression) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProgression2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐProgression(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOProgression2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐProgression(ctx context.Context, sel ast.SelectionSet, v *model.Progression) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Progression(ctx, sel, v)
}

func (ec *executionContext) unmarshalORaceLimitMode2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐRaceLimitMode(ctx context.Context, v interface{}) (*model.RaceLimitMode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.RaceLimitMode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORaceLimitMode2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐRaceLimitMode(ctx context.Context, sel ast.SelectionSet, v *model.RaceLimitMode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalORaceType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐRaceType(ctx context.Context, v interface{}) (*model.RaceType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.RaceType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORaceType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐRaceType(ctx context.Context, sel ast.SelectionSet, v *model.RaceType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOResolveConflictsLockedSeedConfig2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐResolveConflictsLockedSeedConfig(ctx context.Context, v interface{}) ([]*model.ResolveConflictsLockedSeedConfig, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ResolveConflictsLockedSeedConfig, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOResolveConflictsLockedSeedConfig2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐResolveConflictsLockedSeedConfig(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOResolveConflictsLockedSeedConfig2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐResolveConflictsLockedSeedConfig(ctx context.Context, v interface{}) (*model.ResolveConflictsLockedSeedConfig, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputResolveConflictsLockedSeedConfig(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOResolveConflictsOptions2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐResolveConflictsOptions(ctx context.Context, v interface{}) (*model.ResolveConflictsOptions, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputResolveConflictsOptions(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORound2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐRound(ctx context.Context, sel ast.SelectionSet, v []*model.Round) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORound2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐRound(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORound2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐRound(ctx context.Context, sel ast.SelectionSet, v *model.Round) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Round(ctx, sel, v)
}

func (ec *executionContext) marshalOScore2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐScore(ctx context.Context, sel ast.SelectionSet, v *model.Score) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Score(ctx, sel, v)
}

func (ec *executionContext) marshalOSeed2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSeed(ctx context.Context, sel ast.SelectionSet, v []*model.Seed) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSeed2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSeed(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOSeed2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSeed(ctx context.Context, sel ast.SelectionSet, v *model.Seed) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Seed(ctx, sel, v)
}

func (ec *executionContext) marshalOSeedConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSeedConnection(ctx context.Context, sel ast.SelectionSet, v *model.SeedConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SeedConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSeedPageFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSeedPageFilter(ctx context.Context, v interface{}) (*model.SeedPageFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSeedPageFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSeedSearch2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSeedSearch(ctx context.Context, v interface{}) (*model.SeedSearch, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSeedSearch(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSet2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSet(ctx context.Context, sel ast.SelectionSet, v []*model.Set) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSet2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSet(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOSet2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSet(ctx context.Context, sel ast.SelectionSet, v *model.Set) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Set(ctx, sel, v)
}

func (ec *executionContext) marshalOSetConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetConnection(ctx context.Context, sel ast.SelectionSet, v *model.SetConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SetConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSetFilterLocation2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetFilterLocation(ctx context.Context, v interface{}) (*model.SetFilterLocation, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSetFilterLocation(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSetFilterLocationDistanceFrom2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetFilterLocationDistanceFrom(ctx context.Context, v interface{}) (*model.SetFilterLocationDistanceFrom, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSetFilterLocationDistanceFrom(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSetFilterLocationDistanceFromPoint2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetFilterLocationDistanceFromPoint(ctx context.Context, v interface{}) (*model.SetFilterLocationDistanceFromPoint, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSetFilterLocationDistanceFromPoint(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSetFilters2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetFilters(ctx context.Context, v interface{}) (*model.SetFilters, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSetFilters(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSetSlot2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetSlot(ctx context.Context, sel ast.SelectionSet, v []*model.SetSlot) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSetSlot2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetSlot(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOSetSlot2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetSlot(ctx context.Context, sel ast.SelectionSet, v *model.SetSlot) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SetSlot(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSetSortType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetSortType(ctx context.Context, v interface{}) (*model.SetSortType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.SetSortType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSetSortType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSetSortType(ctx context.Context, sel ast.SelectionSet, v *model.SetSortType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOShop2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐShop(ctx context.Context, sel ast.SelectionSet, v *model.Shop) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Shop(ctx, sel, v)
}

func (ec *executionContext) marshalOShopLevel2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐShopLevel(ctx context.Context, sel ast.SelectionSet, v []*model.ShopLevel) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOShopLevel2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐShopLevel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOShopLevel2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐShopLevel(ctx context.Context, sel ast.SelectionSet, v *model.ShopLevel) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ShopLevel(ctx, sel, v)
}

func (ec *executionContext) marshalOShopLevelConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐShopLevelConnection(ctx context.Context, sel ast.SelectionSet, v *model.ShopLevelConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ShopLevelConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOShopLevelsQuery2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐShopLevelsQuery(ctx context.Context, v interface{}) (*model.ShopLevelsQuery, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputShopLevelsQuery(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOShopOrderMessage2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐShopOrderMessage(ctx context.Context, sel ast.SelectionSet, v []*model.ShopOrderMessage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOShopOrderMessage2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐShopOrderMessage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOShopOrderMessage2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐShopOrderMessage(ctx context.Context, sel ast.SelectionSet, v *model.ShopOrderMessage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ShopOrderMessage(ctx, sel, v)
}

func (ec *executionContext) marshalOShopOrderMessageConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐShopOrderMessageConnection(ctx context.Context, sel ast.SelectionSet, v *model.ShopOrderMessageConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ShopOrderMessageConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOShopOrderMessagesQuery2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐShopOrderMessagesQuery(ctx context.Context, v interface{}) (*model.ShopOrderMessagesQuery, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputShopOrderMessagesQuery(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSocialConnectionType2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSocialConnectionType(ctx context.Context, v interface{}) ([]*model.SocialConnectionType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SocialConnectionType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOSocialConnectionType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSocialConnectionType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOSocialConnectionType2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSocialConnectionType(ctx context.Context, sel ast.SelectionSet, v []*model.SocialConnectionType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSocialConnectionType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSocialConnectionType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOSocialConnectionType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSocialConnectionType(ctx context.Context, v interface{}) (*model.SocialConnectionType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.SocialConnectionType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSocialConnectionType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐSocialConnectionType(ctx context.Context, sel ast.SelectionSet, v *model.SocialConnectionType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOStage2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStage(ctx context.Context, sel ast.SelectionSet, v *model.Stage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Stage(ctx, sel, v)
}

func (ec *executionContext) marshalOStanding2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStanding(ctx context.Context, sel ast.SelectionSet, v []*model.Standing) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOStanding2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStanding(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOStanding2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStanding(ctx context.Context, sel ast.SelectionSet, v *model.Standing) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Standing(ctx, sel, v)
}

func (ec *executionContext) marshalOStandingConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStandingConnection(ctx context.Context, sel ast.SelectionSet, v *model.StandingConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StandingConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOStandingContainer2githubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStandingContainer(ctx context.Context, sel ast.SelectionSet, v model.StandingContainer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StandingContainer(ctx, sel, v)
}

func (ec *executionContext) unmarshalOStandingGroupStandingPageFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStandingGroupStandingPageFilter(ctx context.Context, v interface{}) (*model.StandingGroupStandingPageFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStandingGroupStandingPageFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOStandingPageFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStandingPageFilter(ctx context.Context, v interface{}) (*model.StandingPageFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStandingPageFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOStandingStats2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStandingStats(ctx context.Context, sel ast.SelectionSet, v *model.StandingStats) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StandingStats(ctx, sel, v)
}

func (ec *executionContext) unmarshalOStationFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStationFilter(ctx context.Context, v interface{}) (*model.StationFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStationFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOStations2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStations(ctx context.Context, sel ast.SelectionSet, v []*model.Stations) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOStations2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStations(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOStations2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStations(ctx context.Context, sel ast.SelectionSet, v *model.Stations) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Stations(ctx, sel, v)
}

func (ec *executionContext) marshalOStationsConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStationsConnection(ctx context.Context, sel ast.SelectionSet, v *model.StationsConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StationsConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOStream2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStream(ctx context.Context, sel ast.SelectionSet, v *model.Stream) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Stream(ctx, sel, v)
}

func (ec *executionContext) marshalOStreamQueue2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStreamQueue(ctx context.Context, sel ast.SelectionSet, v []*model.StreamQueue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOStreamQueue2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStreamQueue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOStreamQueue2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStreamQueue(ctx context.Context, sel ast.SelectionSet, v *model.StreamQueue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StreamQueue(ctx, sel, v)
}

func (ec *executionContext) unmarshalOStreamSource2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStreamSource(ctx context.Context, v interface{}) (*model.StreamSource, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.StreamSource)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOStreamSource2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStreamSource(ctx context.Context, sel ast.SelectionSet, v *model.StreamSource) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOStreamType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStreamType(ctx context.Context, v interface{}) (*model.StreamType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.StreamType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOStreamType2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStreamType(ctx context.Context, sel ast.SelectionSet, v *model.StreamType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOStreams2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStreams(ctx context.Context, sel ast.SelectionSet, v []*model.Streams) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOStreams2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStreams(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOStreams2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐStreams(ctx context.Context, sel ast.SelectionSet, v *model.Streams) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Streams(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOTeam2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTeam(ctx context.Context, sel ast.SelectionSet, v []*model.Team) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTeam2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTeam(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOTeam2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTeam(ctx context.Context, sel ast.SelectionSet, v *model.Team) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Team(ctx, sel, v)
}

func (ec *executionContext) marshalOTeamConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTeamConnection(ctx context.Context, sel ast.SelectionSet, v *model.TeamConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TeamConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTeamsPageFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTeamsPageFilter(ctx context.Context, v interface{}) (*model.TeamsPageFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTeamsPageFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTimestamp2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimestamp2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOTopGameFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTopGameFilter(ctx context.Context, v interface{}) (*model.TopGameFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTopGameFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTournament2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTournament(ctx context.Context, sel ast.SelectionSet, v []*model.Tournament) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTournament2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTournament(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOTournament2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTournament(ctx context.Context, sel ast.SelectionSet, v *model.Tournament) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Tournament(ctx, sel, v)
}

func (ec *executionContext) marshalOTournamentConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTournamentConnection(ctx context.Context, sel ast.SelectionSet, v *model.TournamentConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TournamentConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOTournamentLinks2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTournamentLinks(ctx context.Context, sel ast.SelectionSet, v *model.TournamentLinks) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TournamentLinks(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTournamentLocationFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTournamentLocationFilter(ctx context.Context, v interface{}) (*model.TournamentLocationFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTournamentLocationFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTournamentPageFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTournamentPageFilter(ctx context.Context, v interface{}) (*model.TournamentPageFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTournamentPageFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTournamentPaginationSort2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTournamentPaginationSort(ctx context.Context, v interface{}) (*model.TournamentPaginationSort, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.TournamentPaginationSort)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTournamentPaginationSort2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐTournamentPaginationSort(ctx context.Context, sel ast.SelectionSet, v *model.TournamentPaginationSort) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOUpdatePhaseSeedInfo2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUpdatePhaseSeedInfo(ctx context.Context, v interface{}) (*model.UpdatePhaseSeedInfo, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUpdatePhaseSeedInfo(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUpdatePhaseSeedingOptions2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUpdatePhaseSeedingOptions(ctx context.Context, v interface{}) (*model.UpdatePhaseSeedingOptions, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUpdatePhaseSeedingOptions(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUser2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v []*model.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUser2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOUser2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserEventsPaginationFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUserEventsPaginationFilter(ctx context.Context, v interface{}) (*model.UserEventsPaginationFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserEventsPaginationFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserEventsPaginationQuery2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUserEventsPaginationQuery(ctx context.Context, v interface{}) (*model.UserEventsPaginationQuery, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserEventsPaginationQuery(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserLeaguesPaginationFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUserLeaguesPaginationFilter(ctx context.Context, v interface{}) (*model.UserLeaguesPaginationFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserLeaguesPaginationFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserLeaguesPaginationQuery2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUserLeaguesPaginationQuery(ctx context.Context, v interface{}) (*model.UserLeaguesPaginationQuery, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserLeaguesPaginationQuery(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserTournamentsPaginationFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUserTournamentsPaginationFilter(ctx context.Context, v interface{}) (*model.UserTournamentsPaginationFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserTournamentsPaginationFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserTournamentsPaginationQuery2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐUserTournamentsPaginationQuery(ctx context.Context, v interface{}) (*model.UserTournamentsPaginationQuery, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserTournamentsPaginationQuery(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVideogame2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐVideogame(ctx context.Context, sel ast.SelectionSet, v []*model.Videogame) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOVideogame2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐVideogame(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOVideogame2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐVideogame(ctx context.Context, sel ast.SelectionSet, v *model.Videogame) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Videogame(ctx, sel, v)
}

func (ec *executionContext) marshalOVideogameConnection2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐVideogameConnection(ctx context.Context, sel ast.SelectionSet, v *model.VideogameConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VideogameConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVideogamePageFilter2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐVideogamePageFilter(ctx context.Context, v interface{}) (*model.VideogamePageFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVideogamePageFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOWave2ᚕᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐWave(ctx context.Context, sel ast.SelectionSet, v []*model.Wave) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOWave2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐWave(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOWave2ᚖgithubᚗcomᚋmiyauchiᚑsupᚋgraphqlᚋgraphᚋmodelᚐWave(ctx context.Context, sel ast.SelectionSet, v *model.Wave) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Wave(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
